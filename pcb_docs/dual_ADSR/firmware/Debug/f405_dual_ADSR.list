
f405_dual_ADSR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fdc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006168  08006168  00016168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c8  080061c8  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061d0  080061d0  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d4  080061d4  000161d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  080061d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a38  20000104  080062dc  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b3c  080062dc  00020b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbfd  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000236e  00000000  00000000  0002dd31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd8  00000000  00000000  000300a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  00030d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020327  00000000  00000000  00031908  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b9cb  00000000  00000000  00051c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2e22  00000000  00000000  0005d5fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012041c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000383c  00000000  00000000  00120498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000104 	.word	0x20000104
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800614c 	.word	0x0800614c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000108 	.word	0x20000108
 80001c4:	0800614c 	.word	0x0800614c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000af4:	f000 b972 	b.w	8000ddc <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9e08      	ldr	r6, [sp, #32]
 8000b16:	4604      	mov	r4, r0
 8000b18:	4688      	mov	r8, r1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d14b      	bne.n	8000bb6 <__udivmoddi4+0xa6>
 8000b1e:	428a      	cmp	r2, r1
 8000b20:	4615      	mov	r5, r2
 8000b22:	d967      	bls.n	8000bf4 <__udivmoddi4+0xe4>
 8000b24:	fab2 f282 	clz	r2, r2
 8000b28:	b14a      	cbz	r2, 8000b3e <__udivmoddi4+0x2e>
 8000b2a:	f1c2 0720 	rsb	r7, r2, #32
 8000b2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b32:	fa20 f707 	lsr.w	r7, r0, r7
 8000b36:	4095      	lsls	r5, r2
 8000b38:	ea47 0803 	orr.w	r8, r7, r3
 8000b3c:	4094      	lsls	r4, r2
 8000b3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b42:	0c23      	lsrs	r3, r4, #16
 8000b44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b48:	fa1f fc85 	uxth.w	ip, r5
 8000b4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b54:	fb07 f10c 	mul.w	r1, r7, ip
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x60>
 8000b5c:	18eb      	adds	r3, r5, r3
 8000b5e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b62:	f080 811b 	bcs.w	8000d9c <__udivmoddi4+0x28c>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 8118 	bls.w	8000d9c <__udivmoddi4+0x28c>
 8000b6c:	3f02      	subs	r7, #2
 8000b6e:	442b      	add	r3, r5
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b84:	45a4      	cmp	ip, r4
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x8c>
 8000b88:	192c      	adds	r4, r5, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8e:	f080 8107 	bcs.w	8000da0 <__udivmoddi4+0x290>
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	f240 8104 	bls.w	8000da0 <__udivmoddi4+0x290>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	442c      	add	r4, r5
 8000b9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ba0:	eba4 040c 	sub.w	r4, r4, ip
 8000ba4:	2700      	movs	r7, #0
 8000ba6:	b11e      	cbz	r6, 8000bb0 <__udivmoddi4+0xa0>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c6 4300 	strd	r4, r3, [r6]
 8000bb0:	4639      	mov	r1, r7
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0xbe>
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	f000 80eb 	beq.w	8000d96 <__udivmoddi4+0x286>
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bc6:	4638      	mov	r0, r7
 8000bc8:	4639      	mov	r1, r7
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	fab3 f783 	clz	r7, r3
 8000bd2:	2f00      	cmp	r7, #0
 8000bd4:	d147      	bne.n	8000c66 <__udivmoddi4+0x156>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xd0>
 8000bda:	4282      	cmp	r2, r0
 8000bdc:	f200 80fa 	bhi.w	8000dd4 <__udivmoddi4+0x2c4>
 8000be0:	1a84      	subs	r4, r0, r2
 8000be2:	eb61 0303 	sbc.w	r3, r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	4698      	mov	r8, r3
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	d0e0      	beq.n	8000bb0 <__udivmoddi4+0xa0>
 8000bee:	e9c6 4800 	strd	r4, r8, [r6]
 8000bf2:	e7dd      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000bf4:	b902      	cbnz	r2, 8000bf8 <__udivmoddi4+0xe8>
 8000bf6:	deff      	udf	#255	; 0xff
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	f040 808f 	bne.w	8000d20 <__udivmoddi4+0x210>
 8000c02:	1b49      	subs	r1, r1, r5
 8000c04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c08:	fa1f f885 	uxth.w	r8, r5
 8000c0c:	2701      	movs	r7, #1
 8000c0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c12:	0c23      	lsrs	r3, r4, #16
 8000c14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d907      	bls.n	8000c34 <__udivmoddi4+0x124>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x122>
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	f200 80cd 	bhi.w	8000dcc <__udivmoddi4+0x2bc>
 8000c32:	4684      	mov	ip, r0
 8000c34:	1a59      	subs	r1, r3, r1
 8000c36:	b2a3      	uxth	r3, r4
 8000c38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c44:	fb08 f800 	mul.w	r8, r8, r0
 8000c48:	45a0      	cmp	r8, r4
 8000c4a:	d907      	bls.n	8000c5c <__udivmoddi4+0x14c>
 8000c4c:	192c      	adds	r4, r5, r4
 8000c4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0x14a>
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	f200 80b6 	bhi.w	8000dc6 <__udivmoddi4+0x2b6>
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	eba4 0408 	sub.w	r4, r4, r8
 8000c60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c64:	e79f      	b.n	8000ba6 <__udivmoddi4+0x96>
 8000c66:	f1c7 0c20 	rsb	ip, r7, #32
 8000c6a:	40bb      	lsls	r3, r7
 8000c6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c74:	fa01 f407 	lsl.w	r4, r1, r7
 8000c78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c84:	4325      	orrs	r5, r4
 8000c86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c8a:	0c2c      	lsrs	r4, r5, #16
 8000c8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000c90:	fa1f fa8e 	uxth.w	sl, lr
 8000c94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c98:	fb09 f40a 	mul.w	r4, r9, sl
 8000c9c:	429c      	cmp	r4, r3
 8000c9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000ca2:	fa00 f107 	lsl.w	r1, r0, r7
 8000ca6:	d90b      	bls.n	8000cc0 <__udivmoddi4+0x1b0>
 8000ca8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cb0:	f080 8087 	bcs.w	8000dc2 <__udivmoddi4+0x2b2>
 8000cb4:	429c      	cmp	r4, r3
 8000cb6:	f240 8084 	bls.w	8000dc2 <__udivmoddi4+0x2b2>
 8000cba:	f1a9 0902 	sub.w	r9, r9, #2
 8000cbe:	4473      	add	r3, lr
 8000cc0:	1b1b      	subs	r3, r3, r4
 8000cc2:	b2ad      	uxth	r5, r5
 8000cc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000ccc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cd4:	45a2      	cmp	sl, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x1da>
 8000cd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ce0:	d26b      	bcs.n	8000dba <__udivmoddi4+0x2aa>
 8000ce2:	45a2      	cmp	sl, r4
 8000ce4:	d969      	bls.n	8000dba <__udivmoddi4+0x2aa>
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	4474      	add	r4, lr
 8000cea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cee:	fba0 8902 	umull	r8, r9, r0, r2
 8000cf2:	eba4 040a 	sub.w	r4, r4, sl
 8000cf6:	454c      	cmp	r4, r9
 8000cf8:	46c2      	mov	sl, r8
 8000cfa:	464b      	mov	r3, r9
 8000cfc:	d354      	bcc.n	8000da8 <__udivmoddi4+0x298>
 8000cfe:	d051      	beq.n	8000da4 <__udivmoddi4+0x294>
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d069      	beq.n	8000dd8 <__udivmoddi4+0x2c8>
 8000d04:	ebb1 050a 	subs.w	r5, r1, sl
 8000d08:	eb64 0403 	sbc.w	r4, r4, r3
 8000d0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d10:	40fd      	lsrs	r5, r7
 8000d12:	40fc      	lsrs	r4, r7
 8000d14:	ea4c 0505 	orr.w	r5, ip, r5
 8000d18:	e9c6 5400 	strd	r5, r4, [r6]
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	e747      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f703 	lsr.w	r7, r0, r3
 8000d28:	4095      	lsls	r5, r2
 8000d2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d36:	4338      	orrs	r0, r7
 8000d38:	0c01      	lsrs	r1, r0, #16
 8000d3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d3e:	fa1f f885 	uxth.w	r8, r5
 8000d42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4a:	fb07 f308 	mul.w	r3, r7, r8
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	fa04 f402 	lsl.w	r4, r4, r2
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x256>
 8000d56:	1869      	adds	r1, r5, r1
 8000d58:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d5c:	d22f      	bcs.n	8000dbe <__udivmoddi4+0x2ae>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d92d      	bls.n	8000dbe <__udivmoddi4+0x2ae>
 8000d62:	3f02      	subs	r7, #2
 8000d64:	4429      	add	r1, r5
 8000d66:	1acb      	subs	r3, r1, r3
 8000d68:	b281      	uxth	r1, r0
 8000d6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb00 f308 	mul.w	r3, r0, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d907      	bls.n	8000d8e <__udivmoddi4+0x27e>
 8000d7e:	1869      	adds	r1, r5, r1
 8000d80:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d84:	d217      	bcs.n	8000db6 <__udivmoddi4+0x2a6>
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d915      	bls.n	8000db6 <__udivmoddi4+0x2a6>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4429      	add	r1, r5
 8000d8e:	1ac9      	subs	r1, r1, r3
 8000d90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d94:	e73b      	b.n	8000c0e <__udivmoddi4+0xfe>
 8000d96:	4637      	mov	r7, r6
 8000d98:	4630      	mov	r0, r6
 8000d9a:	e709      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000d9c:	4607      	mov	r7, r0
 8000d9e:	e6e7      	b.n	8000b70 <__udivmoddi4+0x60>
 8000da0:	4618      	mov	r0, r3
 8000da2:	e6fb      	b.n	8000b9c <__udivmoddi4+0x8c>
 8000da4:	4541      	cmp	r1, r8
 8000da6:	d2ab      	bcs.n	8000d00 <__udivmoddi4+0x1f0>
 8000da8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dac:	eb69 020e 	sbc.w	r2, r9, lr
 8000db0:	3801      	subs	r0, #1
 8000db2:	4613      	mov	r3, r2
 8000db4:	e7a4      	b.n	8000d00 <__udivmoddi4+0x1f0>
 8000db6:	4660      	mov	r0, ip
 8000db8:	e7e9      	b.n	8000d8e <__udivmoddi4+0x27e>
 8000dba:	4618      	mov	r0, r3
 8000dbc:	e795      	b.n	8000cea <__udivmoddi4+0x1da>
 8000dbe:	4667      	mov	r7, ip
 8000dc0:	e7d1      	b.n	8000d66 <__udivmoddi4+0x256>
 8000dc2:	4681      	mov	r9, r0
 8000dc4:	e77c      	b.n	8000cc0 <__udivmoddi4+0x1b0>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	442c      	add	r4, r5
 8000dca:	e747      	b.n	8000c5c <__udivmoddi4+0x14c>
 8000dcc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd0:	442b      	add	r3, r5
 8000dd2:	e72f      	b.n	8000c34 <__udivmoddi4+0x124>
 8000dd4:	4638      	mov	r0, r7
 8000dd6:	e708      	b.n	8000bea <__udivmoddi4+0xda>
 8000dd8:	4637      	mov	r7, r6
 8000dda:	e6e9      	b.n	8000bb0 <__udivmoddi4+0xa0>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <ADSR_Initialize_Look_Up_Tables>:
--| PUBLIC FUNCTION DEFINITIONS
--|----------------------------------------------------------------------------|
*/

void ADSR_Initialize_Look_Up_Tables(void)
{
 8000de0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000de4:	b094      	sub	sp, #80	; 0x50
 8000de6:	af00      	add	r7, sp, #0
    this is the "magic" target to form a truncated rising RC curve for the
    attack curve, it is 1.3 * full scale. This mimics analog ADSRs which
    target a voltage of 1.3x the peak voltage for the attack stage. It makes
    the attack curve somewhat steeper than the decay curve.
    */
    uint64_t target = 5583457485u;
 8000de8:	a45d      	add	r4, pc, #372	; (adr r4, 8000f60 <ADSR_Initialize_Look_Up_Tables+0x180>)
 8000dea:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000dee:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

    // this was arrived at empirically, it is 0.0057 * full scale
    uint64_t squish_factor = 24481314u;
 8000df2:	a45d      	add	r4, pc, #372	; (adr r4, 8000f68 <ADSR_Initialize_Look_Up_Tables+0x188>)
 8000df4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000df8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    ADSR_ATTACK_TABLE[0u] = 0u;
 8000dfc:	4b56      	ldr	r3, [pc, #344]	; (8000f58 <ADSR_Initialize_Look_Up_Tables+0x178>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]

    for (int i = 1; i < ADSR_LOOK_UP_TABLE_TABLE_SIZE; i++)
 8000e02:	2301      	movs	r3, #1
 8000e04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e06:	e039      	b.n	8000e7c <ADSR_Initialize_Look_Up_Tables+0x9c>
    {
        const uint64_t last_val = (uint64_t)ADSR_ATTACK_TABLE[i - 1] ;
 8000e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	4a52      	ldr	r2, [pc, #328]	; (8000f58 <ADSR_Initialize_Look_Up_Tables+0x178>)
 8000e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e12:	f04f 0400 	mov.w	r4, #0
 8000e16:	e9c7 3404 	strd	r3, r4, [r7, #16]

        const uint64_t amt_above_last_val = ((target - last_val) * squish_factor) / MAX_ADSR_VALUE;
 8000e1a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000e1e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000e22:	1ac9      	subs	r1, r1, r3
 8000e24:	eb62 0204 	sbc.w	r2, r2, r4
 8000e28:	468b      	mov	fp, r1
 8000e2a:	4694      	mov	ip, r2
 8000e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e2e:	fb0c f102 	mul.w	r1, ip, r2
 8000e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e34:	fb0b f202 	mul.w	r2, fp, r2
 8000e38:	440a      	add	r2, r1
 8000e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e3c:	fba1 010b 	umull	r0, r1, r1, fp
 8000e40:	1853      	adds	r3, r2, r1
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	f7ff fe48 	bl	8000ae0 <__aeabi_uldivmod>
 8000e50:	4603      	mov	r3, r0
 8000e52:	460c      	mov	r4, r1
 8000e54:	e9c7 3402 	strd	r3, r4, [r7, #8]

        const uint64_t current_val = last_val + amt_above_last_val;
 8000e58:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000e5c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000e60:	eb13 0b01 	adds.w	fp, r3, r1
 8000e64:	eb44 0c02 	adc.w	ip, r4, r2
 8000e68:	e9c7 bc00 	strd	fp, ip, [r7]

        ADSR_ATTACK_TABLE[i] = current_val;
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	493a      	ldr	r1, [pc, #232]	; (8000f58 <ADSR_Initialize_Look_Up_Tables+0x178>)
 8000e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 1; i < ADSR_LOOK_UP_TABLE_TABLE_SIZE; i++)
 8000e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e78:	3301      	adds	r3, #1
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e7e:	2bff      	cmp	r3, #255	; 0xff
 8000e80:	d9c2      	bls.n	8000e08 <ADSR_Initialize_Look_Up_Tables+0x28>
    }

    /* fill the decay table */

    // for the decay table, the target is just full scale, to get a normal rc curve
    target = MAX_ADSR_VALUE;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e86:	f04f 0400 	mov.w	r4, #0
 8000e8a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

    // this was arrived at empirically, it is 0.03 * full scale
    squish_factor = 128849018u;
 8000e8e:	a430      	add	r4, pc, #192	; (adr r4, 8000f50 <ADSR_Initialize_Look_Up_Tables+0x170>)
 8000e90:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000e94:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    ADSR_DECAY_TABLE[0u] = 0u;
 8000e98:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <ADSR_Initialize_Look_Up_Tables+0x17c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]

    for (int i = 1; i < ADSR_LOOK_UP_TABLE_TABLE_SIZE; i++)
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ea2:	e039      	b.n	8000f18 <ADSR_Initialize_Look_Up_Tables+0x138>
    {
        const uint64_t last_val = (uint64_t)ADSR_DECAY_TABLE[i - 1] ;
 8000ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	4a2c      	ldr	r2, [pc, #176]	; (8000f5c <ADSR_Initialize_Look_Up_Tables+0x17c>)
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	f04f 0400 	mov.w	r4, #0
 8000eb2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

        const uint64_t amt_above_last_val = ((target - last_val) * squish_factor) / MAX_ADSR_VALUE;
 8000eb6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000eba:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000ebe:	1ac9      	subs	r1, r1, r3
 8000ec0:	eb62 0204 	sbc.w	r2, r2, r4
 8000ec4:	468b      	mov	fp, r1
 8000ec6:	4694      	mov	ip, r2
 8000ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eca:	fb0c f102 	mul.w	r1, ip, r2
 8000ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ed0:	fb0b f202 	mul.w	r2, fp, r2
 8000ed4:	440a      	add	r2, r1
 8000ed6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000ed8:	fba1 010b 	umull	r0, r1, r1, fp
 8000edc:	1853      	adds	r3, r2, r1
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	f7ff fdfa 	bl	8000ae0 <__aeabi_uldivmod>
 8000eec:	4603      	mov	r3, r0
 8000eee:	460c      	mov	r4, r1
 8000ef0:	e9c7 3408 	strd	r3, r4, [r7, #32]

        const uint64_t current_val = last_val + amt_above_last_val;
 8000ef4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8000ef8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000efc:	eb13 0b01 	adds.w	fp, r3, r1
 8000f00:	eb44 0c02 	adc.w	ip, r4, r2
 8000f04:	e9c7 bc06 	strd	fp, ip, [r7, #24]

        ADSR_DECAY_TABLE[i] = current_val;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4914      	ldr	r1, [pc, #80]	; (8000f5c <ADSR_Initialize_Look_Up_Tables+0x17c>)
 8000f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 1; i < ADSR_LOOK_UP_TABLE_TABLE_SIZE; i++)
 8000f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f14:	3301      	adds	r3, #1
 8000f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f1a:	2bff      	cmp	r3, #255	; 0xff
 8000f1c:	d9c2      	bls.n	8000ea4 <ADSR_Initialize_Look_Up_Tables+0xc4>
    }

    // decay values are calculated inverted, flip them upside down so that they are correct
    for (int i = 0; i < ADSR_LOOK_UP_TABLE_TABLE_SIZE; i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	647b      	str	r3, [r7, #68]	; 0x44
 8000f22:	e00b      	b.n	8000f3c <ADSR_Initialize_Look_Up_Tables+0x15c>
    {
        ADSR_DECAY_TABLE[i] = MAX_ADSR_VALUE - ADSR_DECAY_TABLE[i];
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <ADSR_Initialize_Look_Up_Tables+0x17c>)
 8000f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	490b      	ldr	r1, [pc, #44]	; (8000f5c <ADSR_Initialize_Look_Up_Tables+0x17c>)
 8000f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < ADSR_LOOK_UP_TABLE_TABLE_SIZE; i++)
 8000f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f38:	3301      	adds	r3, #1
 8000f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8000f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f3e:	2bff      	cmp	r3, #255	; 0xff
 8000f40:	d9f0      	bls.n	8000f24 <ADSR_Initialize_Look_Up_Tables+0x144>
    }
}
 8000f42:	bf00      	nop
 8000f44:	3750      	adds	r7, #80	; 0x50
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8000f4c:	f3af 8000 	nop.w
 8000f50:	07ae147a 	.word	0x07ae147a
 8000f54:	00000000 	.word	0x00000000
 8000f58:	20000120 	.word	0x20000120
 8000f5c:	20000520 	.word	0x20000520
 8000f60:	4ccccccd 	.word	0x4ccccccd
 8000f64:	00000001 	.word	0x00000001
 8000f68:	01758e22 	.word	0x01758e22
 8000f6c:	00000000 	.word	0x00000000

08000f70 <Initialize_ADSR>:

void Initialize_ADSR(ADSR_t * p_ADSR, uint32_t sample_rate)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
    p_ADSR->state = ADSR_STATE_TYPE_AT_REST;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	701a      	strb	r2, [r3, #0]

    p_ADSR->input[ADSR_INPUT_TYPE_ATTACK_TIME_mSec]           = ADSR_DEFAULT_ATTACK_TIME_mSec;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2264      	movs	r2, #100	; 0x64
 8000f84:	605a      	str	r2, [r3, #4]
    p_ADSR->input[ADSR_INPUT_TYPE_DECAY_TIME_mSec]            = ADSR_DEFAULT_DECAY_TIME_mSec;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f8c:	609a      	str	r2, [r3, #8]
    p_ADSR->input[ADSR_INPUT_TYPE_SUSTAIN_LEVEL_percent_x_10] = ADSR_DEFAULT_SUSTAIN_LEVEL_percent_x_10;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f94:	60da      	str	r2, [r3, #12]
    p_ADSR->input[ADSR_INPUT_TYPE_RELEASE_TIME_mSec]          = ADSR_DEFAULT_RELEASE_TIME_mSec;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f9c:	611a      	str	r2, [r3, #16]

    p_ADSR->current_value = 0u;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]

    p_ADSR->phase_accumulator = 0u;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
    p_ADSR->last_accumulator_value = 0u;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	61da      	str	r2, [r3, #28]

    p_ADSR->value_when_gate_on_recieved = 0;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
    p_ADSR->value_when_gate_off_recieved = 0u;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24

    p_ADSR->sample_rate = sample_rate;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <ADSR_Tick>:

void ADSR_Tick(ADSR_t * p_ADSR)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
    if (Current_ADSR_State_Is_Tickable(p_ADSR))
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f852 	bl	8001080 <Current_ADSR_State_Is_Tickable>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d009      	beq.n	8000ff6 <ADSR_Tick+0x28>
    {
        // save the last accumulator value before updating
        p_ADSR->last_accumulator_value = p_ADSR->phase_accumulator;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	61da      	str	r2, [r3, #28]

        Calculate_Tuning_Word_And_Increment_Accumulator(p_ADSR);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f861 	bl	80010b2 <Calculate_Tuning_Word_And_Increment_Accumulator>

        Handle_State_Transitions(p_ADSR);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f8aa 	bl	800114a <Handle_State_Transitions>
    }

    Calculate_Current_ADSR_Value(p_ADSR);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f8fa 	bl	80011f0 <Calculate_Current_ADSR_Value>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <ADSR_Gate_On_Event>:

void ADSR_Gate_On_Event(ADSR_t * p_ADSR)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    if (p_ADSR->state != ADSR_STATE_TYPE_ATTACK)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00c      	beq.n	800102e <ADSR_Gate_On_Event+0x2a>
    {
        p_ADSR->value_when_gate_on_recieved = p_ADSR->current_value;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	695a      	ldr	r2, [r3, #20]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	621a      	str	r2, [r3, #32]
        p_ADSR->phase_accumulator = 0u;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
        p_ADSR->last_accumulator_value = 0u;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
        p_ADSR->state = ADSR_STATE_TYPE_ATTACK;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        /* The ADSR is already in an attack phase, ignore the gate-on message. */
    }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <ADSR_Gate_Off_Event>:

void ADSR_Gate_Off_Event(ADSR_t * p_ADSR)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
    if (p_ADSR->state == ADSR_STATE_TYPE_ATTACK ||
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <ADSR_Gate_Off_Event+0x20>
    	p_ADSR->state == ADSR_STATE_TYPE_DECAY  ||
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
    if (p_ADSR->state == ADSR_STATE_TYPE_ATTACK ||
 800104e:	2b01      	cmp	r3, #1
 8001050:	d003      	beq.n	800105a <ADSR_Gate_Off_Event+0x20>
		p_ADSR->state == ADSR_STATE_TYPE_SUSTAIN)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	781b      	ldrb	r3, [r3, #0]
    	p_ADSR->state == ADSR_STATE_TYPE_DECAY  ||
 8001056:	2b02      	cmp	r3, #2
 8001058:	d10c      	bne.n	8001074 <ADSR_Gate_Off_Event+0x3a>
    {
        p_ADSR->value_when_gate_off_recieved = p_ADSR->current_value;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	695a      	ldr	r2, [r3, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
        p_ADSR->phase_accumulator = 0u;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
        p_ADSR->last_accumulator_value = 0u;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
        p_ADSR->state = ADSR_STATE_TYPE_RELEASE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2203      	movs	r2, #3
 8001072:	701a      	strb	r2, [r3, #0]
        /*
        The ADSR is already in a release phase, or it is already at-rest,
        ignore the gate-off message.
        */
    }
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <Current_ADSR_State_Is_Tickable>:
--| PRIVATE HELPER FUNCTION DEFINITIONS
--|----------------------------------------------------------------------------|
*/

uint32_t Current_ADSR_State_Is_Tickable(ADSR_t * p_ADSR)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    const ADSR_state_t current_state = p_ADSR->state;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	73fb      	strb	r3, [r7, #15]

    return current_state == ADSR_STATE_TYPE_ATTACK ||
           current_state == ADSR_STATE_TYPE_DECAY  ||
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <Current_ADSR_State_Is_Tickable+0x20>
    return current_state == ADSR_STATE_TYPE_ATTACK ||
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d002      	beq.n	80010a0 <Current_ADSR_State_Is_Tickable+0x20>
           current_state == ADSR_STATE_TYPE_DECAY  ||
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d101      	bne.n	80010a4 <Current_ADSR_State_Is_Tickable+0x24>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <Current_ADSR_State_Is_Tickable+0x26>
 80010a4:	2300      	movs	r3, #0
           current_state == ADSR_STATE_TYPE_RELEASE;
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <Calculate_Tuning_Word_And_Increment_Accumulator>:

void Calculate_Tuning_Word_And_Increment_Accumulator(ADSR_t * p_ADSR)
{
 80010b2:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    const uint32_t period_of_current_state_in_mSec = p_ADSR->input[p_ADSR->state];
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	61fb      	str	r3, [r7, #28]

    const uint32_t mSec_per_second = 1000u;
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	61bb      	str	r3, [r7, #24]
    const uint64_t numerator = MAX_ACCUMULATOR_VALUE * mSec_per_second;
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	461d      	mov	r5, r3
 80010d4:	f04f 0600 	mov.w	r6, #0
 80010d8:	46ab      	mov	fp, r5
 80010da:	46b4      	mov	ip, r6
 80010dc:	f04f 0100 	mov.w	r1, #0
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	ea4f 72cc 	mov.w	r2, ip, lsl #31
 80010e8:	ea42 025b 	orr.w	r2, r2, fp, lsr #1
 80010ec:	ea4f 71cb 	mov.w	r1, fp, lsl #31
 80010f0:	468b      	mov	fp, r1
 80010f2:	4694      	mov	ip, r2
 80010f4:	ebbb 0b05 	subs.w	fp, fp, r5
 80010f8:	eb6c 0c06 	sbc.w	ip, ip, r6
 80010fc:	eb1b 030b 	adds.w	r3, fp, fp
 8001100:	eb4c 040c 	adc.w	r4, ip, ip
 8001104:	469b      	mov	fp, r3
 8001106:	46a4      	mov	ip, r4
 8001108:	eb1b 0305 	adds.w	r3, fp, r5
 800110c:	eb4c 0406 	adc.w	r4, ip, r6
 8001110:	e9c7 3404 	strd	r3, r4, [r7, #16]

    const uint32_t tuning_word = (numerator) / (p_ADSR->sample_rate * period_of_current_state_in_mSec);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	f04f 0400 	mov.w	r4, #0
 8001122:	461a      	mov	r2, r3
 8001124:	4623      	mov	r3, r4
 8001126:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800112a:	f7ff fcd9 	bl	8000ae0 <__aeabi_uldivmod>
 800112e:	4603      	mov	r3, r0
 8001130:	460c      	mov	r4, r1
 8001132:	60fb      	str	r3, [r7, #12]

    p_ADSR->phase_accumulator += tuning_word;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699a      	ldr	r2, [r3, #24]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	441a      	add	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	619a      	str	r2, [r3, #24]
}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

0800114a <Handle_State_Transitions>:

void Handle_State_Transitions(ADSR_t * p_ADSR)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
    // If the last accumulator value is bigger than the current one, it means that the accumulator
    // has wrapped around past zero, this means that the current phase is complete.
    const uint32_t accumulator_has_rolled_over = p_ADSR->phase_accumulator < p_ADSR->last_accumulator_value;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	699a      	ldr	r2, [r3, #24]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	429a      	cmp	r2, r3
 800115c:	bf34      	ite	cc
 800115e:	2301      	movcc	r3, #1
 8001160:	2300      	movcs	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	60fb      	str	r3, [r7, #12]

    if (accumulator_has_rolled_over)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d008      	beq.n	800117e <Handle_State_Transitions+0x34>
    {
    	// reset the accumulator and move to the next phase
        p_ADSR->phase_accumulator = 0u;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
        p_ADSR->last_accumulator_value = 0u;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
        Advance_ADSR_State(p_ADSR);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f805 	bl	8001188 <Advance_ADSR_State>
    }
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <Advance_ADSR_State>:

void Advance_ADSR_State(ADSR_t * p_ADSR)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
    switch (p_ADSR->state)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b04      	cmp	r3, #4
 8001196:	d821      	bhi.n	80011dc <Advance_ADSR_State+0x54>
 8001198:	a201      	add	r2, pc, #4	; (adr r2, 80011a0 <Advance_ADSR_State+0x18>)
 800119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119e:	bf00      	nop
 80011a0:	080011bd 	.word	0x080011bd
 80011a4:	080011c5 	.word	0x080011c5
 80011a8:	080011cd 	.word	0x080011cd
 80011ac:	080011d5 	.word	0x080011d5
 80011b0:	080011b5 	.word	0x080011b5
    {
    case ADSR_STATE_TYPE_AT_REST:
        p_ADSR->state = ADSR_STATE_TYPE_ATTACK;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
        break;
 80011ba:	e013      	b.n	80011e4 <Advance_ADSR_State+0x5c>

    case ADSR_STATE_TYPE_ATTACK:
        p_ADSR->state = ADSR_STATE_TYPE_DECAY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
        break;
 80011c2:	e00f      	b.n	80011e4 <Advance_ADSR_State+0x5c>

    case ADSR_STATE_TYPE_DECAY:
        p_ADSR->state = ADSR_STATE_TYPE_SUSTAIN;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2202      	movs	r2, #2
 80011c8:	701a      	strb	r2, [r3, #0]
        break;
 80011ca:	e00b      	b.n	80011e4 <Advance_ADSR_State+0x5c>

    case ADSR_STATE_TYPE_SUSTAIN:
        p_ADSR->state = ADSR_STATE_TYPE_RELEASE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2203      	movs	r2, #3
 80011d0:	701a      	strb	r2, [r3, #0]
        break;
 80011d2:	e007      	b.n	80011e4 <Advance_ADSR_State+0x5c>

    case ADSR_STATE_TYPE_RELEASE:
        p_ADSR->state = ADSR_STATE_TYPE_AT_REST;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2204      	movs	r2, #4
 80011d8:	701a      	strb	r2, [r3, #0]
        break;
 80011da:	e003      	b.n	80011e4 <Advance_ADSR_State+0x5c>

    default:
        p_ADSR->state = ADSR_STATE_TYPE_AT_REST;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2204      	movs	r2, #4
 80011e0:	701a      	strb	r2, [r3, #0]
        break;
 80011e2:	bf00      	nop
    }
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <Calculate_Current_ADSR_Value>:

void Calculate_Current_ADSR_Value(ADSR_t * p_ADSR)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b091      	sub	sp, #68	; 0x44
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    between the two points in the LUT.
    */
    uint32_t y1;
    uint32_t y2;

    const uint32_t LUT_index = p_ADSR->phase_accumulator >> NUM_FRACTIONAL_BITS_IN_ACCUMULATOR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	0e1b      	lsrs	r3, r3, #24
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t next_LUT_index = (LUT_index + 1) < ADSR_LOOK_UP_TABLE_TABLE_SIZE ? (LUT_index + 1) : (ADSR_LOOK_UP_TABLE_TABLE_SIZE - 1);
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	3301      	adds	r3, #1
 8001204:	2bff      	cmp	r3, #255	; 0xff
 8001206:	bf28      	it	cs
 8001208:	23ff      	movcs	r3, #255	; 0xff
 800120a:	623b      	str	r3, [r7, #32]
    const uint32_t accumulator_fraction = p_ADSR->phase_accumulator & ACCUMULATOR_FRACTION_MASK;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001214:	61fb      	str	r3, [r7, #28]

    switch (p_ADSR->state)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b04      	cmp	r3, #4
 800121c:	f200 80a2 	bhi.w	8001364 <Calculate_Current_ADSR_Value+0x174>
 8001220:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <Calculate_Current_ADSR_Value+0x38>)
 8001222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001226:	bf00      	nop
 8001228:	0800123d 	.word	0x0800123d
 800122c:	08001281 	.word	0x08001281
 8001230:	080012d1 	.word	0x080012d1
 8001234:	080012fd 	.word	0x080012fd
 8001238:	0800133f 	.word	0x0800133f
    {
    case ADSR_STATE_TYPE_ATTACK:
        y1 = ADSR_ATTACK_TABLE[LUT_index];
 800123c:	4a64      	ldr	r2, [pc, #400]	; (80013d0 <Calculate_Current_ADSR_Value+0x1e0>)
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001244:	61bb      	str	r3, [r7, #24]
        y2 = ADSR_ATTACK_TABLE[next_LUT_index];
 8001246:	4a62      	ldr	r2, [pc, #392]	; (80013d0 <Calculate_Current_ADSR_Value+0x1e0>)
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	617b      	str	r3, [r7, #20]

        coefficient = MAX_ADSR_VALUE - p_ADSR->value_when_gate_on_recieved;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	43db      	mvns	r3, r3
 8001256:	f04f 0400 	mov.w	r4, #0
 800125a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
        sample      = Linear_Interpolation(y1, y2, accumulator_fraction);
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	6979      	ldr	r1, [r7, #20]
 8001262:	69b8      	ldr	r0, [r7, #24]
 8001264:	f000 f8ba 	bl	80013dc <Linear_Interpolation>
 8001268:	4603      	mov	r3, r0
 800126a:	f04f 0400 	mov.w	r4, #0
 800126e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        offset      = p_ADSR->value_when_gate_on_recieved;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	f04f 0400 	mov.w	r4, #0
 800127a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        break;
 800127e:	e084      	b.n	800138a <Calculate_Current_ADSR_Value+0x19a>

    case ADSR_STATE_TYPE_DECAY:
        y1 = ADSR_DECAY_TABLE[LUT_index];
 8001280:	4a54      	ldr	r2, [pc, #336]	; (80013d4 <Calculate_Current_ADSR_Value+0x1e4>)
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001288:	61bb      	str	r3, [r7, #24]
        y2 = ADSR_DECAY_TABLE[next_LUT_index];
 800128a:	4a52      	ldr	r2, [pc, #328]	; (80013d4 <Calculate_Current_ADSR_Value+0x1e4>)
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	617b      	str	r3, [r7, #20]

        coefficient = MAX_ADSR_VALUE - (p_ADSR->input[ADSR_INPUT_TYPE_SUSTAIN_LEVEL_percent_x_10] * SUSTAIN_SCALER);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <Calculate_Current_ADSR_Value+0x1e8>)
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	f04f 0400 	mov.w	r4, #0
 80012a4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
        sample      = Linear_Interpolation(y1, y2, accumulator_fraction);
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	6979      	ldr	r1, [r7, #20]
 80012ac:	69b8      	ldr	r0, [r7, #24]
 80012ae:	f000 f895 	bl	80013dc <Linear_Interpolation>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f04f 0400 	mov.w	r4, #0
 80012b8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        offset      = p_ADSR->input[ADSR_INPUT_TYPE_SUSTAIN_LEVEL_percent_x_10] * SUSTAIN_SCALER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4a45      	ldr	r2, [pc, #276]	; (80013d8 <Calculate_Current_ADSR_Value+0x1e8>)
 80012c2:	fb02 f303 	mul.w	r3, r2, r3
 80012c6:	f04f 0400 	mov.w	r4, #0
 80012ca:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        break;
 80012ce:	e05c      	b.n	800138a <Calculate_Current_ADSR_Value+0x19a>

    case ADSR_STATE_TYPE_SUSTAIN:
        coefficient = MAX_ADSR_VALUE;
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012d4:	f04f 0400 	mov.w	r4, #0
 80012d8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
        sample      = p_ADSR->input[ADSR_INPUT_TYPE_SUSTAIN_LEVEL_percent_x_10] * SUSTAIN_SCALER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4a3d      	ldr	r2, [pc, #244]	; (80013d8 <Calculate_Current_ADSR_Value+0x1e8>)
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	f04f 0400 	mov.w	r4, #0
 80012ea:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        offset      = 0u;
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	f04f 0400 	mov.w	r4, #0
 80012f6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        break;
 80012fa:	e046      	b.n	800138a <Calculate_Current_ADSR_Value+0x19a>

    case ADSR_STATE_TYPE_RELEASE:
        y1 = ADSR_DECAY_TABLE[LUT_index];
 80012fc:	4a35      	ldr	r2, [pc, #212]	; (80013d4 <Calculate_Current_ADSR_Value+0x1e4>)
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001304:	61bb      	str	r3, [r7, #24]
        y2 = ADSR_DECAY_TABLE[next_LUT_index];
 8001306:	4a33      	ldr	r2, [pc, #204]	; (80013d4 <Calculate_Current_ADSR_Value+0x1e4>)
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130e:	617b      	str	r3, [r7, #20]

        coefficient = p_ADSR->value_when_gate_off_recieved;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	f04f 0400 	mov.w	r4, #0
 8001318:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
        sample      = Linear_Interpolation(y1, y2, accumulator_fraction);
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	6979      	ldr	r1, [r7, #20]
 8001320:	69b8      	ldr	r0, [r7, #24]
 8001322:	f000 f85b 	bl	80013dc <Linear_Interpolation>
 8001326:	4603      	mov	r3, r0
 8001328:	f04f 0400 	mov.w	r4, #0
 800132c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        offset      = 0u;
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	f04f 0400 	mov.w	r4, #0
 8001338:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        break;
 800133c:	e025      	b.n	800138a <Calculate_Current_ADSR_Value+0x19a>

    case ADSR_STATE_TYPE_AT_REST:
        coefficient = 0u;
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	f04f 0400 	mov.w	r4, #0
 8001346:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
        sample      = 0u;
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	f04f 0400 	mov.w	r4, #0
 8001352:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        offset      = 0u;
 8001356:	f04f 0300 	mov.w	r3, #0
 800135a:	f04f 0400 	mov.w	r4, #0
 800135e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        break;
 8001362:	e012      	b.n	800138a <Calculate_Current_ADSR_Value+0x19a>

    default:
        coefficient = 0u;
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	f04f 0400 	mov.w	r4, #0
 800136c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
        sample      = 0u;
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	f04f 0400 	mov.w	r4, #0
 8001378:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        offset      = 0u;
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	f04f 0400 	mov.w	r4, #0
 8001384:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        break;
 8001388:	bf00      	nop
    }

    const uint64_t scaled_sample = (coefficient * sample) / MAX_ADSR_VALUE;
 800138a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800138c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800138e:	fb02 f203 	mul.w	r2, r2, r3
 8001392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001394:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	4413      	add	r3, r2
 800139c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800139e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013a0:	fba1 0102 	umull	r0, r1, r1, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	4619      	mov	r1, r3
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	f7ff fb96 	bl	8000ae0 <__aeabi_uldivmod>
 80013b4:	4603      	mov	r3, r0
 80013b6:	460c      	mov	r4, r1
 80013b8:	e9c7 3402 	strd	r3, r4, [r7, #8]
    p_ADSR->current_value = scaled_sample + offset;
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c0:	441a      	add	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	615a      	str	r2, [r3, #20]
}
 80013c6:	bf00      	nop
 80013c8:	3744      	adds	r7, #68	; 0x44
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd90      	pop	{r4, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000120 	.word	0x20000120
 80013d4:	20000520 	.word	0x20000520
 80013d8:	00418937 	.word	0x00418937

080013dc <Linear_Interpolation>:

uint32_t Linear_Interpolation(uint32_t y1, uint32_t y2, uint32_t fraction)
{
 80013dc:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80013e0:	b089      	sub	sp, #36	; 0x24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
    const int64_t delta_y = (int64_t)y2 - y1;
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	469b      	mov	fp, r3
 80013f6:	f04f 0c00 	mov.w	ip, #0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4614      	mov	r4, r2
 80013fe:	ebb3 030b 	subs.w	r3, r3, fp
 8001402:	eb64 040c 	sbc.w	r4, r4, ip
 8001406:	e9c7 3406 	strd	r3, r4, [r7, #24]

    const int64_t fractional_part = (fraction * delta_y) / (16777216);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f04f 0400 	mov.w	r4, #0
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	fb04 f102 	mul.w	r1, r4, r2
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	fb03 f202 	mul.w	r2, r3, r2
 800141c:	440a      	add	r2, r1
 800141e:	69b9      	ldr	r1, [r7, #24]
 8001420:	fba1 3403 	umull	r3, r4, r1, r3
 8001424:	4422      	add	r2, r4
 8001426:	4614      	mov	r4, r2
 8001428:	2b00      	cmp	r3, #0
 800142a:	f174 0200 	sbcs.w	r2, r4, #0
 800142e:	da06      	bge.n	800143e <Linear_Interpolation+0x62>
 8001430:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	185b      	adds	r3, r3, r1
 800143a:	eb44 0402 	adc.w	r4, r4, r2
 800143e:	f04f 0100 	mov.w	r1, #0
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	0e19      	lsrs	r1, r3, #24
 8001448:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 800144c:	1622      	asrs	r2, r4, #24
 800144e:	e9c7 1204 	strd	r1, r2, [r7, #16]

    return y1 + fractional_part;
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
}
 8001458:	4618      	mov	r0, r3
 800145a:	3724      	adds	r7, #36	; 0x24
 800145c:	46bd      	mov	sp, r7
 800145e:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001462:	4770      	bx	lr

08001464 <Poll_Discrete_Input>:
--| PUBLIC FUNCTION DEFINITIONS
--|----------------------------------------------------------------------------|
*/

void Poll_Discrete_Input(Discrete_Input_t * p_discrete)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	// determine whether the discrete input is active-high or active-low
	const GPIO_PinState ACTIVE_LEVEL = p_discrete->polarity == DISCRETE_INPUT_POLARITY_ACTIVE_HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	79db      	ldrb	r3, [r3, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf0c      	ite	eq
 8001474:	2301      	moveq	r3, #1
 8001476:	2300      	movne	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	73fb      	strb	r3, [r7, #15]

	// get the state of the pin
	const GPIO_PinState pin_state = HAL_GPIO_ReadPin(p_discrete->GPIO_port, p_discrete->GPIO_pin);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	889b      	ldrh	r3, [r3, #4]
 8001484:	4619      	mov	r1, r3
 8001486:	4610      	mov	r0, r2
 8001488:	f002 fb22 	bl	8003ad0 <HAL_GPIO_ReadPin>
 800148c:	4603      	mov	r3, r0
 800148e:	73bb      	strb	r3, [r7, #14]

	// use the high and low counts for debouncing, and to detect long presses
	if (pin_state == ACTIVE_LEVEL)
 8001490:	7bba      	ldrb	r2, [r7, #14]
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	429a      	cmp	r2, r3
 8001496:	d108      	bne.n	80014aa <Poll_Discrete_Input+0x46>
	{
		p_discrete->high_count++;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	611a      	str	r2, [r3, #16]
		p_discrete->low_count = 0;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	e007      	b.n	80014ba <Poll_Discrete_Input+0x56>
	}
	else
	{
		p_discrete->low_count++;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	615a      	str	r2, [r3, #20]
		p_discrete->high_count = 0;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
	}

	if (p_discrete->high_count == p_discrete->debounce_count)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691a      	ldr	r2, [r3, #16]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d103      	bne.n	80014ce <Poll_Discrete_Input+0x6a>
	{
		p_discrete->state = DISCRETE_INPUT_STATE_RISING_EDGE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		p_discrete->state = DISCRETE_INPUT_STATE_LOW;
	}
}
 80014cc:	e034      	b.n	8001538 <Poll_Discrete_Input+0xd4>
	else if (p_discrete->low_count == p_discrete->debounce_count)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d103      	bne.n	80014e2 <Poll_Discrete_Input+0x7e>
		p_discrete->state = DISCRETE_INPUT_STATE_FALLING_EDGE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	719a      	strb	r2, [r3, #6]
}
 80014e0:	e02a      	b.n	8001538 <Poll_Discrete_Input+0xd4>
	else if (p_discrete->high_count > p_discrete->long_press_count)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691a      	ldr	r2, [r3, #16]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d903      	bls.n	80014f6 <Poll_Discrete_Input+0x92>
		p_discrete->state = DISCRETE_INPUT_STATE_LONG_HIGH;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2205      	movs	r2, #5
 80014f2:	719a      	strb	r2, [r3, #6]
}
 80014f4:	e020      	b.n	8001538 <Poll_Discrete_Input+0xd4>
	else if (p_discrete->low_count > p_discrete->long_press_count)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d903      	bls.n	800150a <Poll_Discrete_Input+0xa6>
		p_discrete->state = DISCRETE_INPUT_STATE_LONG_LOW;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2204      	movs	r2, #4
 8001506:	719a      	strb	r2, [r3, #6]
}
 8001508:	e016      	b.n	8001538 <Poll_Discrete_Input+0xd4>
	else if (p_discrete->high_count > p_discrete->debounce_count)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691a      	ldr	r2, [r3, #16]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	429a      	cmp	r2, r3
 8001514:	d903      	bls.n	800151e <Poll_Discrete_Input+0xba>
		p_discrete->state = DISCRETE_INPUT_STATE_HIGH;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2203      	movs	r2, #3
 800151a:	719a      	strb	r2, [r3, #6]
}
 800151c:	e00c      	b.n	8001538 <Poll_Discrete_Input+0xd4>
	else if (p_discrete->low_count > p_discrete->debounce_count)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695a      	ldr	r2, [r3, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	429a      	cmp	r2, r3
 8001528:	d903      	bls.n	8001532 <Poll_Discrete_Input+0xce>
		p_discrete->state = DISCRETE_INPUT_STATE_LOW;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2202      	movs	r2, #2
 800152e:	719a      	strb	r2, [r3, #6]
}
 8001530:	e002      	b.n	8001538 <Poll_Discrete_Input+0xd4>
		p_discrete->state = DISCRETE_INPUT_STATE_LOW;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2202      	movs	r2, #2
 8001536:	719a      	strb	r2, [r3, #6]
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001546:	463b      	mov	r3, r7
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001552:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <MX_ADC1_Init+0x160>)
 8001554:	4a53      	ldr	r2, [pc, #332]	; (80016a4 <MX_ADC1_Init+0x164>)
 8001556:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001558:	4b51      	ldr	r3, [pc, #324]	; (80016a0 <MX_ADC1_Init+0x160>)
 800155a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800155e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001560:	4b4f      	ldr	r3, [pc, #316]	; (80016a0 <MX_ADC1_Init+0x160>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001566:	4b4e      	ldr	r3, [pc, #312]	; (80016a0 <MX_ADC1_Init+0x160>)
 8001568:	2201      	movs	r2, #1
 800156a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800156c:	4b4c      	ldr	r3, [pc, #304]	; (80016a0 <MX_ADC1_Init+0x160>)
 800156e:	2200      	movs	r2, #0
 8001570:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001572:	4b4b      	ldr	r3, [pc, #300]	; (80016a0 <MX_ADC1_Init+0x160>)
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800157a:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <MX_ADC1_Init+0x160>)
 800157c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001580:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001582:	4b47      	ldr	r3, [pc, #284]	; (80016a0 <MX_ADC1_Init+0x160>)
 8001584:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800158a:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <MX_ADC1_Init+0x160>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001590:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <MX_ADC1_Init+0x160>)
 8001592:	2208      	movs	r2, #8
 8001594:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001596:	4b42      	ldr	r3, [pc, #264]	; (80016a0 <MX_ADC1_Init+0x160>)
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800159e:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <MX_ADC1_Init+0x160>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a4:	483e      	ldr	r0, [pc, #248]	; (80016a0 <MX_ADC1_Init+0x160>)
 80015a6:	f000 ff85 	bl	80024b4 <HAL_ADC_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80015b0:	f000 fd52 	bl	8002058 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	4836      	ldr	r0, [pc, #216]	; (80016a0 <MX_ADC1_Init+0x160>)
 80015c6:	f001 f8c9 	bl	800275c <HAL_ADC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80015d0:	f000 fd42 	bl	8002058 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015d8:	2302      	movs	r3, #2
 80015da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	482f      	ldr	r0, [pc, #188]	; (80016a0 <MX_ADC1_Init+0x160>)
 80015e2:	f001 f8bb 	bl	800275c <HAL_ADC_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80015ec:	f000 fd34 	bl	8002058 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80015f4:	2303      	movs	r3, #3
 80015f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	4828      	ldr	r0, [pc, #160]	; (80016a0 <MX_ADC1_Init+0x160>)
 80015fe:	f001 f8ad 	bl	800275c <HAL_ADC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001608:	f000 fd26 	bl	8002058 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800160c:	2306      	movs	r3, #6
 800160e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001610:	2304      	movs	r3, #4
 8001612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <MX_ADC1_Init+0x160>)
 800161a:	f001 f89f 	bl	800275c <HAL_ADC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001624:	f000 fd18 	bl	8002058 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001628:	2303      	movs	r3, #3
 800162a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800162c:	2305      	movs	r3, #5
 800162e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	481a      	ldr	r0, [pc, #104]	; (80016a0 <MX_ADC1_Init+0x160>)
 8001636:	f001 f891 	bl	800275c <HAL_ADC_ConfigChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8001640:	f000 fd0a 	bl	8002058 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001644:	2307      	movs	r3, #7
 8001646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001648:	2306      	movs	r3, #6
 800164a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	4619      	mov	r1, r3
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <MX_ADC1_Init+0x160>)
 8001652:	f001 f883 	bl	800275c <HAL_ADC_ConfigChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 800165c:	f000 fcfc 	bl	8002058 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001660:	2308      	movs	r3, #8
 8001662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001664:	2307      	movs	r3, #7
 8001666:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_ADC1_Init+0x160>)
 800166e:	f001 f875 	bl	800275c <HAL_ADC_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8001678:	f000 fcee 	bl	8002058 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800167c:	2309      	movs	r3, #9
 800167e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001680:	2308      	movs	r3, #8
 8001682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_ADC1_Init+0x160>)
 800168a:	f001 f867 	bl	800275c <HAL_ADC_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8001694:	f000 fce0 	bl	8002058 <Error_Handler>
  }

}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000920 	.word	0x20000920
 80016a4:	40012000 	.word	0x40012000

080016a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a3c      	ldr	r2, [pc, #240]	; (80017b8 <HAL_ADC_MspInit+0x110>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d171      	bne.n	80017ae <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <HAL_ADC_MspInit+0x114>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a3a      	ldr	r2, [pc, #232]	; (80017bc <HAL_ADC_MspInit+0x114>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b38      	ldr	r3, [pc, #224]	; (80017bc <HAL_ADC_MspInit+0x114>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_ADC_MspInit+0x114>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a33      	ldr	r2, [pc, #204]	; (80017bc <HAL_ADC_MspInit+0x114>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_ADC_MspInit+0x114>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_ADC_MspInit+0x114>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a2c      	ldr	r2, [pc, #176]	; (80017bc <HAL_ADC_MspInit+0x114>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_ADC_MspInit+0x114>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = ATTACK_1_Pin|SUSTAIN_1_Pin|DECAY_1_Pin|ATTACK_2_Pin 
 800171e:	23cf      	movs	r3, #207	; 0xcf
 8001720:	617b      	str	r3, [r7, #20]
                          |RELEASE_1_Pin|DECAY_2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001722:	2303      	movs	r3, #3
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4823      	ldr	r0, [pc, #140]	; (80017c0 <HAL_ADC_MspInit+0x118>)
 8001732:	f002 f833 	bl	800379c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSTAIN_2_Pin|RELEASE_2_Pin;
 8001736:	2303      	movs	r3, #3
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173a:	2303      	movs	r3, #3
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	481e      	ldr	r0, [pc, #120]	; (80017c4 <HAL_ADC_MspInit+0x11c>)
 800174a:	f002 f827 	bl	800379c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <HAL_ADC_MspInit+0x120>)
 8001750:	4a1e      	ldr	r2, [pc, #120]	; (80017cc <HAL_ADC_MspInit+0x124>)
 8001752:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_ADC_MspInit+0x120>)
 8001756:	2200      	movs	r2, #0
 8001758:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_ADC_MspInit+0x120>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_ADC_MspInit+0x120>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_ADC_MspInit+0x120>)
 8001768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_ADC_MspInit+0x120>)
 8001770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001774:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_ADC_MspInit+0x120>)
 8001778:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800177c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_ADC_MspInit+0x120>)
 8001780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001784:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_ADC_MspInit+0x120>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_ADC_MspInit+0x120>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001792:	480d      	ldr	r0, [pc, #52]	; (80017c8 <HAL_ADC_MspInit+0x120>)
 8001794:	f001 fc94 	bl	80030c0 <HAL_DMA_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800179e:	f000 fc5b 	bl	8002058 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a08      	ldr	r2, [pc, #32]	; (80017c8 <HAL_ADC_MspInit+0x120>)
 80017a6:	639a      	str	r2, [r3, #56]	; 0x38
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <HAL_ADC_MspInit+0x120>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	; 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40012000 	.word	0x40012000
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	20000968 	.word	0x20000968
 80017cc:	40026410 	.word	0x40026410

080017d0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80017d6:	463b      	mov	r3, r7
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_DAC_Init+0x60>)
 80017e0:	4a14      	ldr	r2, [pc, #80]	; (8001834 <MX_DAC_Init+0x64>)
 80017e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80017e4:	4812      	ldr	r0, [pc, #72]	; (8001830 <MX_DAC_Init+0x60>)
 80017e6:	f001 fb71 	bl	8002ecc <HAL_DAC_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80017f0:	f000 fc32 	bl	8002058 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	4619      	mov	r1, r3
 8001802:	480b      	ldr	r0, [pc, #44]	; (8001830 <MX_DAC_Init+0x60>)
 8001804:	f001 fbea 	bl	8002fdc <HAL_DAC_ConfigChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800180e:	f000 fc23 	bl	8002058 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001812:	463b      	mov	r3, r7
 8001814:	2210      	movs	r2, #16
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_DAC_Init+0x60>)
 800181a:	f001 fbdf 	bl	8002fdc <HAL_DAC_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001824:	f000 fc18 	bl	8002058 <Error_Handler>
  }

}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200009c8 	.word	0x200009c8
 8001834:	40007400 	.word	0x40007400

08001838 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <HAL_DAC_MspInit+0x7c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d127      	bne.n	80018aa <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <HAL_DAC_MspInit+0x80>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a15      	ldr	r2, [pc, #84]	; (80018b8 <HAL_DAC_MspInit+0x80>)
 8001864:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HAL_DAC_MspInit+0x80>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_DAC_MspInit+0x80>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_DAC_MspInit+0x80>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_DAC_MspInit+0x80>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = RAW_ADSR_1_Pin|RAW_ADSR_2_Pin;
 8001892:	2330      	movs	r3, #48	; 0x30
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001896:	2303      	movs	r3, #3
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <HAL_DAC_MspInit+0x84>)
 80018a6:	f001 ff79 	bl	800379c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80018aa:	bf00      	nop
 80018ac:	3728      	adds	r7, #40	; 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40007400 	.word	0x40007400
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000

080018c0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_DMA_Init+0x3c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <MX_DMA_Init+0x3c>)
 80018d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_DMA_Init+0x3c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	2038      	movs	r0, #56	; 0x38
 80018e8:	f001 fab3 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018ec:	2038      	movs	r0, #56	; 0x38
 80018ee:	f001 facc 	bl	8002e8a <HAL_NVIC_EnableIRQ>

}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800

08001900 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <MX_GPIO_Init+0xe8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a2b      	ldr	r2, [pc, #172]	; (80019e8 <MX_GPIO_Init+0xe8>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <MX_GPIO_Init+0xe8>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <MX_GPIO_Init+0xe8>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_PIN_1_Pin|DEBUG_PIN_2_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	2103      	movs	r1, #3
 800198a:	4818      	ldr	r0, [pc, #96]	; (80019ec <MX_GPIO_Init+0xec>)
 800198c:	f002 f8b8 	bl	8003b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DEBUG_PIN_1_Pin|DEBUG_PIN_2_Pin;
 8001990:	2303      	movs	r3, #3
 8001992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	2301      	movs	r3, #1
 8001996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	4811      	ldr	r0, [pc, #68]	; (80019ec <MX_GPIO_Init+0xec>)
 80019a8:	f001 fef8 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RANGE_1_Pin|RANGE_2_Pin;
 80019ac:	f640 0308 	movw	r3, #2056	; 0x808
 80019b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	480a      	ldr	r0, [pc, #40]	; (80019ec <MX_GPIO_Init+0xec>)
 80019c2:	f001 feeb 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGGER_1_Pin|TRIGGER_2_Pin|GATE_1_Pin|GATE_2_Pin;
 80019c6:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 80019ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <MX_GPIO_Init+0xf0>)
 80019dc:	f001 fede 	bl	800379c <HAL_GPIO_Init>

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020400 	.word	0x40020400

080019f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019fa:	f000 fce9 	bl	80023d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fe:	f000 f849 	bl	8001a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a02:	f7ff ff7d 	bl	8001900 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a06:	f7ff ff5b 	bl	80018c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a0a:	f7ff fd99 	bl	8001540 <MX_ADC1_Init>
  MX_DAC_Init();
 8001a0e:	f7ff fedf 	bl	80017d0 <MX_DAC_Init>
  MX_TIM7_Init();
 8001a12:	f000 fc01 	bl	8002218 <MX_TIM7_Init>
  MX_TIM2_Init();
 8001a16:	f000 fbb3 	bl	8002180 <MX_TIM2_Init>
  MX_TIM10_Init();
 8001a1a:	f000 fc31 	bl	8002280 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // fill the adsr look up tables
  ADSR_Initialize_Look_Up_Tables();
 8001a1e:	f7ff f9df 	bl	8000de0 <ADSR_Initialize_Look_Up_Tables>

  // initialize the adsrs with the default parameters and the defined sample rate
  for (int i = 0; i < NUM_ADSRs; ++i)
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	e00d      	b.n	8001a44 <main+0x50>
  {
	  Initialize_ADSR(&adsr[i], ADSR_SAMPLE_RATE_Hz);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	222c      	movs	r2, #44	; 0x2c
 8001a2c:	fb02 f303 	mul.w	r3, r2, r3
 8001a30:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <main+0x84>)
 8001a32:	4413      	add	r3, r2
 8001a34:	f242 7110 	movw	r1, #10000	; 0x2710
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fa99 	bl	8000f70 <Initialize_ADSR>
  for (int i = 0; i < NUM_ADSRs; ++i)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3301      	adds	r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	ddee      	ble.n	8001a28 <main+0x34>
  }

  // start both channels of the built-in DAC
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	480b      	ldr	r0, [pc, #44]	; (8001a7c <main+0x88>)
 8001a4e:	f001 fa5f 	bl	8002f10 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001a52:	2110      	movs	r1, #16
 8001a54:	4809      	ldr	r0, [pc, #36]	; (8001a7c <main+0x88>)
 8001a56:	f001 fa5b 	bl	8002f10 <HAL_DAC_Start>

  // start the sample-rate interrupt timers
  HAL_TIM_Base_Start_IT(&htim7);
 8001a5a:	4809      	ldr	r0, [pc, #36]	; (8001a80 <main+0x8c>)
 8001a5c:	f002 fce5 	bl	800442a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001a60:	4808      	ldr	r0, [pc, #32]	; (8001a84 <main+0x90>)
 8001a62:	f002 fce2 	bl	800442a <HAL_TIM_Base_Start_IT>

  // start the ADC DMA timer and start the ADC in DMA mode
  HAL_TIM_Base_Start(&htim2);
 8001a66:	4808      	ldr	r0, [pc, #32]	; (8001a88 <main+0x94>)
 8001a68:	f002 fcbb 	bl	80043e2 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, raw_potentiometer_reading, TOTAL_NUM_ADSR_INPUTS);
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	4907      	ldr	r1, [pc, #28]	; (8001a8c <main+0x98>)
 8001a70:	4807      	ldr	r0, [pc, #28]	; (8001a90 <main+0x9c>)
 8001a72:	f000 fd63 	bl	800253c <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <main+0x82>
 8001a78:	20000a20 	.word	0x20000a20
 8001a7c:	200009c8 	.word	0x200009c8
 8001a80:	20000af8 	.word	0x20000af8
 8001a84:	20000a78 	.word	0x20000a78
 8001a88:	20000ab8 	.word	0x20000ab8
 8001a8c:	200009e0 	.word	0x200009e0
 8001a90:	20000920 	.word	0x20000920

08001a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b094      	sub	sp, #80	; 0x50
 8001a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9a:	f107 0320 	add.w	r3, r7, #32
 8001a9e:	2230      	movs	r2, #48	; 0x30
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 f8c0 	bl	8004c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <SystemClock_Config+0xcc>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	4a27      	ldr	r2, [pc, #156]	; (8001b60 <SystemClock_Config+0xcc>)
 8001ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <SystemClock_Config+0xcc>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <SystemClock_Config+0xd0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <SystemClock_Config+0xd0>)
 8001ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <SystemClock_Config+0xd0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af0:	2301      	movs	r3, #1
 8001af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afa:	2302      	movs	r3, #2
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001afe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b04:	2308      	movs	r3, #8
 8001b06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b08:	23a8      	movs	r3, #168	; 0xa8
 8001b0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b10:	2304      	movs	r3, #4
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b14:	f107 0320 	add.w	r3, r7, #32
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 f80b 	bl	8003b34 <HAL_RCC_OscConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b24:	f000 fa98 	bl	8002058 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b28:	230f      	movs	r3, #15
 8001b2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2105      	movs	r1, #5
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 fa64 	bl	8004014 <HAL_RCC_ClockConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b52:	f000 fa81 	bl	8002058 <Error_Handler>
  }
}
 8001b56:	bf00      	nop
 8001b58:	3750      	adds	r7, #80	; 0x50
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40007000 	.word	0x40007000

08001b68 <HAL_TIM_PeriodElapsedCallback>:

	htim7 has higher priority than htim10, to keep a consistent periodic
	sample rate for the time critical stuff.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	if (htim == &htim7)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d106      	bne.n	8001b86 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		poll_gate_and_trigger_inputs();
 8001b78:	f000 f834 	bl	8001be4 <poll_gate_and_trigger_inputs>
		tick_ADSRs();
 8001b7c:	f000 f816 	bl	8001bac <tick_ADSRs>
		update_DACs();
 8001b80:	f000 fa52 	bl	8002028 <update_DACs>
	{
		poll_range_switches();
		scale_potentiometer_readings();
		update_ADSR_inputs();
	}
}
 8001b84:	e009      	b.n	8001b9a <HAL_TIM_PeriodElapsedCallback+0x32>
	else if (htim == &htim10)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d105      	bne.n	8001b9a <HAL_TIM_PeriodElapsedCallback+0x32>
		poll_range_switches();
 8001b8e:	f000 f88f 	bl	8001cb0 <poll_range_switches>
		scale_potentiometer_readings();
 8001b92:	f000 f8c1 	bl	8001d18 <scale_potentiometer_readings>
		update_ADSR_inputs();
 8001b96:	f000 fa19 	bl	8001fcc <update_ADSR_inputs>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000af8 	.word	0x20000af8
 8001ba8:	20000a78 	.word	0x20000a78

08001bac <tick_ADSRs>:

void tick_ADSRs(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ADSRs; ++i)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	e00b      	b.n	8001bd0 <tick_ADSRs+0x24>
	{
		ADSR_Tick(&adsr[i]);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	222c      	movs	r2, #44	; 0x2c
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <tick_ADSRs+0x34>)
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fa02 	bl	8000fce <ADSR_Tick>
	for (int i = 0; i < NUM_ADSRs; ++i)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	ddf0      	ble.n	8001bb8 <tick_ADSRs+0xc>
	}
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000a20 	.word	0x20000a20

08001be4 <poll_gate_and_trigger_inputs>:

void poll_gate_and_trigger_inputs(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
	// poll each trigger and gate input
	for (int i = 0; i < NUM_ADSRs; ++i)
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	e052      	b.n	8001c96 <poll_gate_and_trigger_inputs+0xb2>
	{
		Poll_Discrete_Input(&gate_input[i]);
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4a2a      	ldr	r2, [pc, #168]	; (8001ca4 <poll_gate_and_trigger_inputs+0xc0>)
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fc30 	bl	8001464 <Poll_Discrete_Input>
		Poll_Discrete_Input(&trigger_input[i]);
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4a26      	ldr	r2, [pc, #152]	; (8001ca8 <poll_gate_and_trigger_inputs+0xc4>)
 8001c10:	4413      	add	r3, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fc26 	bl	8001464 <Poll_Discrete_Input>

		// start an attack phase on rising gates or rising triggers
		if (gate_input[i].state == DISCRETE_INPUT_STATE_RISING_EDGE)
 8001c18:	4922      	ldr	r1, [pc, #136]	; (8001ca4 <poll_gate_and_trigger_inputs+0xc0>)
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	3306      	adds	r3, #6
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d108      	bne.n	8001c40 <poll_gate_and_trigger_inputs+0x5c>
		{
			ADSR_Gate_On_Event(&adsr[i]);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	222c      	movs	r2, #44	; 0x2c
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	4a1d      	ldr	r2, [pc, #116]	; (8001cac <poll_gate_and_trigger_inputs+0xc8>)
 8001c38:	4413      	add	r3, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff f9e2 	bl	8001004 <ADSR_Gate_On_Event>
		}

		if (trigger_input[i].state == DISCRETE_INPUT_STATE_RISING_EDGE)
 8001c40:	4919      	ldr	r1, [pc, #100]	; (8001ca8 <poll_gate_and_trigger_inputs+0xc4>)
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3306      	adds	r3, #6
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d108      	bne.n	8001c68 <poll_gate_and_trigger_inputs+0x84>
		{
			ADSR_Gate_On_Event(&adsr[i]);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	222c      	movs	r2, #44	; 0x2c
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	4a13      	ldr	r2, [pc, #76]	; (8001cac <poll_gate_and_trigger_inputs+0xc8>)
 8001c60:	4413      	add	r3, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f9ce 	bl	8001004 <ADSR_Gate_On_Event>
		}

		// start a release phase on falling gates
		if (gate_input[i].state == DISCRETE_INPUT_STATE_FALLING_EDGE)
 8001c68:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <poll_gate_and_trigger_inputs+0xc0>)
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	3306      	adds	r3, #6
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d108      	bne.n	8001c90 <poll_gate_and_trigger_inputs+0xac>
		{
			ADSR_Gate_Off_Event(&adsr[i]);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	222c      	movs	r2, #44	; 0x2c
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <poll_gate_and_trigger_inputs+0xc8>)
 8001c88:	4413      	add	r3, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f9d5 	bl	800103a <ADSR_Gate_Off_Event>
	for (int i = 0; i < NUM_ADSRs; ++i)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3301      	adds	r3, #1
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	dda9      	ble.n	8001bf0 <poll_gate_and_trigger_inputs+0xc>
		}
	}
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000030 	.word	0x20000030
 8001cac:	20000a20 	.word	0x20000a20

08001cb0 <poll_range_switches>:

void poll_range_switches(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ADSRs; ++i)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	e022      	b.n	8001d02 <poll_range_switches+0x52>
	{
		Poll_Discrete_Input(&range_switch[i]);
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <poll_range_switches+0x60>)
 8001cc8:	4413      	add	r3, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fbca 	bl	8001464 <Poll_Discrete_Input>

		if (range_switch[i].state == DISCRETE_INPUT_STATE_HIGH)
 8001cd0:	490f      	ldr	r1, [pc, #60]	; (8001d10 <poll_range_switches+0x60>)
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	440b      	add	r3, r1
 8001cde:	3306      	adds	r3, #6
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d105      	bne.n	8001cf2 <poll_range_switches+0x42>
		{
			adsr_range[i] = ADSR_RANGE_LONG;
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <poll_range_switches+0x64>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e004      	b.n	8001cfc <poll_range_switches+0x4c>
		}
		else
		{
			adsr_range[i] = ADSR_RANGE_SHORT;
 8001cf2:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <poll_range_switches+0x64>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_ADSRs; ++i)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	ddd9      	ble.n	8001cbc <poll_range_switches+0xc>
		}
	}
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000060 	.word	0x20000060
 8001d14:	200009dc 	.word	0x200009dc

08001d18 <scale_potentiometer_readings>:

void scale_potentiometer_readings(void)
{
 8001d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1a:	b08f      	sub	sp, #60	; 0x3c
 8001d1c:	af00      	add	r7, sp, #0
	To reduce noise, an lsb or two may be shifted away.

	This routine takes a long time to complete and could certainly be optimized.
	*/

	const double desired_max_value = 5000.0;
 8001d1e:	a4a9      	add	r4, pc, #676	; (adr r4, 8001fc4 <scale_potentiometer_readings+0x2ac>)
 8001d20:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d24:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	const uint32_t num_ADC_bits = 12;
 8001d28:	230c      	movs	r3, #12
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t num_ADC_bits_to_ignore = 2;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	623b      	str	r3, [r7, #32]
	const uint32_t num_effective_ADC_bits = num_ADC_bits - num_ADC_bits_to_ignore;
 8001d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	61fb      	str	r3, [r7, #28]
	const double ADC_full_scale = (double)(1 << num_effective_ADC_bits);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fb93 	bl	800046c <__aeabi_i2d>
 8001d46:	4603      	mov	r3, r0
 8001d48:	460c      	mov	r4, r1
 8001d4a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	const double exponent = log(desired_max_value) / log(ADC_full_scale);
 8001d4e:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001d52:	f002 ff71 	bl	8004c38 <log>
 8001d56:	ec55 4b10 	vmov	r4, r5, d0
 8001d5a:	ed97 0b04 	vldr	d0, [r7, #16]
 8001d5e:	f002 ff6b 	bl	8004c38 <log>
 8001d62:	ec53 2b10 	vmov	r2, r3, d0
 8001d66:	4620      	mov	r0, r4
 8001d68:	4629      	mov	r1, r5
 8001d6a:	f7fe fd13 	bl	8000794 <__aeabi_ddiv>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	460c      	mov	r4, r1
 8001d72:	e9c7 3402 	strd	r3, r4, [r7, #8]
	const uint32_t short_scaler = 1;
 8001d76:	2301      	movs	r3, #1
 8001d78:	607b      	str	r3, [r7, #4]
	const uint32_t long_scaler = 5;
 8001d7a:	2305      	movs	r3, #5
 8001d7c:	603b      	str	r3, [r7, #0]

	uint32_t range_scaler;

	if (adsr_range[0] == ADSR_RANGE_SHORT)
 8001d7e:	4b8e      	ldr	r3, [pc, #568]	; (8001fb8 <scale_potentiometer_readings+0x2a0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <scale_potentiometer_readings+0x74>
	{
		range_scaler = short_scaler;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	637b      	str	r3, [r7, #52]	; 0x34
 8001d8a:	e001      	b.n	8001d90 <scale_potentiometer_readings+0x78>
	}
	else // ADSR 1 is in long range mode
	{
		range_scaler = long_scaler;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
	}

	scaled_potentiometer_reading[0] = pow((raw_potentiometer_reading[0] >> num_ADC_bits_to_ignore) + 1, exponent) * range_scaler;
 8001d90:	4b8a      	ldr	r3, [pc, #552]	; (8001fbc <scale_potentiometer_readings+0x2a4>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fb55 	bl	800044c <__aeabi_ui2d>
 8001da2:	4603      	mov	r3, r0
 8001da4:	460c      	mov	r4, r1
 8001da6:	ed97 1b02 	vldr	d1, [r7, #8]
 8001daa:	ec44 3b10 	vmov	d0, r3, r4
 8001dae:	f002 ffc3 	bl	8004d38 <pow>
 8001db2:	ec56 5b10 	vmov	r5, r6, d0
 8001db6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001db8:	f7fe fb48 	bl	800044c <__aeabi_ui2d>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	460c      	mov	r4, r1
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4623      	mov	r3, r4
 8001dc4:	4628      	mov	r0, r5
 8001dc6:	4631      	mov	r1, r6
 8001dc8:	f7fe fbba 	bl	8000540 <__aeabi_dmul>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	460c      	mov	r4, r1
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	f7fe fe64 	bl	8000aa0 <__aeabi_d2uiz>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b79      	ldr	r3, [pc, #484]	; (8001fc0 <scale_potentiometer_readings+0x2a8>)
 8001ddc:	601a      	str	r2, [r3, #0]
	scaled_potentiometer_reading[1] = pow((raw_potentiometer_reading[1] >> num_ADC_bits_to_ignore) + 1, exponent) * range_scaler;
 8001dde:	4b77      	ldr	r3, [pc, #476]	; (8001fbc <scale_potentiometer_readings+0x2a4>)
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
 8001de8:	3301      	adds	r3, #1
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb2e 	bl	800044c <__aeabi_ui2d>
 8001df0:	4603      	mov	r3, r0
 8001df2:	460c      	mov	r4, r1
 8001df4:	ed97 1b02 	vldr	d1, [r7, #8]
 8001df8:	ec44 3b10 	vmov	d0, r3, r4
 8001dfc:	f002 ff9c 	bl	8004d38 <pow>
 8001e00:	ec56 5b10 	vmov	r5, r6, d0
 8001e04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e06:	f7fe fb21 	bl	800044c <__aeabi_ui2d>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	460c      	mov	r4, r1
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4623      	mov	r3, r4
 8001e12:	4628      	mov	r0, r5
 8001e14:	4631      	mov	r1, r6
 8001e16:	f7fe fb93 	bl	8000540 <__aeabi_dmul>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460c      	mov	r4, r1
 8001e1e:	4618      	mov	r0, r3
 8001e20:	4621      	mov	r1, r4
 8001e22:	f7fe fe3d 	bl	8000aa0 <__aeabi_d2uiz>
 8001e26:	4602      	mov	r2, r0
 8001e28:	4b65      	ldr	r3, [pc, #404]	; (8001fc0 <scale_potentiometer_readings+0x2a8>)
 8001e2a:	605a      	str	r2, [r3, #4]
	scaled_potentiometer_reading[2] = ((raw_potentiometer_reading[2] >> num_ADC_bits_to_ignore) * 1000) / (1 << num_effective_ADC_bits);
 8001e2c:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <scale_potentiometer_readings+0x2a4>)
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	fa22 f303 	lsr.w	r3, r2, r3
 8001e36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e3a:	fb02 f203 	mul.w	r2, r2, r3
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	4a5e      	ldr	r2, [pc, #376]	; (8001fc0 <scale_potentiometer_readings+0x2a8>)
 8001e46:	6093      	str	r3, [r2, #8]
	scaled_potentiometer_reading[3] = pow((raw_potentiometer_reading[3] >> num_ADC_bits_to_ignore) + 1, exponent) * range_scaler;
 8001e48:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <scale_potentiometer_readings+0x2a4>)
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe faf9 	bl	800044c <__aeabi_ui2d>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	460c      	mov	r4, r1
 8001e5e:	ed97 1b02 	vldr	d1, [r7, #8]
 8001e62:	ec44 3b10 	vmov	d0, r3, r4
 8001e66:	f002 ff67 	bl	8004d38 <pow>
 8001e6a:	ec56 5b10 	vmov	r5, r6, d0
 8001e6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e70:	f7fe faec 	bl	800044c <__aeabi_ui2d>
 8001e74:	4603      	mov	r3, r0
 8001e76:	460c      	mov	r4, r1
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4623      	mov	r3, r4
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	4631      	mov	r1, r6
 8001e80:	f7fe fb5e 	bl	8000540 <__aeabi_dmul>
 8001e84:	4603      	mov	r3, r0
 8001e86:	460c      	mov	r4, r1
 8001e88:	4618      	mov	r0, r3
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	f7fe fe08 	bl	8000aa0 <__aeabi_d2uiz>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b4b      	ldr	r3, [pc, #300]	; (8001fc0 <scale_potentiometer_readings+0x2a8>)
 8001e94:	60da      	str	r2, [r3, #12]

	if (adsr_range[1] == ADSR_RANGE_SHORT)
 8001e96:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <scale_potentiometer_readings+0x2a0>)
 8001e98:	785b      	ldrb	r3, [r3, #1]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d102      	bne.n	8001ea4 <scale_potentiometer_readings+0x18c>
	{
		range_scaler = short_scaler;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea2:	e001      	b.n	8001ea8 <scale_potentiometer_readings+0x190>
	}
	else // ADSR 2 is in long range mode
	{
		range_scaler = long_scaler;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
	}

	scaled_potentiometer_reading[4] = pow((raw_potentiometer_reading[4] >> num_ADC_bits_to_ignore) + 1, exponent) * range_scaler;
 8001ea8:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <scale_potentiometer_readings+0x2a4>)
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fac9 	bl	800044c <__aeabi_ui2d>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	ed97 1b02 	vldr	d1, [r7, #8]
 8001ec2:	ec44 3b10 	vmov	d0, r3, r4
 8001ec6:	f002 ff37 	bl	8004d38 <pow>
 8001eca:	ec56 5b10 	vmov	r5, r6, d0
 8001ece:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ed0:	f7fe fabc 	bl	800044c <__aeabi_ui2d>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	460c      	mov	r4, r1
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4623      	mov	r3, r4
 8001edc:	4628      	mov	r0, r5
 8001ede:	4631      	mov	r1, r6
 8001ee0:	f7fe fb2e 	bl	8000540 <__aeabi_dmul>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	460c      	mov	r4, r1
 8001ee8:	4618      	mov	r0, r3
 8001eea:	4621      	mov	r1, r4
 8001eec:	f7fe fdd8 	bl	8000aa0 <__aeabi_d2uiz>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <scale_potentiometer_readings+0x2a8>)
 8001ef4:	611a      	str	r2, [r3, #16]
	scaled_potentiometer_reading[5] = pow((raw_potentiometer_reading[5] >> num_ADC_bits_to_ignore) + 1, exponent) * range_scaler;
 8001ef6:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <scale_potentiometer_readings+0x2a4>)
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
 8001f00:	3301      	adds	r3, #1
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe faa2 	bl	800044c <__aeabi_ui2d>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	ed97 1b02 	vldr	d1, [r7, #8]
 8001f10:	ec44 3b10 	vmov	d0, r3, r4
 8001f14:	f002 ff10 	bl	8004d38 <pow>
 8001f18:	ec56 5b10 	vmov	r5, r6, d0
 8001f1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f1e:	f7fe fa95 	bl	800044c <__aeabi_ui2d>
 8001f22:	4603      	mov	r3, r0
 8001f24:	460c      	mov	r4, r1
 8001f26:	461a      	mov	r2, r3
 8001f28:	4623      	mov	r3, r4
 8001f2a:	4628      	mov	r0, r5
 8001f2c:	4631      	mov	r1, r6
 8001f2e:	f7fe fb07 	bl	8000540 <__aeabi_dmul>
 8001f32:	4603      	mov	r3, r0
 8001f34:	460c      	mov	r4, r1
 8001f36:	4618      	mov	r0, r3
 8001f38:	4621      	mov	r1, r4
 8001f3a:	f7fe fdb1 	bl	8000aa0 <__aeabi_d2uiz>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <scale_potentiometer_readings+0x2a8>)
 8001f42:	615a      	str	r2, [r3, #20]
	scaled_potentiometer_reading[6] = ((raw_potentiometer_reading[6] >> num_ADC_bits_to_ignore) * 1000) / (1 << num_effective_ADC_bits);
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <scale_potentiometer_readings+0x2a4>)
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f52:	fb02 f203 	mul.w	r2, r2, r3
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <scale_potentiometer_readings+0x2a8>)
 8001f5e:	6193      	str	r3, [r2, #24]
	scaled_potentiometer_reading[7] = pow((raw_potentiometer_reading[7] >> num_ADC_bits_to_ignore) + 1, exponent) * range_scaler;
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <scale_potentiometer_readings+0x2a4>)
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fa6d 	bl	800044c <__aeabi_ui2d>
 8001f72:	4603      	mov	r3, r0
 8001f74:	460c      	mov	r4, r1
 8001f76:	ed97 1b02 	vldr	d1, [r7, #8]
 8001f7a:	ec44 3b10 	vmov	d0, r3, r4
 8001f7e:	f002 fedb 	bl	8004d38 <pow>
 8001f82:	ec56 5b10 	vmov	r5, r6, d0
 8001f86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f88:	f7fe fa60 	bl	800044c <__aeabi_ui2d>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	460c      	mov	r4, r1
 8001f90:	461a      	mov	r2, r3
 8001f92:	4623      	mov	r3, r4
 8001f94:	4628      	mov	r0, r5
 8001f96:	4631      	mov	r1, r6
 8001f98:	f7fe fad2 	bl	8000540 <__aeabi_dmul>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	f7fe fd7c 	bl	8000aa0 <__aeabi_d2uiz>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <scale_potentiometer_readings+0x2a8>)
 8001fac:	61da      	str	r2, [r3, #28]
}
 8001fae:	bf00      	nop
 8001fb0:	373c      	adds	r7, #60	; 0x3c
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200009dc 	.word	0x200009dc
 8001fbc:	200009e0 	.word	0x200009e0
 8001fc0:	20000a00 	.word	0x20000a00
 8001fc4:	00000000 	.word	0x00000000
 8001fc8:	40b38800 	.word	0x40b38800

08001fcc <update_ADSR_inputs>:

void update_ADSR_inputs(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
	for (int i = 0; i < (NUM_ADSR_INPUT_TYPES * NUM_ADSRs); ++i)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	e01a      	b.n	800200e <update_ADSR_inputs+0x42>
	{
		if (i < NUM_ADSR_INPUT_TYPES)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	dc09      	bgt.n	8001ff2 <update_ADSR_inputs+0x26>
		{
			adsr[0].input[i] = scaled_potentiometer_reading[i];
 8001fde:	4a10      	ldr	r2, [pc, #64]	; (8002020 <update_ADSR_inputs+0x54>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fe6:	490f      	ldr	r1, [pc, #60]	; (8002024 <update_ADSR_inputs+0x58>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	e00a      	b.n	8002008 <update_ADSR_inputs+0x3c>
		}
		else
		{
			adsr[1].input[i - NUM_ADSR_INPUT_TYPES] = scaled_potentiometer_reading[i];
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3b04      	subs	r3, #4
 8001ff6:	490a      	ldr	r1, [pc, #40]	; (8002020 <update_ADSR_inputs+0x54>)
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ffe:	4909      	ldr	r1, [pc, #36]	; (8002024 <update_ADSR_inputs+0x58>)
 8002000:	330b      	adds	r3, #11
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < (NUM_ADSR_INPUT_TYPES * NUM_ADSRs); ++i)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3301      	adds	r3, #1
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b07      	cmp	r3, #7
 8002012:	dde1      	ble.n	8001fd8 <update_ADSR_inputs+0xc>
		}
	}
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	20000a00 	.word	0x20000a00
 8002024:	20000a20 	.word	0x20000a20

08002028 <update_DACs>:

void update_DACs(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	// scale the 32 bit ADSRs down to 12 bits and write them to the DACs
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, adsr[0].current_value >> 20);
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <update_DACs+0x28>)
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	0d1b      	lsrs	r3, r3, #20
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	4807      	ldr	r0, [pc, #28]	; (8002054 <update_DACs+0x2c>)
 8002038:	f001 f81d 	bl	8003076 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, adsr[1].current_value >> 20);
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <update_DACs+0x28>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	0d1b      	lsrs	r3, r3, #20
 8002042:	2200      	movs	r2, #0
 8002044:	2110      	movs	r1, #16
 8002046:	4803      	ldr	r0, [pc, #12]	; (8002054 <update_DACs+0x2c>)
 8002048:	f001 f815 	bl	8003076 <HAL_DAC_SetValue>
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000a20 	.word	0x20000a20
 8002054:	200009c8 	.word	0x200009c8

08002058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_MspInit+0x4c>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a0f      	ldr	r2, [pc, #60]	; (80020b4 <HAL_MspInit+0x4c>)
 8002078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_MspInit+0x4c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_MspInit+0x4c>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <HAL_MspInit+0x4c>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_MspInit+0x4c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800

080020b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ca:	e7fe      	b.n	80020ca <HardFault_Handler+0x4>

080020cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <MemManage_Handler+0x4>

080020d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <BusFault_Handler+0x4>

080020d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <UsageFault_Handler+0x4>

080020de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  HAL_SYSTICK_Callback();
 800210c:	f000 fed7 	bl	8002ebe <HAL_SYSTICK_Callback>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002110:	f000 f9b0 	bl	8002474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}

08002118 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800211e:	f002 f9a8 	bl	8004472 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000a78 	.word	0x20000a78

0800212c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <TIM7_IRQHandler+0x10>)
 8002132:	f002 f99e 	bl	8004472 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000af8 	.word	0x20000af8

08002140 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <DMA2_Stream0_IRQHandler+0x10>)
 8002146:	f001 f8c1 	bl	80032cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000968 	.word	0x20000968

08002154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <SystemInit+0x28>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215e:	4a07      	ldr	r2, [pc, #28]	; (800217c <SystemInit+0x28>)
 8002160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <SystemInit+0x28>)
 800216a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800216e:	609a      	str	r2, [r3, #8]
#endif
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002186:	f107 0308 	add.w	r3, r7, #8
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002194:	463b      	mov	r3, r7
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <MX_TIM2_Init+0x94>)
 800219e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <MX_TIM2_Init+0x94>)
 80021a6:	22a7      	movs	r2, #167	; 0xa7
 80021a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <MX_TIM2_Init+0x94>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <MX_TIM2_Init+0x94>)
 80021b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b8:	4b16      	ldr	r3, [pc, #88]	; (8002214 <MX_TIM2_Init+0x94>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <MX_TIM2_Init+0x94>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021c4:	4813      	ldr	r0, [pc, #76]	; (8002214 <MX_TIM2_Init+0x94>)
 80021c6:	f002 f8e1 	bl	800438c <HAL_TIM_Base_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80021d0:	f7ff ff42 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	4619      	mov	r1, r3
 80021e0:	480c      	ldr	r0, [pc, #48]	; (8002214 <MX_TIM2_Init+0x94>)
 80021e2:	f002 fa4e 	bl	8004682 <HAL_TIM_ConfigClockSource>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80021ec:	f7ff ff34 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021f0:	2320      	movs	r3, #32
 80021f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f8:	463b      	mov	r3, r7
 80021fa:	4619      	mov	r1, r3
 80021fc:	4805      	ldr	r0, [pc, #20]	; (8002214 <MX_TIM2_Init+0x94>)
 80021fe:	f002 fc59 	bl	8004ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002208:	f7ff ff26 	bl	8002058 <Error_Handler>
  }

}
 800220c:	bf00      	nop
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000ab8 	.word	0x20000ab8

08002218 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800221e:	463b      	mov	r3, r7
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <MX_TIM7_Init+0x60>)
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <MX_TIM7_Init+0x64>)
 800222a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <MX_TIM7_Init+0x60>)
 800222e:	2253      	movs	r2, #83	; 0x53
 8002230:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_TIM7_Init+0x60>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <MX_TIM7_Init+0x60>)
 800223a:	2263      	movs	r2, #99	; 0x63
 800223c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_TIM7_Init+0x60>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <MX_TIM7_Init+0x60>)
 8002246:	f002 f8a1 	bl	800438c <HAL_TIM_Base_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002250:	f7ff ff02 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800225c:	463b      	mov	r3, r7
 800225e:	4619      	mov	r1, r3
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_TIM7_Init+0x60>)
 8002262:	f002 fc27 	bl	8004ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800226c:	f7ff fef4 	bl	8002058 <Error_Handler>
  }

}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000af8 	.word	0x20000af8
 800227c:	40001400 	.word	0x40001400

08002280 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <MX_TIM10_Init+0x40>)
 8002286:	4a0f      	ldr	r2, [pc, #60]	; (80022c4 <MX_TIM10_Init+0x44>)
 8002288:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 167;
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <MX_TIM10_Init+0x40>)
 800228c:	22a7      	movs	r2, #167	; 0xa7
 800228e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <MX_TIM10_Init+0x40>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <MX_TIM10_Init+0x40>)
 8002298:	f240 32e7 	movw	r2, #999	; 0x3e7
 800229c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <MX_TIM10_Init+0x40>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <MX_TIM10_Init+0x40>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80022aa:	4805      	ldr	r0, [pc, #20]	; (80022c0 <MX_TIM10_Init+0x40>)
 80022ac:	f002 f86e 	bl	800438c <HAL_TIM_Base_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80022b6:	f7ff fecf 	bl	8002058 <Error_Handler>
  }

}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000a78 	.word	0x20000a78
 80022c4:	40014400 	.word	0x40014400

080022c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d8:	d10e      	bne.n	80022f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_TIM_Base_MspInit+0xa8>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	4a23      	ldr	r2, [pc, #140]	; (8002370 <HAL_TIM_Base_MspInit+0xa8>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ea:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_TIM_Base_MspInit+0xa8>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80022f6:	e036      	b.n	8002366 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM7)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <HAL_TIM_Base_MspInit+0xac>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d116      	bne.n	8002330 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <HAL_TIM_Base_MspInit+0xa8>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	4a19      	ldr	r2, [pc, #100]	; (8002370 <HAL_TIM_Base_MspInit+0xa8>)
 800230c:	f043 0320 	orr.w	r3, r3, #32
 8002310:	6413      	str	r3, [r2, #64]	; 0x40
 8002312:	4b17      	ldr	r3, [pc, #92]	; (8002370 <HAL_TIM_Base_MspInit+0xa8>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	2037      	movs	r0, #55	; 0x37
 8002324:	f000 fd95 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002328:	2037      	movs	r0, #55	; 0x37
 800232a:	f000 fdae 	bl	8002e8a <HAL_NVIC_EnableIRQ>
}
 800232e:	e01a      	b.n	8002366 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM10)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_TIM_Base_MspInit+0xb0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d115      	bne.n	8002366 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_TIM_Base_MspInit+0xa8>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <HAL_TIM_Base_MspInit+0xa8>)
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	6453      	str	r3, [r2, #68]	; 0x44
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_TIM_Base_MspInit+0xa8>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2101      	movs	r1, #1
 800235a:	2019      	movs	r0, #25
 800235c:	f000 fd79 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002360:	2019      	movs	r0, #25
 8002362:	f000 fd92 	bl	8002e8a <HAL_NVIC_EnableIRQ>
}
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	40001400 	.word	0x40001400
 8002378:	40014400 	.word	0x40014400

0800237c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800237c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002380:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002382:	e003      	b.n	800238c <LoopCopyDataInit>

08002384 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002386:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002388:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800238a:	3104      	adds	r1, #4

0800238c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800238c:	480b      	ldr	r0, [pc, #44]	; (80023bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002390:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002392:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002394:	d3f6      	bcc.n	8002384 <CopyDataInit>
  ldr  r2, =_sbss
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002398:	e002      	b.n	80023a0 <LoopFillZerobss>

0800239a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800239a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800239c:	f842 3b04 	str.w	r3, [r2], #4

080023a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023a4:	d3f9      	bcc.n	800239a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023a6:	f7ff fed5 	bl	8002154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023aa:	f002 fc19 	bl	8004be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ae:	f7ff fb21 	bl	80019f4 <main>
  bx  lr    
 80023b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80023b8:	080061d8 	.word	0x080061d8
  ldr  r0, =_sdata
 80023bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023c0:	20000104 	.word	0x20000104
  ldr  r2, =_sbss
 80023c4:	20000104 	.word	0x20000104
  ldr  r3, = _ebss
 80023c8:	20000b3c 	.word	0x20000b3c

080023cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC_IRQHandler>
	...

080023d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023d4:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_Init+0x40>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <HAL_Init+0x40>)
 80023da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_Init+0x40>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <HAL_Init+0x40>)
 80023e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_Init+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a07      	ldr	r2, [pc, #28]	; (8002410 <HAL_Init+0x40>)
 80023f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f8:	2003      	movs	r0, #3
 80023fa:	f000 fd1f 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023fe:	2000      	movs	r0, #0
 8002400:	f000 f808 	bl	8002414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002404:	f7ff fe30 	bl	8002068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023c00 	.word	0x40023c00

08002414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_InitTick+0x54>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_InitTick+0x58>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242a:	fbb3 f3f1 	udiv	r3, r3, r1
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fd37 	bl	8002ea6 <HAL_SYSTICK_Config>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e00e      	b.n	8002460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b0f      	cmp	r3, #15
 8002446:	d80a      	bhi.n	800245e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002448:	2200      	movs	r2, #0
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002450:	f000 fcff 	bl	8002e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002454:	4a06      	ldr	r2, [pc, #24]	; (8002470 <HAL_InitTick+0x5c>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	e000      	b.n	8002460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000090 	.word	0x20000090
 800246c:	20000098 	.word	0x20000098
 8002470:	20000094 	.word	0x20000094

08002474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_IncTick+0x20>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_IncTick+0x24>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4413      	add	r3, r2
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <HAL_IncTick+0x24>)
 8002486:	6013      	str	r3, [r2, #0]
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000098 	.word	0x20000098
 8002498:	20000b38 	.word	0x20000b38

0800249c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return uwTick;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_GetTick+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000b38 	.word	0x20000b38

080024b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e033      	b.n	8002532 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff f8e8 	bl	80016a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d118      	bne.n	8002524 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024fa:	f023 0302 	bic.w	r3, r3, #2
 80024fe:	f043 0202 	orr.w	r2, r3, #2
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fa4a 	bl	80029a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f023 0303 	bic.w	r3, r3, #3
 800251a:	f043 0201 	orr.w	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
 8002522:	e001      	b.n	8002528 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_ADC_Start_DMA+0x1e>
 8002556:	2302      	movs	r3, #2
 8002558:	e0cc      	b.n	80026f4 <HAL_ADC_Start_DMA+0x1b8>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d018      	beq.n	80025a2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002580:	4b5e      	ldr	r3, [pc, #376]	; (80026fc <HAL_ADC_Start_DMA+0x1c0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a5e      	ldr	r2, [pc, #376]	; (8002700 <HAL_ADC_Start_DMA+0x1c4>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0c9a      	lsrs	r2, r3, #18
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002594:	e002      	b.n	800259c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	3b01      	subs	r3, #1
 800259a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f9      	bne.n	8002596 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	f040 80a0 	bne.w	80026f2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f0:	d106      	bne.n	8002600 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f023 0206 	bic.w	r2, r3, #6
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	645a      	str	r2, [r3, #68]	; 0x44
 80025fe:	e002      	b.n	8002606 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <HAL_ADC_Start_DMA+0x1c8>)
 8002610:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	4a3c      	ldr	r2, [pc, #240]	; (8002708 <HAL_ADC_Start_DMA+0x1cc>)
 8002618:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	4a3b      	ldr	r2, [pc, #236]	; (800270c <HAL_ADC_Start_DMA+0x1d0>)
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	4a3a      	ldr	r2, [pc, #232]	; (8002710 <HAL_ADC_Start_DMA+0x1d4>)
 8002628:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002632:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002642:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002652:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	334c      	adds	r3, #76	; 0x4c
 800265e:	4619      	mov	r1, r3
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f000 fdda 	bl	800321c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	2b00      	cmp	r3, #0
 8002672:	d12a      	bne.n	80026ca <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a26      	ldr	r2, [pc, #152]	; (8002714 <HAL_ADC_Start_DMA+0x1d8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d015      	beq.n	80026aa <HAL_ADC_Start_DMA+0x16e>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a25      	ldr	r2, [pc, #148]	; (8002718 <HAL_ADC_Start_DMA+0x1dc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d105      	bne.n	8002694 <HAL_ADC_Start_DMA+0x158>
 8002688:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <HAL_ADC_Start_DMA+0x1c8>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a20      	ldr	r2, [pc, #128]	; (800271c <HAL_ADC_Start_DMA+0x1e0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d129      	bne.n	80026f2 <HAL_ADC_Start_DMA+0x1b6>
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_ADC_Start_DMA+0x1c8>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	2b0f      	cmp	r3, #15
 80026a8:	d823      	bhi.n	80026f2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d11c      	bne.n	80026f2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	e013      	b.n	80026f2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a11      	ldr	r2, [pc, #68]	; (8002714 <HAL_ADC_Start_DMA+0x1d8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d10e      	bne.n	80026f2 <HAL_ADC_Start_DMA+0x1b6>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d107      	bne.n	80026f2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026f0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000090 	.word	0x20000090
 8002700:	431bde83 	.word	0x431bde83
 8002704:	40012300 	.word	0x40012300
 8002708:	08002b99 	.word	0x08002b99
 800270c:	08002c53 	.word	0x08002c53
 8002710:	08002c6f 	.word	0x08002c6f
 8002714:	40012000 	.word	0x40012000
 8002718:	40012100 	.word	0x40012100
 800271c:	40012200 	.word	0x40012200

08002720 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x1c>
 8002774:	2302      	movs	r3, #2
 8002776:	e105      	b.n	8002984 <HAL_ADC_ConfigChannel+0x228>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b09      	cmp	r3, #9
 8002786:	d925      	bls.n	80027d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68d9      	ldr	r1, [r3, #12]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	3b1e      	subs	r3, #30
 800279e:	2207      	movs	r2, #7
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43da      	mvns	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	400a      	ands	r2, r1
 80027ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68d9      	ldr	r1, [r3, #12]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	4603      	mov	r3, r0
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4403      	add	r3, r0
 80027c6:	3b1e      	subs	r3, #30
 80027c8:	409a      	lsls	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	e022      	b.n	800281a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6919      	ldr	r1, [r3, #16]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	2207      	movs	r2, #7
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	400a      	ands	r2, r1
 80027f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6919      	ldr	r1, [r3, #16]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	4618      	mov	r0, r3
 800280a:	4603      	mov	r3, r0
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4403      	add	r3, r0
 8002810:	409a      	lsls	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b06      	cmp	r3, #6
 8002820:	d824      	bhi.n	800286c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b05      	subs	r3, #5
 8002834:	221f      	movs	r2, #31
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	400a      	ands	r2, r1
 8002842:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	4618      	mov	r0, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	3b05      	subs	r3, #5
 800285e:	fa00 f203 	lsl.w	r2, r0, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	635a      	str	r2, [r3, #52]	; 0x34
 800286a:	e04c      	b.n	8002906 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b0c      	cmp	r3, #12
 8002872:	d824      	bhi.n	80028be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	3b23      	subs	r3, #35	; 0x23
 8002886:	221f      	movs	r2, #31
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43da      	mvns	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	400a      	ands	r2, r1
 8002894:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	3b23      	subs	r3, #35	; 0x23
 80028b0:	fa00 f203 	lsl.w	r2, r0, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
 80028bc:	e023      	b.n	8002906 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	3b41      	subs	r3, #65	; 0x41
 80028d0:	221f      	movs	r2, #31
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	400a      	ands	r2, r1
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	4618      	mov	r0, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	3b41      	subs	r3, #65	; 0x41
 80028fa:	fa00 f203 	lsl.w	r2, r0, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002906:	4b22      	ldr	r3, [pc, #136]	; (8002990 <HAL_ADC_ConfigChannel+0x234>)
 8002908:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a21      	ldr	r2, [pc, #132]	; (8002994 <HAL_ADC_ConfigChannel+0x238>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d109      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x1cc>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b12      	cmp	r3, #18
 800291a:	d105      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <HAL_ADC_ConfigChannel+0x238>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d123      	bne.n	800297a <HAL_ADC_ConfigChannel+0x21e>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b10      	cmp	r3, #16
 8002938:	d003      	beq.n	8002942 <HAL_ADC_ConfigChannel+0x1e6>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b11      	cmp	r3, #17
 8002940:	d11b      	bne.n	800297a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b10      	cmp	r3, #16
 8002954:	d111      	bne.n	800297a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <HAL_ADC_ConfigChannel+0x23c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a10      	ldr	r2, [pc, #64]	; (800299c <HAL_ADC_ConfigChannel+0x240>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	0c9a      	lsrs	r2, r3, #18
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800296c:	e002      	b.n	8002974 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3b01      	subs	r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f9      	bne.n	800296e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	40012300 	.word	0x40012300
 8002994:	40012000 	.word	0x40012000
 8002998:	20000090 	.word	0x20000090
 800299c:	431bde83 	.word	0x431bde83

080029a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029a8:	4b79      	ldr	r3, [pc, #484]	; (8002b90 <ADC_Init+0x1f0>)
 80029aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	431a      	orrs	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	021a      	lsls	r2, r3, #8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6899      	ldr	r1, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	4a58      	ldr	r2, [pc, #352]	; (8002b94 <ADC_Init+0x1f4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d022      	beq.n	8002a7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6899      	ldr	r1, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6899      	ldr	r1, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	e00f      	b.n	8002a9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0202 	bic.w	r2, r2, #2
 8002aac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7e1b      	ldrb	r3, [r3, #24]
 8002ab8:	005a      	lsls	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01b      	beq.n	8002b04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ada:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002aea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	3b01      	subs	r3, #1
 8002af8:	035a      	lsls	r2, r3, #13
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	e007      	b.n	8002b14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	051a      	lsls	r2, r3, #20
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6899      	ldr	r1, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b56:	025a      	lsls	r2, r3, #9
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6899      	ldr	r1, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	029a      	lsls	r2, r3, #10
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40012300 	.word	0x40012300
 8002b94:	0f000001 	.word	0x0f000001

08002b98 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d13c      	bne.n	8002c2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d12b      	bne.n	8002c24 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d127      	bne.n	8002c24 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d119      	bne.n	8002c24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0220 	bic.w	r2, r2, #32
 8002bfe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff fd7b 	bl	8002720 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c2a:	e00e      	b.n	8002c4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f7ff fd85 	bl	8002748 <HAL_ADC_ErrorCallback>
}
 8002c3e:	e004      	b.n	8002c4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff fd67 	bl	8002734 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2240      	movs	r2, #64	; 0x40
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f043 0204 	orr.w	r2, r3, #4
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f7ff fd5a 	bl	8002748 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	60d3      	str	r3, [r2, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <__NVIC_GetPriorityGrouping+0x18>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	f003 0307 	and.w	r3, r3, #7
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	db0b      	blt.n	8002d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4907      	ldr	r1, [pc, #28]	; (8002d38 <__NVIC_EnableIRQ+0x38>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2001      	movs	r0, #1
 8002d22:	fa00 f202 	lsl.w	r2, r0, r2
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000e100 	.word	0xe000e100

08002d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	db0a      	blt.n	8002d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	490c      	ldr	r1, [pc, #48]	; (8002d88 <__NVIC_SetPriority+0x4c>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d64:	e00a      	b.n	8002d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4908      	ldr	r1, [pc, #32]	; (8002d8c <__NVIC_SetPriority+0x50>)
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3b04      	subs	r3, #4
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	440b      	add	r3, r1
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000e100 	.word	0xe000e100
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	; 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf28      	it	cs
 8002dae:	2304      	movcs	r3, #4
 8002db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d902      	bls.n	8002dc0 <NVIC_EncodePriority+0x30>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3b03      	subs	r3, #3
 8002dbe:	e000      	b.n	8002dc2 <NVIC_EncodePriority+0x32>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	4313      	orrs	r3, r2
         );
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e1c:	f7ff ff8e 	bl	8002d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff29 	bl	8002c9c <__NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e64:	f7ff ff3e 	bl	8002ce4 <__NVIC_GetPriorityGrouping>
 8002e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7ff ff8e 	bl	8002d90 <NVIC_EncodePriority>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff5d 	bl	8002d3c <__NVIC_SetPriority>
}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff31 	bl	8002d00 <__NVIC_EnableIRQ>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff ffa2 	bl	8002df8 <SysTick_Config>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e014      	b.n	8002f08 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	791b      	ldrb	r3, [r3, #4]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe fca2 	bl	8001838 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	795b      	ldrb	r3, [r3, #5]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_DAC_Start+0x1e>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e050      	b.n	8002fd0 <HAL_DAC_Start+0xc0>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	2201      	movs	r2, #1
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	409a      	lsls	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d11a      	bne.n	8002f8a <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f6a:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d127      	bne.n	8002fc2 <HAL_DAC_Start+0xb2>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b38      	cmp	r3, #56	; 0x38
 8002f76:	d124      	bne.n	8002fc2 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	e01b      	b.n	8002fc2 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f94:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8002fa0:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fa8:	d10b      	bne.n	8002fc2 <HAL_DAC_Start+0xb2>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002fb0:	d107      	bne.n	8002fc2 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0202 	orr.w	r2, r2, #2
 8002fc0:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	795b      	ldrb	r3, [r3, #5]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_DAC_ConfigChannel+0x20>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e036      	b.n	800306a <HAL_DAC_ConfigChannel+0x8e>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2202      	movs	r2, #2
 8003006:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003010:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4013      	ands	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	22c0      	movs	r2, #192	; 0xc0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	400a      	ands	r2, r1
 800305a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003076:	b480      	push	{r7}
 8003078:	b087      	sub	sp, #28
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	3308      	adds	r3, #8
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	e004      	b.n	80030aa <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	3314      	adds	r3, #20
 80030a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	461a      	mov	r2, r3
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030cc:	f7ff f9e6 	bl	800249c <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e099      	b.n	8003210 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0201 	bic.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030fc:	e00f      	b.n	800311e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030fe:	f7ff f9cd 	bl	800249c <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b05      	cmp	r3, #5
 800310a:	d908      	bls.n	800311e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2203      	movs	r2, #3
 8003116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e078      	b.n	8003210 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e8      	bne.n	80030fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4b38      	ldr	r3, [pc, #224]	; (8003218 <HAL_DMA_Init+0x158>)
 8003138:	4013      	ands	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800314a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003156:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003162:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	2b04      	cmp	r3, #4
 8003176:	d107      	bne.n	8003188 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	4313      	orrs	r3, r2
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f023 0307 	bic.w	r3, r3, #7
 800319e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d117      	bne.n	80031e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00e      	beq.n	80031e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fa6f 	bl	80036a8 <DMA_CheckFifoParam>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2240      	movs	r2, #64	; 0x40
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031de:	2301      	movs	r3, #1
 80031e0:	e016      	b.n	8003210 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fa26 	bl	800363c <DMA_CalcBaseAndBitshift>
 80031f0:	4603      	mov	r3, r0
 80031f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	223f      	movs	r2, #63	; 0x3f
 80031fa:	409a      	lsls	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	f010803f 	.word	0xf010803f

0800321c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_DMA_Start_IT+0x26>
 800323e:	2302      	movs	r3, #2
 8003240:	e040      	b.n	80032c4 <HAL_DMA_Start_IT+0xa8>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d12f      	bne.n	80032b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2202      	movs	r2, #2
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f9b8 	bl	80035e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003274:	223f      	movs	r2, #63	; 0x3f
 8003276:	409a      	lsls	r2, r3
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0216 	orr.w	r2, r2, #22
 800328a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0208 	orr.w	r2, r2, #8
 80032a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	e005      	b.n	80032c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032be:	2302      	movs	r3, #2
 80032c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032d8:	4b92      	ldr	r3, [pc, #584]	; (8003524 <HAL_DMA_IRQHandler+0x258>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a92      	ldr	r2, [pc, #584]	; (8003528 <HAL_DMA_IRQHandler+0x25c>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0a9b      	lsrs	r3, r3, #10
 80032e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	2208      	movs	r2, #8
 80032f8:	409a      	lsls	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01a      	beq.n	8003338 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0204 	bic.w	r2, r2, #4
 800331e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	2208      	movs	r2, #8
 8003326:	409a      	lsls	r2, r3
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003330:	f043 0201 	orr.w	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d012      	beq.n	800336e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	2201      	movs	r2, #1
 800335c:	409a      	lsls	r2, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	f043 0202 	orr.w	r2, r3, #2
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	2204      	movs	r2, #4
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d012      	beq.n	80033a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	2204      	movs	r2, #4
 8003392:	409a      	lsls	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	f043 0204 	orr.w	r2, r3, #4
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	2210      	movs	r2, #16
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d043      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d03c      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	2210      	movs	r2, #16
 80033c8:	409a      	lsls	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d018      	beq.n	800340e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d108      	bne.n	80033fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d024      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
 80033fa:	e01f      	b.n	800343c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01b      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4798      	blx	r3
 800340c:	e016      	b.n	800343c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d107      	bne.n	800342c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0208 	bic.w	r2, r2, #8
 800342a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003440:	2220      	movs	r2, #32
 8003442:	409a      	lsls	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 808e 	beq.w	800356a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8086 	beq.w	800356a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	2220      	movs	r2, #32
 8003464:	409a      	lsls	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b05      	cmp	r3, #5
 8003474:	d136      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0216 	bic.w	r2, r2, #22
 8003484:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003494:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <HAL_DMA_IRQHandler+0x1da>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0208 	bic.w	r2, r2, #8
 80034b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	223f      	movs	r2, #63	; 0x3f
 80034bc:	409a      	lsls	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d07d      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
        }
        return;
 80034e2:	e078      	b.n	80035d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01c      	beq.n	800352c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d108      	bne.n	8003512 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	2b00      	cmp	r3, #0
 8003506:	d030      	beq.n	800356a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
 8003510:	e02b      	b.n	800356a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d027      	beq.n	800356a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
 8003522:	e022      	b.n	800356a <HAL_DMA_IRQHandler+0x29e>
 8003524:	20000090 	.word	0x20000090
 8003528:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0210 	bic.w	r2, r2, #16
 8003548:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	2b00      	cmp	r3, #0
 8003570:	d032      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d022      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2205      	movs	r2, #5
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0201 	bic.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3301      	adds	r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d307      	bcc.n	80035b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f2      	bne.n	8003596 <HAL_DMA_IRQHandler+0x2ca>
 80035b0:	e000      	b.n	80035b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80035b2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
 80035d4:	e000      	b.n	80035d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80035d6:	bf00      	nop
    }
  }
}
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop

080035e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	d108      	bne.n	8003620 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800361e:	e007      	b.n	8003630 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	60da      	str	r2, [r3, #12]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	3b10      	subs	r3, #16
 800364c:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <DMA_CalcBaseAndBitshift+0x64>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003656:	4a13      	ldr	r2, [pc, #76]	; (80036a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d909      	bls.n	800367e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	1d1a      	adds	r2, r3, #4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	659a      	str	r2, [r3, #88]	; 0x58
 800367c:	e007      	b.n	800368e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	aaaaaaab 	.word	0xaaaaaaab
 80036a4:	08006178 	.word	0x08006178

080036a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d11f      	bne.n	8003702 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d855      	bhi.n	8003774 <DMA_CheckFifoParam+0xcc>
 80036c8:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <DMA_CheckFifoParam+0x28>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	080036e1 	.word	0x080036e1
 80036d4:	080036f3 	.word	0x080036f3
 80036d8:	080036e1 	.word	0x080036e1
 80036dc:	08003775 	.word	0x08003775
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d045      	beq.n	8003778 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f0:	e042      	b.n	8003778 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036fa:	d13f      	bne.n	800377c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003700:	e03c      	b.n	800377c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370a:	d121      	bne.n	8003750 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d836      	bhi.n	8003780 <DMA_CheckFifoParam+0xd8>
 8003712:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <DMA_CheckFifoParam+0x70>)
 8003714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003718:	08003729 	.word	0x08003729
 800371c:	0800372f 	.word	0x0800372f
 8003720:	08003729 	.word	0x08003729
 8003724:	08003741 	.word	0x08003741
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      break;
 800372c:	e02f      	b.n	800378e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d024      	beq.n	8003784 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373e:	e021      	b.n	8003784 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003748:	d11e      	bne.n	8003788 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800374e:	e01b      	b.n	8003788 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d902      	bls.n	800375c <DMA_CheckFifoParam+0xb4>
 8003756:	2b03      	cmp	r3, #3
 8003758:	d003      	beq.n	8003762 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800375a:	e018      	b.n	800378e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      break;
 8003760:	e015      	b.n	800378e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00e      	beq.n	800378c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
      break;
 8003772:	e00b      	b.n	800378c <DMA_CheckFifoParam+0xe4>
      break;
 8003774:	bf00      	nop
 8003776:	e00a      	b.n	800378e <DMA_CheckFifoParam+0xe6>
      break;
 8003778:	bf00      	nop
 800377a:	e008      	b.n	800378e <DMA_CheckFifoParam+0xe6>
      break;
 800377c:	bf00      	nop
 800377e:	e006      	b.n	800378e <DMA_CheckFifoParam+0xe6>
      break;
 8003780:	bf00      	nop
 8003782:	e004      	b.n	800378e <DMA_CheckFifoParam+0xe6>
      break;
 8003784:	bf00      	nop
 8003786:	e002      	b.n	800378e <DMA_CheckFifoParam+0xe6>
      break;   
 8003788:	bf00      	nop
 800378a:	e000      	b.n	800378e <DMA_CheckFifoParam+0xe6>
      break;
 800378c:	bf00      	nop
    }
  } 
  
  return status; 
 800378e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800379c:	b480      	push	{r7}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	e16b      	b.n	8003a90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037b8:	2201      	movs	r2, #1
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	f040 815a 	bne.w	8003a8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d00b      	beq.n	80037f6 <HAL_GPIO_Init+0x5a>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d007      	beq.n	80037f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037ea:	2b11      	cmp	r3, #17
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b12      	cmp	r3, #18
 80037f4:	d130      	bne.n	8003858 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	2203      	movs	r2, #3
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800382c:	2201      	movs	r2, #1
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f003 0201 	and.w	r2, r3, #1
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	2203      	movs	r2, #3
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0xfc>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b12      	cmp	r3, #18
 8003896:	d123      	bne.n	80038e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	08da      	lsrs	r2, r3, #3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3208      	adds	r2, #8
 80038a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	220f      	movs	r2, #15
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	08da      	lsrs	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3208      	adds	r2, #8
 80038da:	69b9      	ldr	r1, [r7, #24]
 80038dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	2203      	movs	r2, #3
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0203 	and.w	r2, r3, #3
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80b4 	beq.w	8003a8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	4b5f      	ldr	r3, [pc, #380]	; (8003aa4 <HAL_GPIO_Init+0x308>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	4a5e      	ldr	r2, [pc, #376]	; (8003aa4 <HAL_GPIO_Init+0x308>)
 800392c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003930:	6453      	str	r3, [r2, #68]	; 0x44
 8003932:	4b5c      	ldr	r3, [pc, #368]	; (8003aa4 <HAL_GPIO_Init+0x308>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800393e:	4a5a      	ldr	r2, [pc, #360]	; (8003aa8 <HAL_GPIO_Init+0x30c>)
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	3302      	adds	r3, #2
 8003946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	220f      	movs	r2, #15
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4013      	ands	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a51      	ldr	r2, [pc, #324]	; (8003aac <HAL_GPIO_Init+0x310>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02b      	beq.n	80039c2 <HAL_GPIO_Init+0x226>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a50      	ldr	r2, [pc, #320]	; (8003ab0 <HAL_GPIO_Init+0x314>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d025      	beq.n	80039be <HAL_GPIO_Init+0x222>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a4f      	ldr	r2, [pc, #316]	; (8003ab4 <HAL_GPIO_Init+0x318>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d01f      	beq.n	80039ba <HAL_GPIO_Init+0x21e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a4e      	ldr	r2, [pc, #312]	; (8003ab8 <HAL_GPIO_Init+0x31c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d019      	beq.n	80039b6 <HAL_GPIO_Init+0x21a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a4d      	ldr	r2, [pc, #308]	; (8003abc <HAL_GPIO_Init+0x320>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <HAL_GPIO_Init+0x216>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a4c      	ldr	r2, [pc, #304]	; (8003ac0 <HAL_GPIO_Init+0x324>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00d      	beq.n	80039ae <HAL_GPIO_Init+0x212>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a4b      	ldr	r2, [pc, #300]	; (8003ac4 <HAL_GPIO_Init+0x328>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d007      	beq.n	80039aa <HAL_GPIO_Init+0x20e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a4a      	ldr	r2, [pc, #296]	; (8003ac8 <HAL_GPIO_Init+0x32c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <HAL_GPIO_Init+0x20a>
 80039a2:	2307      	movs	r3, #7
 80039a4:	e00e      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039a6:	2308      	movs	r3, #8
 80039a8:	e00c      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039aa:	2306      	movs	r3, #6
 80039ac:	e00a      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039ae:	2305      	movs	r3, #5
 80039b0:	e008      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039b2:	2304      	movs	r3, #4
 80039b4:	e006      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039b6:	2303      	movs	r3, #3
 80039b8:	e004      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e002      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039c2:	2300      	movs	r3, #0
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	f002 0203 	and.w	r2, r2, #3
 80039ca:	0092      	lsls	r2, r2, #2
 80039cc:	4093      	lsls	r3, r2
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d4:	4934      	ldr	r1, [pc, #208]	; (8003aa8 <HAL_GPIO_Init+0x30c>)
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	089b      	lsrs	r3, r3, #2
 80039da:	3302      	adds	r3, #2
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039e2:	4b3a      	ldr	r3, [pc, #232]	; (8003acc <HAL_GPIO_Init+0x330>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a06:	4a31      	ldr	r2, [pc, #196]	; (8003acc <HAL_GPIO_Init+0x330>)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a0c:	4b2f      	ldr	r3, [pc, #188]	; (8003acc <HAL_GPIO_Init+0x330>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a30:	4a26      	ldr	r2, [pc, #152]	; (8003acc <HAL_GPIO_Init+0x330>)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a36:	4b25      	ldr	r3, [pc, #148]	; (8003acc <HAL_GPIO_Init+0x330>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4013      	ands	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a5a:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <HAL_GPIO_Init+0x330>)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <HAL_GPIO_Init+0x330>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a84:	4a11      	ldr	r2, [pc, #68]	; (8003acc <HAL_GPIO_Init+0x330>)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	61fb      	str	r3, [r7, #28]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b0f      	cmp	r3, #15
 8003a94:	f67f ae90 	bls.w	80037b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a98:	bf00      	nop
 8003a9a:	3724      	adds	r7, #36	; 0x24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	40013800 	.word	0x40013800
 8003aac:	40020000 	.word	0x40020000
 8003ab0:	40020400 	.word	0x40020400
 8003ab4:	40020800 	.word	0x40020800
 8003ab8:	40020c00 	.word	0x40020c00
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40021400 	.word	0x40021400
 8003ac4:	40021800 	.word	0x40021800
 8003ac8:	40021c00 	.word	0x40021c00
 8003acc:	40013c00 	.word	0x40013c00

08003ad0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	887b      	ldrh	r3, [r7, #2]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
 8003aec:	e001      	b.n	8003af2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	807b      	strh	r3, [r7, #2]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b10:	787b      	ldrb	r3, [r7, #1]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b16:	887a      	ldrh	r2, [r7, #2]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b1c:	e003      	b.n	8003b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b1e:	887b      	ldrh	r3, [r7, #2]
 8003b20:	041a      	lsls	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	619a      	str	r2, [r3, #24]
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e25b      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d075      	beq.n	8003c3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b52:	4ba3      	ldr	r3, [pc, #652]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d00c      	beq.n	8003b78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5e:	4ba0      	ldr	r3, [pc, #640]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d112      	bne.n	8003b90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6a:	4b9d      	ldr	r3, [pc, #628]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b76:	d10b      	bne.n	8003b90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	4b99      	ldr	r3, [pc, #612]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d05b      	beq.n	8003c3c <HAL_RCC_OscConfig+0x108>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d157      	bne.n	8003c3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e236      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d106      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x74>
 8003b9a:	4b91      	ldr	r3, [pc, #580]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a90      	ldr	r2, [pc, #576]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e01d      	b.n	8003be4 <HAL_RCC_OscConfig+0xb0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x98>
 8003bb2:	4b8b      	ldr	r3, [pc, #556]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a8a      	ldr	r2, [pc, #552]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4b88      	ldr	r3, [pc, #544]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a87      	ldr	r2, [pc, #540]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e00b      	b.n	8003be4 <HAL_RCC_OscConfig+0xb0>
 8003bcc:	4b84      	ldr	r3, [pc, #528]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a83      	ldr	r2, [pc, #524]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	4b81      	ldr	r3, [pc, #516]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a80      	ldr	r2, [pc, #512]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d013      	beq.n	8003c14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fe fc56 	bl	800249c <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fe fc52 	bl	800249c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e1fb      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c06:	4b76      	ldr	r3, [pc, #472]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0xc0>
 8003c12:	e014      	b.n	8003c3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe fc42 	bl	800249c <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1c:	f7fe fc3e 	bl	800249c <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e1e7      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2e:	4b6c      	ldr	r3, [pc, #432]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0xe8>
 8003c3a:	e000      	b.n	8003c3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d063      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c4a:	4b65      	ldr	r3, [pc, #404]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c56:	4b62      	ldr	r3, [pc, #392]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d11c      	bne.n	8003c9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c62:	4b5f      	ldr	r3, [pc, #380]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d116      	bne.n	8003c9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6e:	4b5c      	ldr	r3, [pc, #368]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_RCC_OscConfig+0x152>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d001      	beq.n	8003c86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e1bb      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c86:	4b56      	ldr	r3, [pc, #344]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4952      	ldr	r1, [pc, #328]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9a:	e03a      	b.n	8003d12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d020      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca4:	4b4f      	ldr	r3, [pc, #316]	; (8003de4 <HAL_RCC_OscConfig+0x2b0>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fe fbf7 	bl	800249c <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb2:	f7fe fbf3 	bl	800249c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e19c      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc4:	4b46      	ldr	r3, [pc, #280]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd0:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4940      	ldr	r1, [pc, #256]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]
 8003ce4:	e015      	b.n	8003d12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce6:	4b3f      	ldr	r3, [pc, #252]	; (8003de4 <HAL_RCC_OscConfig+0x2b0>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe fbd6 	bl	800249c <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf4:	f7fe fbd2 	bl	800249c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e17b      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d06:	4b36      	ldr	r3, [pc, #216]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d030      	beq.n	8003d80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d016      	beq.n	8003d54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d26:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <HAL_RCC_OscConfig+0x2b4>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7fe fbb6 	bl	800249c <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d34:	f7fe fbb2 	bl	800249c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e15b      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d46:	4b26      	ldr	r3, [pc, #152]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x200>
 8003d52:	e015      	b.n	8003d80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d54:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <HAL_RCC_OscConfig+0x2b4>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5a:	f7fe fb9f 	bl	800249c <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d62:	f7fe fb9b 	bl	800249c <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e144      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d74:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80a0 	beq.w	8003ece <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d92:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	4a0e      	ldr	r2, [pc, #56]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6413      	str	r3, [r2, #64]	; 0x40
 8003dae:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_RCC_OscConfig+0x2b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d121      	bne.n	8003e0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_RCC_OscConfig+0x2b8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a07      	ldr	r2, [pc, #28]	; (8003dec <HAL_RCC_OscConfig+0x2b8>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd6:	f7fe fb61 	bl	800249c <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	e011      	b.n	8003e02 <HAL_RCC_OscConfig+0x2ce>
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800
 8003de4:	42470000 	.word	0x42470000
 8003de8:	42470e80 	.word	0x42470e80
 8003dec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df0:	f7fe fb54 	bl	800249c <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0fd      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	4b81      	ldr	r3, [pc, #516]	; (8004008 <HAL_RCC_OscConfig+0x4d4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d106      	bne.n	8003e24 <HAL_RCC_OscConfig+0x2f0>
 8003e16:	4b7d      	ldr	r3, [pc, #500]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	4a7c      	ldr	r2, [pc, #496]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	6713      	str	r3, [r2, #112]	; 0x70
 8003e22:	e01c      	b.n	8003e5e <HAL_RCC_OscConfig+0x32a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b05      	cmp	r3, #5
 8003e2a:	d10c      	bne.n	8003e46 <HAL_RCC_OscConfig+0x312>
 8003e2c:	4b77      	ldr	r3, [pc, #476]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	4a76      	ldr	r2, [pc, #472]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e32:	f043 0304 	orr.w	r3, r3, #4
 8003e36:	6713      	str	r3, [r2, #112]	; 0x70
 8003e38:	4b74      	ldr	r3, [pc, #464]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a73      	ldr	r2, [pc, #460]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
 8003e44:	e00b      	b.n	8003e5e <HAL_RCC_OscConfig+0x32a>
 8003e46:	4b71      	ldr	r3, [pc, #452]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	4a70      	ldr	r2, [pc, #448]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	6713      	str	r3, [r2, #112]	; 0x70
 8003e52:	4b6e      	ldr	r3, [pc, #440]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a6d      	ldr	r2, [pc, #436]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e58:	f023 0304 	bic.w	r3, r3, #4
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d015      	beq.n	8003e92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e66:	f7fe fb19 	bl	800249c <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6c:	e00a      	b.n	8003e84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6e:	f7fe fb15 	bl	800249c <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e0bc      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e84:	4b61      	ldr	r3, [pc, #388]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0ee      	beq.n	8003e6e <HAL_RCC_OscConfig+0x33a>
 8003e90:	e014      	b.n	8003ebc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e92:	f7fe fb03 	bl	800249c <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fe faff 	bl	800249c <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e0a6      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb0:	4b56      	ldr	r3, [pc, #344]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1ee      	bne.n	8003e9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d105      	bne.n	8003ece <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec2:	4b52      	ldr	r3, [pc, #328]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4a51      	ldr	r2, [pc, #324]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 8092 	beq.w	8003ffc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ed8:	4b4c      	ldr	r3, [pc, #304]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d05c      	beq.n	8003f9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d141      	bne.n	8003f70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eec:	4b48      	ldr	r3, [pc, #288]	; (8004010 <HAL_RCC_OscConfig+0x4dc>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef2:	f7fe fad3 	bl	800249c <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fe facf 	bl	800249c <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e078      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0c:	4b3f      	ldr	r3, [pc, #252]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f0      	bne.n	8003efa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	019b      	lsls	r3, r3, #6
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	085b      	lsrs	r3, r3, #1
 8003f30:	3b01      	subs	r3, #1
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	061b      	lsls	r3, r3, #24
 8003f3c:	4933      	ldr	r1, [pc, #204]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f42:	4b33      	ldr	r3, [pc, #204]	; (8004010 <HAL_RCC_OscConfig+0x4dc>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fe faa8 	bl	800249c <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fe faa4 	bl	800249c <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e04d      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f62:	4b2a      	ldr	r3, [pc, #168]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x41c>
 8003f6e:	e045      	b.n	8003ffc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f70:	4b27      	ldr	r3, [pc, #156]	; (8004010 <HAL_RCC_OscConfig+0x4dc>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f76:	f7fe fa91 	bl	800249c <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7e:	f7fe fa8d 	bl	800249c <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e036      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f90:	4b1e      	ldr	r3, [pc, #120]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f0      	bne.n	8003f7e <HAL_RCC_OscConfig+0x44a>
 8003f9c:	e02e      	b.n	8003ffc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e029      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003faa:	4b18      	ldr	r3, [pc, #96]	; (800400c <HAL_RCC_OscConfig+0x4d8>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d11c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d115      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d10d      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40007000 	.word	0x40007000
 800400c:	40023800 	.word	0x40023800
 8004010:	42470060 	.word	0x42470060

08004014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0cc      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004028:	4b68      	ldr	r3, [pc, #416]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d90c      	bls.n	8004050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b65      	ldr	r3, [pc, #404]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403e:	4b63      	ldr	r3, [pc, #396]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0b8      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d020      	beq.n	800409e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004068:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	4a58      	ldr	r2, [pc, #352]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004080:	4b53      	ldr	r3, [pc, #332]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a52      	ldr	r2, [pc, #328]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800408a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408c:	4b50      	ldr	r3, [pc, #320]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	494d      	ldr	r1, [pc, #308]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d044      	beq.n	8004134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b2:	4b47      	ldr	r3, [pc, #284]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d119      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e07f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d003      	beq.n	80040d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d107      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d2:	4b3f      	ldr	r3, [pc, #252]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e2:	4b3b      	ldr	r3, [pc, #236]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e067      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040f2:	4b37      	ldr	r3, [pc, #220]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f023 0203 	bic.w	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4934      	ldr	r1, [pc, #208]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004104:	f7fe f9ca 	bl	800249c <HAL_GetTick>
 8004108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410a:	e00a      	b.n	8004122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410c:	f7fe f9c6 	bl	800249c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	; 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e04f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 020c 	and.w	r2, r3, #12
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	429a      	cmp	r2, r3
 8004132:	d1eb      	bne.n	800410c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004134:	4b25      	ldr	r3, [pc, #148]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d20c      	bcs.n	800415c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b22      	ldr	r3, [pc, #136]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e032      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004168:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4916      	ldr	r1, [pc, #88]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004186:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	490e      	ldr	r1, [pc, #56]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800419a:	f000 f821 	bl	80041e0 <HAL_RCC_GetSysClockFreq>
 800419e:	4601      	mov	r1, r0
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <HAL_RCC_ClockConfig+0x1c0>)
 80041ac:	5cd3      	ldrb	r3, [r2, r3]
 80041ae:	fa21 f303 	lsr.w	r3, r1, r3
 80041b2:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041b6:	4b09      	ldr	r3, [pc, #36]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe f92a 	bl	8002414 <HAL_InitTick>

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40023c00 	.word	0x40023c00
 80041d0:	40023800 	.word	0x40023800
 80041d4:	08006168 	.word	0x08006168
 80041d8:	20000090 	.word	0x20000090
 80041dc:	20000094 	.word	0x20000094

080041e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	607b      	str	r3, [r7, #4]
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	2300      	movs	r3, #0
 80041f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f6:	4b63      	ldr	r3, [pc, #396]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d007      	beq.n	8004212 <HAL_RCC_GetSysClockFreq+0x32>
 8004202:	2b08      	cmp	r3, #8
 8004204:	d008      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x38>
 8004206:	2b00      	cmp	r3, #0
 8004208:	f040 80b4 	bne.w	8004374 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800420c:	4b5e      	ldr	r3, [pc, #376]	; (8004388 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800420e:	60bb      	str	r3, [r7, #8]
       break;
 8004210:	e0b3      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004212:	4b5d      	ldr	r3, [pc, #372]	; (8004388 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004214:	60bb      	str	r3, [r7, #8]
      break;
 8004216:	e0b0      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004218:	4b5a      	ldr	r3, [pc, #360]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004220:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004222:	4b58      	ldr	r3, [pc, #352]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d04a      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422e:	4b55      	ldr	r3, [pc, #340]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	f04f 0400 	mov.w	r4, #0
 8004238:	f240 11ff 	movw	r1, #511	; 0x1ff
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	ea03 0501 	and.w	r5, r3, r1
 8004244:	ea04 0602 	and.w	r6, r4, r2
 8004248:	4629      	mov	r1, r5
 800424a:	4632      	mov	r2, r6
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	f04f 0400 	mov.w	r4, #0
 8004254:	0154      	lsls	r4, r2, #5
 8004256:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800425a:	014b      	lsls	r3, r1, #5
 800425c:	4619      	mov	r1, r3
 800425e:	4622      	mov	r2, r4
 8004260:	1b49      	subs	r1, r1, r5
 8004262:	eb62 0206 	sbc.w	r2, r2, r6
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	f04f 0400 	mov.w	r4, #0
 800426e:	0194      	lsls	r4, r2, #6
 8004270:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004274:	018b      	lsls	r3, r1, #6
 8004276:	1a5b      	subs	r3, r3, r1
 8004278:	eb64 0402 	sbc.w	r4, r4, r2
 800427c:	f04f 0100 	mov.w	r1, #0
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	00e2      	lsls	r2, r4, #3
 8004286:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800428a:	00d9      	lsls	r1, r3, #3
 800428c:	460b      	mov	r3, r1
 800428e:	4614      	mov	r4, r2
 8004290:	195b      	adds	r3, r3, r5
 8004292:	eb44 0406 	adc.w	r4, r4, r6
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	02a2      	lsls	r2, r4, #10
 80042a0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042a4:	0299      	lsls	r1, r3, #10
 80042a6:	460b      	mov	r3, r1
 80042a8:	4614      	mov	r4, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	4621      	mov	r1, r4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f04f 0400 	mov.w	r4, #0
 80042b4:	461a      	mov	r2, r3
 80042b6:	4623      	mov	r3, r4
 80042b8:	f7fc fc12 	bl	8000ae0 <__aeabi_uldivmod>
 80042bc:	4603      	mov	r3, r0
 80042be:	460c      	mov	r4, r1
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	e049      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c4:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	099b      	lsrs	r3, r3, #6
 80042ca:	f04f 0400 	mov.w	r4, #0
 80042ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	ea03 0501 	and.w	r5, r3, r1
 80042da:	ea04 0602 	and.w	r6, r4, r2
 80042de:	4629      	mov	r1, r5
 80042e0:	4632      	mov	r2, r6
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	f04f 0400 	mov.w	r4, #0
 80042ea:	0154      	lsls	r4, r2, #5
 80042ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042f0:	014b      	lsls	r3, r1, #5
 80042f2:	4619      	mov	r1, r3
 80042f4:	4622      	mov	r2, r4
 80042f6:	1b49      	subs	r1, r1, r5
 80042f8:	eb62 0206 	sbc.w	r2, r2, r6
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	f04f 0400 	mov.w	r4, #0
 8004304:	0194      	lsls	r4, r2, #6
 8004306:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800430a:	018b      	lsls	r3, r1, #6
 800430c:	1a5b      	subs	r3, r3, r1
 800430e:	eb64 0402 	sbc.w	r4, r4, r2
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	00e2      	lsls	r2, r4, #3
 800431c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004320:	00d9      	lsls	r1, r3, #3
 8004322:	460b      	mov	r3, r1
 8004324:	4614      	mov	r4, r2
 8004326:	195b      	adds	r3, r3, r5
 8004328:	eb44 0406 	adc.w	r4, r4, r6
 800432c:	f04f 0100 	mov.w	r1, #0
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	02a2      	lsls	r2, r4, #10
 8004336:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800433a:	0299      	lsls	r1, r3, #10
 800433c:	460b      	mov	r3, r1
 800433e:	4614      	mov	r4, r2
 8004340:	4618      	mov	r0, r3
 8004342:	4621      	mov	r1, r4
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f04f 0400 	mov.w	r4, #0
 800434a:	461a      	mov	r2, r3
 800434c:	4623      	mov	r3, r4
 800434e:	f7fc fbc7 	bl	8000ae0 <__aeabi_uldivmod>
 8004352:	4603      	mov	r3, r0
 8004354:	460c      	mov	r4, r1
 8004356:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	0c1b      	lsrs	r3, r3, #16
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	3301      	adds	r3, #1
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	60bb      	str	r3, [r7, #8]
      break;
 8004372:	e002      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004376:	60bb      	str	r3, [r7, #8]
      break;
 8004378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800437a:	68bb      	ldr	r3, [r7, #8]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004384:	40023800 	.word	0x40023800
 8004388:	00f42400 	.word	0x00f42400

0800438c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e01d      	b.n	80043da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fd ff88 	bl	80022c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f000 fa38 	bl	8004840 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b06      	cmp	r3, #6
 8004402:	d007      	beq.n	8004414 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b085      	sub	sp, #20
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b06      	cmp	r3, #6
 8004452:	d007      	beq.n	8004464 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b02      	cmp	r3, #2
 8004486:	d122      	bne.n	80044ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b02      	cmp	r3, #2
 8004494:	d11b      	bne.n	80044ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f06f 0202 	mvn.w	r2, #2
 800449e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f9a5 	bl	8004804 <HAL_TIM_IC_CaptureCallback>
 80044ba:	e005      	b.n	80044c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f997 	bl	80047f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f9a8 	bl	8004818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d122      	bne.n	8004522 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d11b      	bne.n	8004522 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f06f 0204 	mvn.w	r2, #4
 80044f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f97b 	bl	8004804 <HAL_TIM_IC_CaptureCallback>
 800450e:	e005      	b.n	800451c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f96d 	bl	80047f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f97e 	bl	8004818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b08      	cmp	r3, #8
 800452e:	d122      	bne.n	8004576 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b08      	cmp	r3, #8
 800453c:	d11b      	bne.n	8004576 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f06f 0208 	mvn.w	r2, #8
 8004546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2204      	movs	r2, #4
 800454c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f951 	bl	8004804 <HAL_TIM_IC_CaptureCallback>
 8004562:	e005      	b.n	8004570 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f943 	bl	80047f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f954 	bl	8004818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b10      	cmp	r3, #16
 8004582:	d122      	bne.n	80045ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f003 0310 	and.w	r3, r3, #16
 800458e:	2b10      	cmp	r3, #16
 8004590:	d11b      	bne.n	80045ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f06f 0210 	mvn.w	r2, #16
 800459a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2208      	movs	r2, #8
 80045a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f927 	bl	8004804 <HAL_TIM_IC_CaptureCallback>
 80045b6:	e005      	b.n	80045c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f919 	bl	80047f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f92a 	bl	8004818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d10e      	bne.n	80045f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d107      	bne.n	80045f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f06f 0201 	mvn.w	r2, #1
 80045ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fd fab9 	bl	8001b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004600:	2b80      	cmp	r3, #128	; 0x80
 8004602:	d10e      	bne.n	8004622 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460e:	2b80      	cmp	r3, #128	; 0x80
 8004610:	d107      	bne.n	8004622 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800461a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 facf 	bl	8004bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d10e      	bne.n	800464e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b40      	cmp	r3, #64	; 0x40
 800463c:	d107      	bne.n	800464e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f8ef 	bl	800482c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b20      	cmp	r3, #32
 800465a:	d10e      	bne.n	800467a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b20      	cmp	r3, #32
 8004668:	d107      	bne.n	800467a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f06f 0220 	mvn.w	r2, #32
 8004672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fa99 	bl	8004bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_TIM_ConfigClockSource+0x18>
 8004696:	2302      	movs	r3, #2
 8004698:	e0a6      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x166>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046c0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d067      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0x120>
 80046d2:	2b40      	cmp	r3, #64	; 0x40
 80046d4:	d80b      	bhi.n	80046ee <HAL_TIM_ConfigClockSource+0x6c>
 80046d6:	2b10      	cmp	r3, #16
 80046d8:	d073      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x140>
 80046da:	2b10      	cmp	r3, #16
 80046dc:	d802      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x62>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d06f      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80046e2:	e078      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d06c      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x140>
 80046e8:	2b30      	cmp	r3, #48	; 0x30
 80046ea:	d06a      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80046ec:	e073      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046ee:	2b70      	cmp	r3, #112	; 0x70
 80046f0:	d00d      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x8c>
 80046f2:	2b70      	cmp	r3, #112	; 0x70
 80046f4:	d804      	bhi.n	8004700 <HAL_TIM_ConfigClockSource+0x7e>
 80046f6:	2b50      	cmp	r3, #80	; 0x50
 80046f8:	d033      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0xe0>
 80046fa:	2b60      	cmp	r3, #96	; 0x60
 80046fc:	d041      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80046fe:	e06a      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004704:	d066      	beq.n	80047d4 <HAL_TIM_ConfigClockSource+0x152>
 8004706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470a:	d017      	beq.n	800473c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800470c:	e063      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6899      	ldr	r1, [r3, #8]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f000 f9a9 	bl	8004a74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004730:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	609a      	str	r2, [r3, #8]
      break;
 800473a:	e04c      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6899      	ldr	r1, [r3, #8]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f000 f992 	bl	8004a74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800475e:	609a      	str	r2, [r3, #8]
      break;
 8004760:	e039      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6859      	ldr	r1, [r3, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	461a      	mov	r2, r3
 8004770:	f000 f906 	bl	8004980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2150      	movs	r1, #80	; 0x50
 800477a:	4618      	mov	r0, r3
 800477c:	f000 f95f 	bl	8004a3e <TIM_ITRx_SetConfig>
      break;
 8004780:	e029      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	461a      	mov	r2, r3
 8004790:	f000 f925 	bl	80049de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2160      	movs	r1, #96	; 0x60
 800479a:	4618      	mov	r0, r3
 800479c:	f000 f94f 	bl	8004a3e <TIM_ITRx_SetConfig>
      break;
 80047a0:	e019      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6859      	ldr	r1, [r3, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	461a      	mov	r2, r3
 80047b0:	f000 f8e6 	bl	8004980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2140      	movs	r1, #64	; 0x40
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 f93f 	bl	8004a3e <TIM_ITRx_SetConfig>
      break;
 80047c0:	e009      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f000 f936 	bl	8004a3e <TIM_ITRx_SetConfig>
      break;
 80047d2:	e000      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80047d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a40      	ldr	r2, [pc, #256]	; (8004954 <TIM_Base_SetConfig+0x114>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <TIM_Base_SetConfig+0x40>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485e:	d00f      	beq.n	8004880 <TIM_Base_SetConfig+0x40>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a3d      	ldr	r2, [pc, #244]	; (8004958 <TIM_Base_SetConfig+0x118>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00b      	beq.n	8004880 <TIM_Base_SetConfig+0x40>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3c      	ldr	r2, [pc, #240]	; (800495c <TIM_Base_SetConfig+0x11c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d007      	beq.n	8004880 <TIM_Base_SetConfig+0x40>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a3b      	ldr	r2, [pc, #236]	; (8004960 <TIM_Base_SetConfig+0x120>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_Base_SetConfig+0x40>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a3a      	ldr	r2, [pc, #232]	; (8004964 <TIM_Base_SetConfig+0x124>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d108      	bne.n	8004892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a2f      	ldr	r2, [pc, #188]	; (8004954 <TIM_Base_SetConfig+0x114>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d02b      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a0:	d027      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2c      	ldr	r2, [pc, #176]	; (8004958 <TIM_Base_SetConfig+0x118>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d023      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a2b      	ldr	r2, [pc, #172]	; (800495c <TIM_Base_SetConfig+0x11c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01f      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a2a      	ldr	r2, [pc, #168]	; (8004960 <TIM_Base_SetConfig+0x120>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01b      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a29      	ldr	r2, [pc, #164]	; (8004964 <TIM_Base_SetConfig+0x124>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d017      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a28      	ldr	r2, [pc, #160]	; (8004968 <TIM_Base_SetConfig+0x128>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a27      	ldr	r2, [pc, #156]	; (800496c <TIM_Base_SetConfig+0x12c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00f      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a26      	ldr	r2, [pc, #152]	; (8004970 <TIM_Base_SetConfig+0x130>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00b      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a25      	ldr	r2, [pc, #148]	; (8004974 <TIM_Base_SetConfig+0x134>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d007      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a24      	ldr	r2, [pc, #144]	; (8004978 <TIM_Base_SetConfig+0x138>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d003      	beq.n	80048f2 <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a23      	ldr	r2, [pc, #140]	; (800497c <TIM_Base_SetConfig+0x13c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d108      	bne.n	8004904 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a0a      	ldr	r2, [pc, #40]	; (8004954 <TIM_Base_SetConfig+0x114>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_Base_SetConfig+0xf8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a0c      	ldr	r2, [pc, #48]	; (8004964 <TIM_Base_SetConfig+0x124>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d103      	bne.n	8004940 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	615a      	str	r2, [r3, #20]
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40010400 	.word	0x40010400
 8004968:	40014000 	.word	0x40014000
 800496c:	40014400 	.word	0x40014400
 8004970:	40014800 	.word	0x40014800
 8004974:	40001800 	.word	0x40001800
 8004978:	40001c00 	.word	0x40001c00
 800497c:	40002000 	.word	0x40002000

08004980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f023 0201 	bic.w	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f023 030a 	bic.w	r3, r3, #10
 80049bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049de:	b480      	push	{r7}
 80049e0:	b087      	sub	sp, #28
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	f023 0210 	bic.w	r2, r3, #16
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	031b      	lsls	r3, r3, #12
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f043 0307 	orr.w	r3, r3, #7
 8004a60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	609a      	str	r2, [r3, #8]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	021a      	lsls	r2, r3, #8
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	609a      	str	r2, [r3, #8]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e05a      	b.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a21      	ldr	r2, [pc, #132]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d022      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b18:	d01d      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1d      	ldr	r2, [pc, #116]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d018      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1b      	ldr	r2, [pc, #108]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1a      	ldr	r2, [pc, #104]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00e      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a18      	ldr	r2, [pc, #96]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d009      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a17      	ldr	r2, [pc, #92]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a15      	ldr	r2, [pc, #84]	; (8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d10c      	bne.n	8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40010000 	.word	0x40010000
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800
 8004b9c:	40000c00 	.word	0x40000c00
 8004ba0:	40010400 	.word	0x40010400
 8004ba4:	40014000 	.word	0x40014000
 8004ba8:	40001800 	.word	0x40001800

08004bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <__errno>:
 8004bd4:	4b01      	ldr	r3, [pc, #4]	; (8004bdc <__errno+0x8>)
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	2000009c 	.word	0x2000009c

08004be0 <__libc_init_array>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	4e0d      	ldr	r6, [pc, #52]	; (8004c18 <__libc_init_array+0x38>)
 8004be4:	4c0d      	ldr	r4, [pc, #52]	; (8004c1c <__libc_init_array+0x3c>)
 8004be6:	1ba4      	subs	r4, r4, r6
 8004be8:	10a4      	asrs	r4, r4, #2
 8004bea:	2500      	movs	r5, #0
 8004bec:	42a5      	cmp	r5, r4
 8004bee:	d109      	bne.n	8004c04 <__libc_init_array+0x24>
 8004bf0:	4e0b      	ldr	r6, [pc, #44]	; (8004c20 <__libc_init_array+0x40>)
 8004bf2:	4c0c      	ldr	r4, [pc, #48]	; (8004c24 <__libc_init_array+0x44>)
 8004bf4:	f001 faaa 	bl	800614c <_init>
 8004bf8:	1ba4      	subs	r4, r4, r6
 8004bfa:	10a4      	asrs	r4, r4, #2
 8004bfc:	2500      	movs	r5, #0
 8004bfe:	42a5      	cmp	r5, r4
 8004c00:	d105      	bne.n	8004c0e <__libc_init_array+0x2e>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c08:	4798      	blx	r3
 8004c0a:	3501      	adds	r5, #1
 8004c0c:	e7ee      	b.n	8004bec <__libc_init_array+0xc>
 8004c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c12:	4798      	blx	r3
 8004c14:	3501      	adds	r5, #1
 8004c16:	e7f2      	b.n	8004bfe <__libc_init_array+0x1e>
 8004c18:	080061d0 	.word	0x080061d0
 8004c1c:	080061d0 	.word	0x080061d0
 8004c20:	080061d0 	.word	0x080061d0
 8004c24:	080061d4 	.word	0x080061d4

08004c28 <memset>:
 8004c28:	4402      	add	r2, r0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d100      	bne.n	8004c32 <memset+0xa>
 8004c30:	4770      	bx	lr
 8004c32:	f803 1b01 	strb.w	r1, [r3], #1
 8004c36:	e7f9      	b.n	8004c2c <memset+0x4>

08004c38 <log>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	ed2d 8b02 	vpush	{d8}
 8004c3e:	b08a      	sub	sp, #40	; 0x28
 8004c40:	ec55 4b10 	vmov	r4, r5, d0
 8004c44:	f000 f9e8 	bl	8005018 <__ieee754_log>
 8004c48:	4b36      	ldr	r3, [pc, #216]	; (8004d24 <log+0xec>)
 8004c4a:	eeb0 8a40 	vmov.f32	s16, s0
 8004c4e:	eef0 8a60 	vmov.f32	s17, s1
 8004c52:	f993 6000 	ldrsb.w	r6, [r3]
 8004c56:	1c73      	adds	r3, r6, #1
 8004c58:	d05b      	beq.n	8004d12 <log+0xda>
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	462b      	mov	r3, r5
 8004c5e:	4620      	mov	r0, r4
 8004c60:	4629      	mov	r1, r5
 8004c62:	f7fb ff07 	bl	8000a74 <__aeabi_dcmpun>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d153      	bne.n	8004d12 <log+0xda>
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	4620      	mov	r0, r4
 8004c70:	4629      	mov	r1, r5
 8004c72:	f7fb fef5 	bl	8000a60 <__aeabi_dcmpgt>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	d14b      	bne.n	8004d12 <log+0xda>
 8004c7a:	4b2b      	ldr	r3, [pc, #172]	; (8004d28 <log+0xf0>)
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	9008      	str	r0, [sp, #32]
 8004c80:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004c84:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004c88:	b9a6      	cbnz	r6, 8004cb4 <log+0x7c>
 8004c8a:	4b28      	ldr	r3, [pc, #160]	; (8004d2c <log+0xf4>)
 8004c8c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004c90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c94:	4620      	mov	r0, r4
 8004c96:	2200      	movs	r2, #0
 8004c98:	2300      	movs	r3, #0
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	f7fb feb8 	bl	8000a10 <__aeabi_dcmpeq>
 8004ca0:	bb40      	cbnz	r0, 8004cf4 <log+0xbc>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	2e02      	cmp	r6, #2
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	d119      	bne.n	8004cde <log+0xa6>
 8004caa:	f7ff ff93 	bl	8004bd4 <__errno>
 8004cae:	2321      	movs	r3, #33	; 0x21
 8004cb0:	6003      	str	r3, [r0, #0]
 8004cb2:	e019      	b.n	8004ce8 <log+0xb0>
 8004cb4:	4b1e      	ldr	r3, [pc, #120]	; (8004d30 <log+0xf8>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	f7fb fea4 	bl	8000a10 <__aeabi_dcmpeq>
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d0ea      	beq.n	8004ca2 <log+0x6a>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	429e      	cmp	r6, r3
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	d111      	bne.n	8004cf8 <log+0xc0>
 8004cd4:	f7ff ff7e 	bl	8004bd4 <__errno>
 8004cd8:	2322      	movs	r3, #34	; 0x22
 8004cda:	6003      	str	r3, [r0, #0]
 8004cdc:	e011      	b.n	8004d02 <log+0xca>
 8004cde:	4668      	mov	r0, sp
 8004ce0:	f001 f91d 	bl	8005f1e <matherr>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d0e0      	beq.n	8004caa <log+0x72>
 8004ce8:	4812      	ldr	r0, [pc, #72]	; (8004d34 <log+0xfc>)
 8004cea:	f001 f91d 	bl	8005f28 <nan>
 8004cee:	ed8d 0b06 	vstr	d0, [sp, #24]
 8004cf2:	e006      	b.n	8004d02 <log+0xca>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	4668      	mov	r0, sp
 8004cfa:	f001 f910 	bl	8005f1e <matherr>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d0e8      	beq.n	8004cd4 <log+0x9c>
 8004d02:	9b08      	ldr	r3, [sp, #32]
 8004d04:	b11b      	cbz	r3, 8004d0e <log+0xd6>
 8004d06:	f7ff ff65 	bl	8004bd4 <__errno>
 8004d0a:	9b08      	ldr	r3, [sp, #32]
 8004d0c:	6003      	str	r3, [r0, #0]
 8004d0e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004d12:	eeb0 0a48 	vmov.f32	s0, s16
 8004d16:	eef0 0a68 	vmov.f32	s1, s17
 8004d1a:	b00a      	add	sp, #40	; 0x28
 8004d1c:	ecbd 8b02 	vpop	{d8}
 8004d20:	bd70      	pop	{r4, r5, r6, pc}
 8004d22:	bf00      	nop
 8004d24:	20000100 	.word	0x20000100
 8004d28:	08006180 	.word	0x08006180
 8004d2c:	c7efffff 	.word	0xc7efffff
 8004d30:	fff00000 	.word	0xfff00000
 8004d34:	08006183 	.word	0x08006183

08004d38 <pow>:
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	ed2d 8b04 	vpush	{d8-d9}
 8004d40:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8005014 <pow+0x2dc>
 8004d44:	b08d      	sub	sp, #52	; 0x34
 8004d46:	ec57 6b10 	vmov	r6, r7, d0
 8004d4a:	ec55 4b11 	vmov	r4, r5, d1
 8004d4e:	f000 fb17 	bl	8005380 <__ieee754_pow>
 8004d52:	f999 3000 	ldrsb.w	r3, [r9]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	eeb0 8a40 	vmov.f32	s16, s0
 8004d5e:	eef0 8a60 	vmov.f32	s17, s1
 8004d62:	46c8      	mov	r8, r9
 8004d64:	d05f      	beq.n	8004e26 <pow+0xee>
 8004d66:	4622      	mov	r2, r4
 8004d68:	462b      	mov	r3, r5
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	f7fb fe81 	bl	8000a74 <__aeabi_dcmpun>
 8004d72:	4683      	mov	fp, r0
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d156      	bne.n	8004e26 <pow+0xee>
 8004d78:	4632      	mov	r2, r6
 8004d7a:	463b      	mov	r3, r7
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	4639      	mov	r1, r7
 8004d80:	f7fb fe78 	bl	8000a74 <__aeabi_dcmpun>
 8004d84:	9001      	str	r0, [sp, #4]
 8004d86:	b1e8      	cbz	r0, 8004dc4 <pow+0x8c>
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	f7fb fe3e 	bl	8000a10 <__aeabi_dcmpeq>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d046      	beq.n	8004e26 <pow+0xee>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	9302      	str	r3, [sp, #8]
 8004d9c:	4b96      	ldr	r3, [pc, #600]	; (8004ff8 <pow+0x2c0>)
 8004d9e:	9303      	str	r3, [sp, #12]
 8004da0:	4b96      	ldr	r3, [pc, #600]	; (8004ffc <pow+0x2c4>)
 8004da2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004da6:	2200      	movs	r2, #0
 8004da8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004dac:	9b00      	ldr	r3, [sp, #0]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004db4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004db8:	d033      	beq.n	8004e22 <pow+0xea>
 8004dba:	a802      	add	r0, sp, #8
 8004dbc:	f001 f8af 	bl	8005f1e <matherr>
 8004dc0:	bb48      	cbnz	r0, 8004e16 <pow+0xde>
 8004dc2:	e05d      	b.n	8004e80 <pow+0x148>
 8004dc4:	f04f 0a00 	mov.w	sl, #0
 8004dc8:	f04f 0b00 	mov.w	fp, #0
 8004dcc:	4652      	mov	r2, sl
 8004dce:	465b      	mov	r3, fp
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	4639      	mov	r1, r7
 8004dd4:	f7fb fe1c 	bl	8000a10 <__aeabi_dcmpeq>
 8004dd8:	ec4b ab19 	vmov	d9, sl, fp
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d054      	beq.n	8004e8a <pow+0x152>
 8004de0:	4652      	mov	r2, sl
 8004de2:	465b      	mov	r3, fp
 8004de4:	4620      	mov	r0, r4
 8004de6:	4629      	mov	r1, r5
 8004de8:	f7fb fe12 	bl	8000a10 <__aeabi_dcmpeq>
 8004dec:	4680      	mov	r8, r0
 8004dee:	b318      	cbz	r0, 8004e38 <pow+0x100>
 8004df0:	2301      	movs	r3, #1
 8004df2:	9302      	str	r3, [sp, #8]
 8004df4:	4b80      	ldr	r3, [pc, #512]	; (8004ff8 <pow+0x2c0>)
 8004df6:	9303      	str	r3, [sp, #12]
 8004df8:	9b01      	ldr	r3, [sp, #4]
 8004dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8004dfc:	9b00      	ldr	r3, [sp, #0]
 8004dfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e02:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004e06:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0d5      	beq.n	8004dba <pow+0x82>
 8004e0e:	4b7b      	ldr	r3, [pc, #492]	; (8004ffc <pow+0x2c4>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e18:	b11b      	cbz	r3, 8004e22 <pow+0xea>
 8004e1a:	f7ff fedb 	bl	8004bd4 <__errno>
 8004e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e20:	6003      	str	r3, [r0, #0]
 8004e22:	ed9d 8b08 	vldr	d8, [sp, #32]
 8004e26:	eeb0 0a48 	vmov.f32	s0, s16
 8004e2a:	eef0 0a68 	vmov.f32	s1, s17
 8004e2e:	b00d      	add	sp, #52	; 0x34
 8004e30:	ecbd 8b04 	vpop	{d8-d9}
 8004e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e38:	ec45 4b10 	vmov	d0, r4, r5
 8004e3c:	f001 f867 	bl	8005f0e <finite>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d0f0      	beq.n	8004e26 <pow+0xee>
 8004e44:	4652      	mov	r2, sl
 8004e46:	465b      	mov	r3, fp
 8004e48:	4620      	mov	r0, r4
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	f7fb fdea 	bl	8000a24 <__aeabi_dcmplt>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d0e8      	beq.n	8004e26 <pow+0xee>
 8004e54:	2301      	movs	r3, #1
 8004e56:	9302      	str	r3, [sp, #8]
 8004e58:	4b67      	ldr	r3, [pc, #412]	; (8004ff8 <pow+0x2c0>)
 8004e5a:	9303      	str	r3, [sp, #12]
 8004e5c:	f999 3000 	ldrsb.w	r3, [r9]
 8004e60:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8004e64:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e68:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004e6c:	b913      	cbnz	r3, 8004e74 <pow+0x13c>
 8004e6e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004e72:	e7a2      	b.n	8004dba <pow+0x82>
 8004e74:	4962      	ldr	r1, [pc, #392]	; (8005000 <pow+0x2c8>)
 8004e76:	2000      	movs	r0, #0
 8004e78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d19c      	bne.n	8004dba <pow+0x82>
 8004e80:	f7ff fea8 	bl	8004bd4 <__errno>
 8004e84:	2321      	movs	r3, #33	; 0x21
 8004e86:	6003      	str	r3, [r0, #0]
 8004e88:	e7c5      	b.n	8004e16 <pow+0xde>
 8004e8a:	eeb0 0a48 	vmov.f32	s0, s16
 8004e8e:	eef0 0a68 	vmov.f32	s1, s17
 8004e92:	f001 f83c 	bl	8005f0e <finite>
 8004e96:	9000      	str	r0, [sp, #0]
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	f040 8081 	bne.w	8004fa0 <pow+0x268>
 8004e9e:	ec47 6b10 	vmov	d0, r6, r7
 8004ea2:	f001 f834 	bl	8005f0e <finite>
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d07a      	beq.n	8004fa0 <pow+0x268>
 8004eaa:	ec45 4b10 	vmov	d0, r4, r5
 8004eae:	f001 f82e 	bl	8005f0e <finite>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d074      	beq.n	8004fa0 <pow+0x268>
 8004eb6:	ec53 2b18 	vmov	r2, r3, d8
 8004eba:	ee18 0a10 	vmov	r0, s16
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f7fb fdd8 	bl	8000a74 <__aeabi_dcmpun>
 8004ec4:	f999 9000 	ldrsb.w	r9, [r9]
 8004ec8:	4b4b      	ldr	r3, [pc, #300]	; (8004ff8 <pow+0x2c0>)
 8004eca:	b1b0      	cbz	r0, 8004efa <pow+0x1c2>
 8004ecc:	2201      	movs	r2, #1
 8004ece:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ed2:	9b00      	ldr	r3, [sp, #0]
 8004ed4:	930a      	str	r3, [sp, #40]	; 0x28
 8004ed6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004eda:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004ede:	f1b9 0f00 	cmp.w	r9, #0
 8004ee2:	d0c4      	beq.n	8004e6e <pow+0x136>
 8004ee4:	4652      	mov	r2, sl
 8004ee6:	465b      	mov	r3, fp
 8004ee8:	4650      	mov	r0, sl
 8004eea:	4659      	mov	r1, fp
 8004eec:	f7fb fc52 	bl	8000794 <__aeabi_ddiv>
 8004ef0:	f1b9 0f02 	cmp.w	r9, #2
 8004ef4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ef8:	e7c1      	b.n	8004e7e <pow+0x146>
 8004efa:	2203      	movs	r2, #3
 8004efc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f00:	900a      	str	r0, [sp, #40]	; 0x28
 8004f02:	4629      	mov	r1, r5
 8004f04:	4620      	mov	r0, r4
 8004f06:	2200      	movs	r2, #0
 8004f08:	4b3e      	ldr	r3, [pc, #248]	; (8005004 <pow+0x2cc>)
 8004f0a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004f0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f12:	f7fb fb15 	bl	8000540 <__aeabi_dmul>
 8004f16:	4604      	mov	r4, r0
 8004f18:	460d      	mov	r5, r1
 8004f1a:	f1b9 0f00 	cmp.w	r9, #0
 8004f1e:	d124      	bne.n	8004f6a <pow+0x232>
 8004f20:	4b39      	ldr	r3, [pc, #228]	; (8005008 <pow+0x2d0>)
 8004f22:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004f26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	4652      	mov	r2, sl
 8004f2e:	465b      	mov	r3, fp
 8004f30:	4639      	mov	r1, r7
 8004f32:	f7fb fd77 	bl	8000a24 <__aeabi_dcmplt>
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d056      	beq.n	8004fe8 <pow+0x2b0>
 8004f3a:	ec45 4b10 	vmov	d0, r4, r5
 8004f3e:	f000 fffb 	bl	8005f38 <rint>
 8004f42:	4622      	mov	r2, r4
 8004f44:	462b      	mov	r3, r5
 8004f46:	ec51 0b10 	vmov	r0, r1, d0
 8004f4a:	f7fb fd61 	bl	8000a10 <__aeabi_dcmpeq>
 8004f4e:	b920      	cbnz	r0, 8004f5a <pow+0x222>
 8004f50:	4b2e      	ldr	r3, [pc, #184]	; (800500c <pow+0x2d4>)
 8004f52:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004f56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004f5a:	f998 3000 	ldrsb.w	r3, [r8]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d142      	bne.n	8004fe8 <pow+0x2b0>
 8004f62:	f7ff fe37 	bl	8004bd4 <__errno>
 8004f66:	2322      	movs	r3, #34	; 0x22
 8004f68:	e78d      	b.n	8004e86 <pow+0x14e>
 8004f6a:	4b29      	ldr	r3, [pc, #164]	; (8005010 <pow+0x2d8>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004f72:	4630      	mov	r0, r6
 8004f74:	4652      	mov	r2, sl
 8004f76:	465b      	mov	r3, fp
 8004f78:	4639      	mov	r1, r7
 8004f7a:	f7fb fd53 	bl	8000a24 <__aeabi_dcmplt>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d0eb      	beq.n	8004f5a <pow+0x222>
 8004f82:	ec45 4b10 	vmov	d0, r4, r5
 8004f86:	f000 ffd7 	bl	8005f38 <rint>
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	462b      	mov	r3, r5
 8004f8e:	ec51 0b10 	vmov	r0, r1, d0
 8004f92:	f7fb fd3d 	bl	8000a10 <__aeabi_dcmpeq>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d1df      	bne.n	8004f5a <pow+0x222>
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	4b18      	ldr	r3, [pc, #96]	; (8005000 <pow+0x2c8>)
 8004f9e:	e7da      	b.n	8004f56 <pow+0x21e>
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	ec51 0b18 	vmov	r0, r1, d8
 8004fa8:	f7fb fd32 	bl	8000a10 <__aeabi_dcmpeq>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f43f af3a 	beq.w	8004e26 <pow+0xee>
 8004fb2:	ec47 6b10 	vmov	d0, r6, r7
 8004fb6:	f000 ffaa 	bl	8005f0e <finite>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	f43f af33 	beq.w	8004e26 <pow+0xee>
 8004fc0:	ec45 4b10 	vmov	d0, r4, r5
 8004fc4:	f000 ffa3 	bl	8005f0e <finite>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	f43f af2c 	beq.w	8004e26 <pow+0xee>
 8004fce:	2304      	movs	r3, #4
 8004fd0:	9302      	str	r3, [sp, #8]
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <pow+0x2c0>)
 8004fd4:	9303      	str	r3, [sp, #12]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	930a      	str	r3, [sp, #40]	; 0x28
 8004fda:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004fde:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004fe2:	ed8d 9b08 	vstr	d9, [sp, #32]
 8004fe6:	e7b8      	b.n	8004f5a <pow+0x222>
 8004fe8:	a802      	add	r0, sp, #8
 8004fea:	f000 ff98 	bl	8005f1e <matherr>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f47f af11 	bne.w	8004e16 <pow+0xde>
 8004ff4:	e7b5      	b.n	8004f62 <pow+0x22a>
 8004ff6:	bf00      	nop
 8004ff8:	08006184 	.word	0x08006184
 8004ffc:	3ff00000 	.word	0x3ff00000
 8005000:	fff00000 	.word	0xfff00000
 8005004:	3fe00000 	.word	0x3fe00000
 8005008:	47efffff 	.word	0x47efffff
 800500c:	c7efffff 	.word	0xc7efffff
 8005010:	7ff00000 	.word	0x7ff00000
 8005014:	20000100 	.word	0x20000100

08005018 <__ieee754_log>:
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	ec51 0b10 	vmov	r0, r1, d0
 8005020:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005024:	b087      	sub	sp, #28
 8005026:	460d      	mov	r5, r1
 8005028:	da27      	bge.n	800507a <__ieee754_log+0x62>
 800502a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800502e:	4303      	orrs	r3, r0
 8005030:	ee10 2a10 	vmov	r2, s0
 8005034:	d10a      	bne.n	800504c <__ieee754_log+0x34>
 8005036:	49cc      	ldr	r1, [pc, #816]	; (8005368 <__ieee754_log+0x350>)
 8005038:	2200      	movs	r2, #0
 800503a:	2300      	movs	r3, #0
 800503c:	2000      	movs	r0, #0
 800503e:	f7fb fba9 	bl	8000794 <__aeabi_ddiv>
 8005042:	ec41 0b10 	vmov	d0, r0, r1
 8005046:	b007      	add	sp, #28
 8005048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504c:	2900      	cmp	r1, #0
 800504e:	da05      	bge.n	800505c <__ieee754_log+0x44>
 8005050:	460b      	mov	r3, r1
 8005052:	f7fb f8bd 	bl	80001d0 <__aeabi_dsub>
 8005056:	2200      	movs	r2, #0
 8005058:	2300      	movs	r3, #0
 800505a:	e7f0      	b.n	800503e <__ieee754_log+0x26>
 800505c:	4bc3      	ldr	r3, [pc, #780]	; (800536c <__ieee754_log+0x354>)
 800505e:	2200      	movs	r2, #0
 8005060:	f7fb fa6e 	bl	8000540 <__aeabi_dmul>
 8005064:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005068:	460d      	mov	r5, r1
 800506a:	4ac1      	ldr	r2, [pc, #772]	; (8005370 <__ieee754_log+0x358>)
 800506c:	4295      	cmp	r5, r2
 800506e:	dd06      	ble.n	800507e <__ieee754_log+0x66>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	f7fb f8ae 	bl	80001d4 <__adddf3>
 8005078:	e7e3      	b.n	8005042 <__ieee754_log+0x2a>
 800507a:	2300      	movs	r3, #0
 800507c:	e7f5      	b.n	800506a <__ieee754_log+0x52>
 800507e:	152c      	asrs	r4, r5, #20
 8005080:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005084:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005088:	441c      	add	r4, r3
 800508a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800508e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8005092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005096:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800509a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800509e:	ea42 0105 	orr.w	r1, r2, r5
 80050a2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80050a6:	2200      	movs	r2, #0
 80050a8:	4bb2      	ldr	r3, [pc, #712]	; (8005374 <__ieee754_log+0x35c>)
 80050aa:	f7fb f891 	bl	80001d0 <__aeabi_dsub>
 80050ae:	1cab      	adds	r3, r5, #2
 80050b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	4682      	mov	sl, r0
 80050b8:	468b      	mov	fp, r1
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	dc53      	bgt.n	8005168 <__ieee754_log+0x150>
 80050c0:	2300      	movs	r3, #0
 80050c2:	f7fb fca5 	bl	8000a10 <__aeabi_dcmpeq>
 80050c6:	b1d0      	cbz	r0, 80050fe <__ieee754_log+0xe6>
 80050c8:	2c00      	cmp	r4, #0
 80050ca:	f000 8120 	beq.w	800530e <__ieee754_log+0x2f6>
 80050ce:	4620      	mov	r0, r4
 80050d0:	f7fb f9cc 	bl	800046c <__aeabi_i2d>
 80050d4:	a390      	add	r3, pc, #576	; (adr r3, 8005318 <__ieee754_log+0x300>)
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	4606      	mov	r6, r0
 80050dc:	460f      	mov	r7, r1
 80050de:	f7fb fa2f 	bl	8000540 <__aeabi_dmul>
 80050e2:	a38f      	add	r3, pc, #572	; (adr r3, 8005320 <__ieee754_log+0x308>)
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	4604      	mov	r4, r0
 80050ea:	460d      	mov	r5, r1
 80050ec:	4630      	mov	r0, r6
 80050ee:	4639      	mov	r1, r7
 80050f0:	f7fb fa26 	bl	8000540 <__aeabi_dmul>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4620      	mov	r0, r4
 80050fa:	4629      	mov	r1, r5
 80050fc:	e7ba      	b.n	8005074 <__ieee754_log+0x5c>
 80050fe:	a38a      	add	r3, pc, #552	; (adr r3, 8005328 <__ieee754_log+0x310>)
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	4650      	mov	r0, sl
 8005106:	4659      	mov	r1, fp
 8005108:	f7fb fa1a 	bl	8000540 <__aeabi_dmul>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	2000      	movs	r0, #0
 8005112:	4999      	ldr	r1, [pc, #612]	; (8005378 <__ieee754_log+0x360>)
 8005114:	f7fb f85c 	bl	80001d0 <__aeabi_dsub>
 8005118:	4652      	mov	r2, sl
 800511a:	4606      	mov	r6, r0
 800511c:	460f      	mov	r7, r1
 800511e:	465b      	mov	r3, fp
 8005120:	4650      	mov	r0, sl
 8005122:	4659      	mov	r1, fp
 8005124:	f7fb fa0c 	bl	8000540 <__aeabi_dmul>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4630      	mov	r0, r6
 800512e:	4639      	mov	r1, r7
 8005130:	f7fb fa06 	bl	8000540 <__aeabi_dmul>
 8005134:	4606      	mov	r6, r0
 8005136:	460f      	mov	r7, r1
 8005138:	b914      	cbnz	r4, 8005140 <__ieee754_log+0x128>
 800513a:	4632      	mov	r2, r6
 800513c:	463b      	mov	r3, r7
 800513e:	e0a0      	b.n	8005282 <__ieee754_log+0x26a>
 8005140:	4620      	mov	r0, r4
 8005142:	f7fb f993 	bl	800046c <__aeabi_i2d>
 8005146:	a374      	add	r3, pc, #464	; (adr r3, 8005318 <__ieee754_log+0x300>)
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	4680      	mov	r8, r0
 800514e:	4689      	mov	r9, r1
 8005150:	f7fb f9f6 	bl	8000540 <__aeabi_dmul>
 8005154:	a372      	add	r3, pc, #456	; (adr r3, 8005320 <__ieee754_log+0x308>)
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	4604      	mov	r4, r0
 800515c:	460d      	mov	r5, r1
 800515e:	4640      	mov	r0, r8
 8005160:	4649      	mov	r1, r9
 8005162:	f7fb f9ed 	bl	8000540 <__aeabi_dmul>
 8005166:	e0a5      	b.n	80052b4 <__ieee754_log+0x29c>
 8005168:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800516c:	f7fb f832 	bl	80001d4 <__adddf3>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4650      	mov	r0, sl
 8005176:	4659      	mov	r1, fp
 8005178:	f7fb fb0c 	bl	8000794 <__aeabi_ddiv>
 800517c:	e9cd 0100 	strd	r0, r1, [sp]
 8005180:	4620      	mov	r0, r4
 8005182:	f7fb f973 	bl	800046c <__aeabi_i2d>
 8005186:	e9dd 2300 	ldrd	r2, r3, [sp]
 800518a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	f7fb f9d5 	bl	8000540 <__aeabi_dmul>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800519e:	f7fb f9cf 	bl	8000540 <__aeabi_dmul>
 80051a2:	a363      	add	r3, pc, #396	; (adr r3, 8005330 <__ieee754_log+0x318>)
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	4680      	mov	r8, r0
 80051aa:	4689      	mov	r9, r1
 80051ac:	f7fb f9c8 	bl	8000540 <__aeabi_dmul>
 80051b0:	a361      	add	r3, pc, #388	; (adr r3, 8005338 <__ieee754_log+0x320>)
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	f7fb f80d 	bl	80001d4 <__adddf3>
 80051ba:	4642      	mov	r2, r8
 80051bc:	464b      	mov	r3, r9
 80051be:	f7fb f9bf 	bl	8000540 <__aeabi_dmul>
 80051c2:	a35f      	add	r3, pc, #380	; (adr r3, 8005340 <__ieee754_log+0x328>)
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f7fb f804 	bl	80001d4 <__adddf3>
 80051cc:	4642      	mov	r2, r8
 80051ce:	464b      	mov	r3, r9
 80051d0:	f7fb f9b6 	bl	8000540 <__aeabi_dmul>
 80051d4:	a35c      	add	r3, pc, #368	; (adr r3, 8005348 <__ieee754_log+0x330>)
 80051d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051da:	f7fa fffb 	bl	80001d4 <__adddf3>
 80051de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051e2:	f7fb f9ad 	bl	8000540 <__aeabi_dmul>
 80051e6:	a35a      	add	r3, pc, #360	; (adr r3, 8005350 <__ieee754_log+0x338>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051f0:	4640      	mov	r0, r8
 80051f2:	4649      	mov	r1, r9
 80051f4:	f7fb f9a4 	bl	8000540 <__aeabi_dmul>
 80051f8:	a357      	add	r3, pc, #348	; (adr r3, 8005358 <__ieee754_log+0x340>)
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f7fa ffe9 	bl	80001d4 <__adddf3>
 8005202:	4642      	mov	r2, r8
 8005204:	464b      	mov	r3, r9
 8005206:	f7fb f99b 	bl	8000540 <__aeabi_dmul>
 800520a:	a355      	add	r3, pc, #340	; (adr r3, 8005360 <__ieee754_log+0x348>)
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f7fa ffe0 	bl	80001d4 <__adddf3>
 8005214:	4642      	mov	r2, r8
 8005216:	464b      	mov	r3, r9
 8005218:	f7fb f992 	bl	8000540 <__aeabi_dmul>
 800521c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8005228:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800522c:	f7fa ffd2 	bl	80001d4 <__adddf3>
 8005230:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8005234:	3551      	adds	r5, #81	; 0x51
 8005236:	4335      	orrs	r5, r6
 8005238:	2d00      	cmp	r5, #0
 800523a:	4680      	mov	r8, r0
 800523c:	4689      	mov	r9, r1
 800523e:	dd48      	ble.n	80052d2 <__ieee754_log+0x2ba>
 8005240:	2200      	movs	r2, #0
 8005242:	4b4d      	ldr	r3, [pc, #308]	; (8005378 <__ieee754_log+0x360>)
 8005244:	4650      	mov	r0, sl
 8005246:	4659      	mov	r1, fp
 8005248:	f7fb f97a 	bl	8000540 <__aeabi_dmul>
 800524c:	4652      	mov	r2, sl
 800524e:	465b      	mov	r3, fp
 8005250:	f7fb f976 	bl	8000540 <__aeabi_dmul>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4606      	mov	r6, r0
 800525a:	460f      	mov	r7, r1
 800525c:	4640      	mov	r0, r8
 800525e:	4649      	mov	r1, r9
 8005260:	f7fa ffb8 	bl	80001d4 <__adddf3>
 8005264:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005268:	f7fb f96a 	bl	8000540 <__aeabi_dmul>
 800526c:	4680      	mov	r8, r0
 800526e:	4689      	mov	r9, r1
 8005270:	b964      	cbnz	r4, 800528c <__ieee754_log+0x274>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4630      	mov	r0, r6
 8005278:	4639      	mov	r1, r7
 800527a:	f7fa ffa9 	bl	80001d0 <__aeabi_dsub>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4650      	mov	r0, sl
 8005284:	4659      	mov	r1, fp
 8005286:	f7fa ffa3 	bl	80001d0 <__aeabi_dsub>
 800528a:	e6da      	b.n	8005042 <__ieee754_log+0x2a>
 800528c:	a322      	add	r3, pc, #136	; (adr r3, 8005318 <__ieee754_log+0x300>)
 800528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005296:	f7fb f953 	bl	8000540 <__aeabi_dmul>
 800529a:	a321      	add	r3, pc, #132	; (adr r3, 8005320 <__ieee754_log+0x308>)
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	4604      	mov	r4, r0
 80052a2:	460d      	mov	r5, r1
 80052a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052a8:	f7fb f94a 	bl	8000540 <__aeabi_dmul>
 80052ac:	4642      	mov	r2, r8
 80052ae:	464b      	mov	r3, r9
 80052b0:	f7fa ff90 	bl	80001d4 <__adddf3>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4630      	mov	r0, r6
 80052ba:	4639      	mov	r1, r7
 80052bc:	f7fa ff88 	bl	80001d0 <__aeabi_dsub>
 80052c0:	4652      	mov	r2, sl
 80052c2:	465b      	mov	r3, fp
 80052c4:	f7fa ff84 	bl	80001d0 <__aeabi_dsub>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4620      	mov	r0, r4
 80052ce:	4629      	mov	r1, r5
 80052d0:	e7d9      	b.n	8005286 <__ieee754_log+0x26e>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4650      	mov	r0, sl
 80052d8:	4659      	mov	r1, fp
 80052da:	f7fa ff79 	bl	80001d0 <__aeabi_dsub>
 80052de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052e2:	f7fb f92d 	bl	8000540 <__aeabi_dmul>
 80052e6:	4606      	mov	r6, r0
 80052e8:	460f      	mov	r7, r1
 80052ea:	2c00      	cmp	r4, #0
 80052ec:	f43f af25 	beq.w	800513a <__ieee754_log+0x122>
 80052f0:	a309      	add	r3, pc, #36	; (adr r3, 8005318 <__ieee754_log+0x300>)
 80052f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052fa:	f7fb f921 	bl	8000540 <__aeabi_dmul>
 80052fe:	a308      	add	r3, pc, #32	; (adr r3, 8005320 <__ieee754_log+0x308>)
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	4604      	mov	r4, r0
 8005306:	460d      	mov	r5, r1
 8005308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800530c:	e729      	b.n	8005162 <__ieee754_log+0x14a>
 800530e:	2000      	movs	r0, #0
 8005310:	2100      	movs	r1, #0
 8005312:	e696      	b.n	8005042 <__ieee754_log+0x2a>
 8005314:	f3af 8000 	nop.w
 8005318:	fee00000 	.word	0xfee00000
 800531c:	3fe62e42 	.word	0x3fe62e42
 8005320:	35793c76 	.word	0x35793c76
 8005324:	3dea39ef 	.word	0x3dea39ef
 8005328:	55555555 	.word	0x55555555
 800532c:	3fd55555 	.word	0x3fd55555
 8005330:	df3e5244 	.word	0xdf3e5244
 8005334:	3fc2f112 	.word	0x3fc2f112
 8005338:	96cb03de 	.word	0x96cb03de
 800533c:	3fc74664 	.word	0x3fc74664
 8005340:	94229359 	.word	0x94229359
 8005344:	3fd24924 	.word	0x3fd24924
 8005348:	55555593 	.word	0x55555593
 800534c:	3fe55555 	.word	0x3fe55555
 8005350:	d078c69f 	.word	0xd078c69f
 8005354:	3fc39a09 	.word	0x3fc39a09
 8005358:	1d8e78af 	.word	0x1d8e78af
 800535c:	3fcc71c5 	.word	0x3fcc71c5
 8005360:	9997fa04 	.word	0x9997fa04
 8005364:	3fd99999 	.word	0x3fd99999
 8005368:	c3500000 	.word	0xc3500000
 800536c:	43500000 	.word	0x43500000
 8005370:	7fefffff 	.word	0x7fefffff
 8005374:	3ff00000 	.word	0x3ff00000
 8005378:	3fe00000 	.word	0x3fe00000
 800537c:	00000000 	.word	0x00000000

08005380 <__ieee754_pow>:
 8005380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005384:	b091      	sub	sp, #68	; 0x44
 8005386:	ed8d 1b00 	vstr	d1, [sp]
 800538a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800538e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005392:	ea58 0302 	orrs.w	r3, r8, r2
 8005396:	ec57 6b10 	vmov	r6, r7, d0
 800539a:	f000 84be 	beq.w	8005d1a <__ieee754_pow+0x99a>
 800539e:	4b7a      	ldr	r3, [pc, #488]	; (8005588 <__ieee754_pow+0x208>)
 80053a0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80053a4:	429c      	cmp	r4, r3
 80053a6:	463d      	mov	r5, r7
 80053a8:	ee10 aa10 	vmov	sl, s0
 80053ac:	dc09      	bgt.n	80053c2 <__ieee754_pow+0x42>
 80053ae:	d103      	bne.n	80053b8 <__ieee754_pow+0x38>
 80053b0:	b93e      	cbnz	r6, 80053c2 <__ieee754_pow+0x42>
 80053b2:	45a0      	cmp	r8, r4
 80053b4:	dc0d      	bgt.n	80053d2 <__ieee754_pow+0x52>
 80053b6:	e001      	b.n	80053bc <__ieee754_pow+0x3c>
 80053b8:	4598      	cmp	r8, r3
 80053ba:	dc02      	bgt.n	80053c2 <__ieee754_pow+0x42>
 80053bc:	4598      	cmp	r8, r3
 80053be:	d10e      	bne.n	80053de <__ieee754_pow+0x5e>
 80053c0:	b16a      	cbz	r2, 80053de <__ieee754_pow+0x5e>
 80053c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80053c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80053ca:	ea54 030a 	orrs.w	r3, r4, sl
 80053ce:	f000 84a4 	beq.w	8005d1a <__ieee754_pow+0x99a>
 80053d2:	486e      	ldr	r0, [pc, #440]	; (800558c <__ieee754_pow+0x20c>)
 80053d4:	b011      	add	sp, #68	; 0x44
 80053d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053da:	f000 bda5 	b.w	8005f28 <nan>
 80053de:	2d00      	cmp	r5, #0
 80053e0:	da53      	bge.n	800548a <__ieee754_pow+0x10a>
 80053e2:	4b6b      	ldr	r3, [pc, #428]	; (8005590 <__ieee754_pow+0x210>)
 80053e4:	4598      	cmp	r8, r3
 80053e6:	dc4d      	bgt.n	8005484 <__ieee754_pow+0x104>
 80053e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80053ec:	4598      	cmp	r8, r3
 80053ee:	dd4c      	ble.n	800548a <__ieee754_pow+0x10a>
 80053f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80053f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80053f8:	2b14      	cmp	r3, #20
 80053fa:	dd26      	ble.n	800544a <__ieee754_pow+0xca>
 80053fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005400:	fa22 f103 	lsr.w	r1, r2, r3
 8005404:	fa01 f303 	lsl.w	r3, r1, r3
 8005408:	4293      	cmp	r3, r2
 800540a:	d13e      	bne.n	800548a <__ieee754_pow+0x10a>
 800540c:	f001 0101 	and.w	r1, r1, #1
 8005410:	f1c1 0b02 	rsb	fp, r1, #2
 8005414:	2a00      	cmp	r2, #0
 8005416:	d15b      	bne.n	80054d0 <__ieee754_pow+0x150>
 8005418:	4b5b      	ldr	r3, [pc, #364]	; (8005588 <__ieee754_pow+0x208>)
 800541a:	4598      	cmp	r8, r3
 800541c:	d124      	bne.n	8005468 <__ieee754_pow+0xe8>
 800541e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005422:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005426:	ea53 030a 	orrs.w	r3, r3, sl
 800542a:	f000 8476 	beq.w	8005d1a <__ieee754_pow+0x99a>
 800542e:	4b59      	ldr	r3, [pc, #356]	; (8005594 <__ieee754_pow+0x214>)
 8005430:	429c      	cmp	r4, r3
 8005432:	dd2d      	ble.n	8005490 <__ieee754_pow+0x110>
 8005434:	f1b9 0f00 	cmp.w	r9, #0
 8005438:	f280 8473 	bge.w	8005d22 <__ieee754_pow+0x9a2>
 800543c:	2000      	movs	r0, #0
 800543e:	2100      	movs	r1, #0
 8005440:	ec41 0b10 	vmov	d0, r0, r1
 8005444:	b011      	add	sp, #68	; 0x44
 8005446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544a:	2a00      	cmp	r2, #0
 800544c:	d13e      	bne.n	80054cc <__ieee754_pow+0x14c>
 800544e:	f1c3 0314 	rsb	r3, r3, #20
 8005452:	fa48 f103 	asr.w	r1, r8, r3
 8005456:	fa01 f303 	lsl.w	r3, r1, r3
 800545a:	4543      	cmp	r3, r8
 800545c:	f040 8469 	bne.w	8005d32 <__ieee754_pow+0x9b2>
 8005460:	f001 0101 	and.w	r1, r1, #1
 8005464:	f1c1 0b02 	rsb	fp, r1, #2
 8005468:	4b4b      	ldr	r3, [pc, #300]	; (8005598 <__ieee754_pow+0x218>)
 800546a:	4598      	cmp	r8, r3
 800546c:	d118      	bne.n	80054a0 <__ieee754_pow+0x120>
 800546e:	f1b9 0f00 	cmp.w	r9, #0
 8005472:	f280 845a 	bge.w	8005d2a <__ieee754_pow+0x9aa>
 8005476:	4948      	ldr	r1, [pc, #288]	; (8005598 <__ieee754_pow+0x218>)
 8005478:	4632      	mov	r2, r6
 800547a:	463b      	mov	r3, r7
 800547c:	2000      	movs	r0, #0
 800547e:	f7fb f989 	bl	8000794 <__aeabi_ddiv>
 8005482:	e7dd      	b.n	8005440 <__ieee754_pow+0xc0>
 8005484:	f04f 0b02 	mov.w	fp, #2
 8005488:	e7c4      	b.n	8005414 <__ieee754_pow+0x94>
 800548a:	f04f 0b00 	mov.w	fp, #0
 800548e:	e7c1      	b.n	8005414 <__ieee754_pow+0x94>
 8005490:	f1b9 0f00 	cmp.w	r9, #0
 8005494:	dad2      	bge.n	800543c <__ieee754_pow+0xbc>
 8005496:	e9dd 0300 	ldrd	r0, r3, [sp]
 800549a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800549e:	e7cf      	b.n	8005440 <__ieee754_pow+0xc0>
 80054a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80054a4:	d106      	bne.n	80054b4 <__ieee754_pow+0x134>
 80054a6:	4632      	mov	r2, r6
 80054a8:	463b      	mov	r3, r7
 80054aa:	4610      	mov	r0, r2
 80054ac:	4619      	mov	r1, r3
 80054ae:	f7fb f847 	bl	8000540 <__aeabi_dmul>
 80054b2:	e7c5      	b.n	8005440 <__ieee754_pow+0xc0>
 80054b4:	4b39      	ldr	r3, [pc, #228]	; (800559c <__ieee754_pow+0x21c>)
 80054b6:	4599      	cmp	r9, r3
 80054b8:	d10a      	bne.n	80054d0 <__ieee754_pow+0x150>
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	db08      	blt.n	80054d0 <__ieee754_pow+0x150>
 80054be:	ec47 6b10 	vmov	d0, r6, r7
 80054c2:	b011      	add	sp, #68	; 0x44
 80054c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c8:	f000 bc68 	b.w	8005d9c <__ieee754_sqrt>
 80054cc:	f04f 0b00 	mov.w	fp, #0
 80054d0:	ec47 6b10 	vmov	d0, r6, r7
 80054d4:	f000 fd12 	bl	8005efc <fabs>
 80054d8:	ec51 0b10 	vmov	r0, r1, d0
 80054dc:	f1ba 0f00 	cmp.w	sl, #0
 80054e0:	d127      	bne.n	8005532 <__ieee754_pow+0x1b2>
 80054e2:	b124      	cbz	r4, 80054ee <__ieee754_pow+0x16e>
 80054e4:	4b2c      	ldr	r3, [pc, #176]	; (8005598 <__ieee754_pow+0x218>)
 80054e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d121      	bne.n	8005532 <__ieee754_pow+0x1b2>
 80054ee:	f1b9 0f00 	cmp.w	r9, #0
 80054f2:	da05      	bge.n	8005500 <__ieee754_pow+0x180>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	2000      	movs	r0, #0
 80054fa:	4927      	ldr	r1, [pc, #156]	; (8005598 <__ieee754_pow+0x218>)
 80054fc:	f7fb f94a 	bl	8000794 <__aeabi_ddiv>
 8005500:	2d00      	cmp	r5, #0
 8005502:	da9d      	bge.n	8005440 <__ieee754_pow+0xc0>
 8005504:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005508:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800550c:	ea54 030b 	orrs.w	r3, r4, fp
 8005510:	d108      	bne.n	8005524 <__ieee754_pow+0x1a4>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4610      	mov	r0, r2
 8005518:	4619      	mov	r1, r3
 800551a:	f7fa fe59 	bl	80001d0 <__aeabi_dsub>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	e7ac      	b.n	800547e <__ieee754_pow+0xfe>
 8005524:	f1bb 0f01 	cmp.w	fp, #1
 8005528:	d18a      	bne.n	8005440 <__ieee754_pow+0xc0>
 800552a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800552e:	4619      	mov	r1, r3
 8005530:	e786      	b.n	8005440 <__ieee754_pow+0xc0>
 8005532:	0fed      	lsrs	r5, r5, #31
 8005534:	1e6b      	subs	r3, r5, #1
 8005536:	930d      	str	r3, [sp, #52]	; 0x34
 8005538:	ea5b 0303 	orrs.w	r3, fp, r3
 800553c:	d102      	bne.n	8005544 <__ieee754_pow+0x1c4>
 800553e:	4632      	mov	r2, r6
 8005540:	463b      	mov	r3, r7
 8005542:	e7e8      	b.n	8005516 <__ieee754_pow+0x196>
 8005544:	4b16      	ldr	r3, [pc, #88]	; (80055a0 <__ieee754_pow+0x220>)
 8005546:	4598      	cmp	r8, r3
 8005548:	f340 80fe 	ble.w	8005748 <__ieee754_pow+0x3c8>
 800554c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005550:	4598      	cmp	r8, r3
 8005552:	dd0a      	ble.n	800556a <__ieee754_pow+0x1ea>
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <__ieee754_pow+0x214>)
 8005556:	429c      	cmp	r4, r3
 8005558:	dc0d      	bgt.n	8005576 <__ieee754_pow+0x1f6>
 800555a:	f1b9 0f00 	cmp.w	r9, #0
 800555e:	f6bf af6d 	bge.w	800543c <__ieee754_pow+0xbc>
 8005562:	a307      	add	r3, pc, #28	; (adr r3, 8005580 <__ieee754_pow+0x200>)
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	e79f      	b.n	80054aa <__ieee754_pow+0x12a>
 800556a:	4b0e      	ldr	r3, [pc, #56]	; (80055a4 <__ieee754_pow+0x224>)
 800556c:	429c      	cmp	r4, r3
 800556e:	ddf4      	ble.n	800555a <__ieee754_pow+0x1da>
 8005570:	4b09      	ldr	r3, [pc, #36]	; (8005598 <__ieee754_pow+0x218>)
 8005572:	429c      	cmp	r4, r3
 8005574:	dd18      	ble.n	80055a8 <__ieee754_pow+0x228>
 8005576:	f1b9 0f00 	cmp.w	r9, #0
 800557a:	dcf2      	bgt.n	8005562 <__ieee754_pow+0x1e2>
 800557c:	e75e      	b.n	800543c <__ieee754_pow+0xbc>
 800557e:	bf00      	nop
 8005580:	8800759c 	.word	0x8800759c
 8005584:	7e37e43c 	.word	0x7e37e43c
 8005588:	7ff00000 	.word	0x7ff00000
 800558c:	08006183 	.word	0x08006183
 8005590:	433fffff 	.word	0x433fffff
 8005594:	3fefffff 	.word	0x3fefffff
 8005598:	3ff00000 	.word	0x3ff00000
 800559c:	3fe00000 	.word	0x3fe00000
 80055a0:	41e00000 	.word	0x41e00000
 80055a4:	3feffffe 	.word	0x3feffffe
 80055a8:	2200      	movs	r2, #0
 80055aa:	4b63      	ldr	r3, [pc, #396]	; (8005738 <__ieee754_pow+0x3b8>)
 80055ac:	f7fa fe10 	bl	80001d0 <__aeabi_dsub>
 80055b0:	a355      	add	r3, pc, #340	; (adr r3, 8005708 <__ieee754_pow+0x388>)
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	4604      	mov	r4, r0
 80055b8:	460d      	mov	r5, r1
 80055ba:	f7fa ffc1 	bl	8000540 <__aeabi_dmul>
 80055be:	a354      	add	r3, pc, #336	; (adr r3, 8005710 <__ieee754_pow+0x390>)
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	4606      	mov	r6, r0
 80055c6:	460f      	mov	r7, r1
 80055c8:	4620      	mov	r0, r4
 80055ca:	4629      	mov	r1, r5
 80055cc:	f7fa ffb8 	bl	8000540 <__aeabi_dmul>
 80055d0:	2200      	movs	r2, #0
 80055d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055d6:	4b59      	ldr	r3, [pc, #356]	; (800573c <__ieee754_pow+0x3bc>)
 80055d8:	4620      	mov	r0, r4
 80055da:	4629      	mov	r1, r5
 80055dc:	f7fa ffb0 	bl	8000540 <__aeabi_dmul>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	a14c      	add	r1, pc, #304	; (adr r1, 8005718 <__ieee754_pow+0x398>)
 80055e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055ea:	f7fa fdf1 	bl	80001d0 <__aeabi_dsub>
 80055ee:	4622      	mov	r2, r4
 80055f0:	462b      	mov	r3, r5
 80055f2:	f7fa ffa5 	bl	8000540 <__aeabi_dmul>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	2000      	movs	r0, #0
 80055fc:	4950      	ldr	r1, [pc, #320]	; (8005740 <__ieee754_pow+0x3c0>)
 80055fe:	f7fa fde7 	bl	80001d0 <__aeabi_dsub>
 8005602:	4622      	mov	r2, r4
 8005604:	462b      	mov	r3, r5
 8005606:	4680      	mov	r8, r0
 8005608:	4689      	mov	r9, r1
 800560a:	4620      	mov	r0, r4
 800560c:	4629      	mov	r1, r5
 800560e:	f7fa ff97 	bl	8000540 <__aeabi_dmul>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4640      	mov	r0, r8
 8005618:	4649      	mov	r1, r9
 800561a:	f7fa ff91 	bl	8000540 <__aeabi_dmul>
 800561e:	a340      	add	r3, pc, #256	; (adr r3, 8005720 <__ieee754_pow+0x3a0>)
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	f7fa ff8c 	bl	8000540 <__aeabi_dmul>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005630:	f7fa fdce 	bl	80001d0 <__aeabi_dsub>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4604      	mov	r4, r0
 800563a:	460d      	mov	r5, r1
 800563c:	4630      	mov	r0, r6
 800563e:	4639      	mov	r1, r7
 8005640:	f7fa fdc8 	bl	80001d4 <__adddf3>
 8005644:	2000      	movs	r0, #0
 8005646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800564a:	4632      	mov	r2, r6
 800564c:	463b      	mov	r3, r7
 800564e:	f7fa fdbf 	bl	80001d0 <__aeabi_dsub>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4620      	mov	r0, r4
 8005658:	4629      	mov	r1, r5
 800565a:	f7fa fdb9 	bl	80001d0 <__aeabi_dsub>
 800565e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005660:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8005664:	4313      	orrs	r3, r2
 8005666:	4606      	mov	r6, r0
 8005668:	460f      	mov	r7, r1
 800566a:	f040 81eb 	bne.w	8005a44 <__ieee754_pow+0x6c4>
 800566e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005728 <__ieee754_pow+0x3a8>
 8005672:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005676:	2400      	movs	r4, #0
 8005678:	4622      	mov	r2, r4
 800567a:	462b      	mov	r3, r5
 800567c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005680:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005684:	f7fa fda4 	bl	80001d0 <__aeabi_dsub>
 8005688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800568c:	f7fa ff58 	bl	8000540 <__aeabi_dmul>
 8005690:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005694:	4680      	mov	r8, r0
 8005696:	4689      	mov	r9, r1
 8005698:	4630      	mov	r0, r6
 800569a:	4639      	mov	r1, r7
 800569c:	f7fa ff50 	bl	8000540 <__aeabi_dmul>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4640      	mov	r0, r8
 80056a6:	4649      	mov	r1, r9
 80056a8:	f7fa fd94 	bl	80001d4 <__adddf3>
 80056ac:	4622      	mov	r2, r4
 80056ae:	462b      	mov	r3, r5
 80056b0:	4680      	mov	r8, r0
 80056b2:	4689      	mov	r9, r1
 80056b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056b8:	f7fa ff42 	bl	8000540 <__aeabi_dmul>
 80056bc:	460b      	mov	r3, r1
 80056be:	4604      	mov	r4, r0
 80056c0:	460d      	mov	r5, r1
 80056c2:	4602      	mov	r2, r0
 80056c4:	4649      	mov	r1, r9
 80056c6:	4640      	mov	r0, r8
 80056c8:	e9cd 4500 	strd	r4, r5, [sp]
 80056cc:	f7fa fd82 	bl	80001d4 <__adddf3>
 80056d0:	4b1c      	ldr	r3, [pc, #112]	; (8005744 <__ieee754_pow+0x3c4>)
 80056d2:	4299      	cmp	r1, r3
 80056d4:	4606      	mov	r6, r0
 80056d6:	460f      	mov	r7, r1
 80056d8:	468b      	mov	fp, r1
 80056da:	f340 82f7 	ble.w	8005ccc <__ieee754_pow+0x94c>
 80056de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80056e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80056e6:	4303      	orrs	r3, r0
 80056e8:	f000 81ea 	beq.w	8005ac0 <__ieee754_pow+0x740>
 80056ec:	a310      	add	r3, pc, #64	; (adr r3, 8005730 <__ieee754_pow+0x3b0>)
 80056ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056f6:	f7fa ff23 	bl	8000540 <__aeabi_dmul>
 80056fa:	a30d      	add	r3, pc, #52	; (adr r3, 8005730 <__ieee754_pow+0x3b0>)
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	e6d5      	b.n	80054ae <__ieee754_pow+0x12e>
 8005702:	bf00      	nop
 8005704:	f3af 8000 	nop.w
 8005708:	60000000 	.word	0x60000000
 800570c:	3ff71547 	.word	0x3ff71547
 8005710:	f85ddf44 	.word	0xf85ddf44
 8005714:	3e54ae0b 	.word	0x3e54ae0b
 8005718:	55555555 	.word	0x55555555
 800571c:	3fd55555 	.word	0x3fd55555
 8005720:	652b82fe 	.word	0x652b82fe
 8005724:	3ff71547 	.word	0x3ff71547
 8005728:	00000000 	.word	0x00000000
 800572c:	bff00000 	.word	0xbff00000
 8005730:	8800759c 	.word	0x8800759c
 8005734:	7e37e43c 	.word	0x7e37e43c
 8005738:	3ff00000 	.word	0x3ff00000
 800573c:	3fd00000 	.word	0x3fd00000
 8005740:	3fe00000 	.word	0x3fe00000
 8005744:	408fffff 	.word	0x408fffff
 8005748:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	da05      	bge.n	800575e <__ieee754_pow+0x3de>
 8005752:	4bd3      	ldr	r3, [pc, #844]	; (8005aa0 <__ieee754_pow+0x720>)
 8005754:	f7fa fef4 	bl	8000540 <__aeabi_dmul>
 8005758:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800575c:	460c      	mov	r4, r1
 800575e:	1523      	asrs	r3, r4, #20
 8005760:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005764:	4413      	add	r3, r2
 8005766:	9309      	str	r3, [sp, #36]	; 0x24
 8005768:	4bce      	ldr	r3, [pc, #824]	; (8005aa4 <__ieee754_pow+0x724>)
 800576a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800576e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005772:	429c      	cmp	r4, r3
 8005774:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005778:	dd08      	ble.n	800578c <__ieee754_pow+0x40c>
 800577a:	4bcb      	ldr	r3, [pc, #812]	; (8005aa8 <__ieee754_pow+0x728>)
 800577c:	429c      	cmp	r4, r3
 800577e:	f340 815e 	ble.w	8005a3e <__ieee754_pow+0x6be>
 8005782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005784:	3301      	adds	r3, #1
 8005786:	9309      	str	r3, [sp, #36]	; 0x24
 8005788:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800578c:	f04f 0a00 	mov.w	sl, #0
 8005790:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005794:	930c      	str	r3, [sp, #48]	; 0x30
 8005796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005798:	4bc4      	ldr	r3, [pc, #784]	; (8005aac <__ieee754_pow+0x72c>)
 800579a:	4413      	add	r3, r2
 800579c:	ed93 7b00 	vldr	d7, [r3]
 80057a0:	4629      	mov	r1, r5
 80057a2:	ec53 2b17 	vmov	r2, r3, d7
 80057a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80057aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057ae:	f7fa fd0f 	bl	80001d0 <__aeabi_dsub>
 80057b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057b6:	4606      	mov	r6, r0
 80057b8:	460f      	mov	r7, r1
 80057ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057be:	f7fa fd09 	bl	80001d4 <__adddf3>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	2000      	movs	r0, #0
 80057c8:	49b9      	ldr	r1, [pc, #740]	; (8005ab0 <__ieee754_pow+0x730>)
 80057ca:	f7fa ffe3 	bl	8000794 <__aeabi_ddiv>
 80057ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4630      	mov	r0, r6
 80057d8:	4639      	mov	r1, r7
 80057da:	f7fa feb1 	bl	8000540 <__aeabi_dmul>
 80057de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80057e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80057ea:	2300      	movs	r3, #0
 80057ec:	9302      	str	r3, [sp, #8]
 80057ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80057f2:	106d      	asrs	r5, r5, #1
 80057f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80057f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80057fc:	2200      	movs	r2, #0
 80057fe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005802:	4640      	mov	r0, r8
 8005804:	4649      	mov	r1, r9
 8005806:	4614      	mov	r4, r2
 8005808:	461d      	mov	r5, r3
 800580a:	f7fa fe99 	bl	8000540 <__aeabi_dmul>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4630      	mov	r0, r6
 8005814:	4639      	mov	r1, r7
 8005816:	f7fa fcdb 	bl	80001d0 <__aeabi_dsub>
 800581a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800581e:	4606      	mov	r6, r0
 8005820:	460f      	mov	r7, r1
 8005822:	4620      	mov	r0, r4
 8005824:	4629      	mov	r1, r5
 8005826:	f7fa fcd3 	bl	80001d0 <__aeabi_dsub>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005832:	f7fa fccd 	bl	80001d0 <__aeabi_dsub>
 8005836:	4642      	mov	r2, r8
 8005838:	464b      	mov	r3, r9
 800583a:	f7fa fe81 	bl	8000540 <__aeabi_dmul>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4630      	mov	r0, r6
 8005844:	4639      	mov	r1, r7
 8005846:	f7fa fcc3 	bl	80001d0 <__aeabi_dsub>
 800584a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800584e:	f7fa fe77 	bl	8000540 <__aeabi_dmul>
 8005852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005856:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800585a:	4610      	mov	r0, r2
 800585c:	4619      	mov	r1, r3
 800585e:	f7fa fe6f 	bl	8000540 <__aeabi_dmul>
 8005862:	a37b      	add	r3, pc, #492	; (adr r3, 8005a50 <__ieee754_pow+0x6d0>)
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	4604      	mov	r4, r0
 800586a:	460d      	mov	r5, r1
 800586c:	f7fa fe68 	bl	8000540 <__aeabi_dmul>
 8005870:	a379      	add	r3, pc, #484	; (adr r3, 8005a58 <__ieee754_pow+0x6d8>)
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	f7fa fcad 	bl	80001d4 <__adddf3>
 800587a:	4622      	mov	r2, r4
 800587c:	462b      	mov	r3, r5
 800587e:	f7fa fe5f 	bl	8000540 <__aeabi_dmul>
 8005882:	a377      	add	r3, pc, #476	; (adr r3, 8005a60 <__ieee754_pow+0x6e0>)
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	f7fa fca4 	bl	80001d4 <__adddf3>
 800588c:	4622      	mov	r2, r4
 800588e:	462b      	mov	r3, r5
 8005890:	f7fa fe56 	bl	8000540 <__aeabi_dmul>
 8005894:	a374      	add	r3, pc, #464	; (adr r3, 8005a68 <__ieee754_pow+0x6e8>)
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	f7fa fc9b 	bl	80001d4 <__adddf3>
 800589e:	4622      	mov	r2, r4
 80058a0:	462b      	mov	r3, r5
 80058a2:	f7fa fe4d 	bl	8000540 <__aeabi_dmul>
 80058a6:	a372      	add	r3, pc, #456	; (adr r3, 8005a70 <__ieee754_pow+0x6f0>)
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f7fa fc92 	bl	80001d4 <__adddf3>
 80058b0:	4622      	mov	r2, r4
 80058b2:	462b      	mov	r3, r5
 80058b4:	f7fa fe44 	bl	8000540 <__aeabi_dmul>
 80058b8:	a36f      	add	r3, pc, #444	; (adr r3, 8005a78 <__ieee754_pow+0x6f8>)
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f7fa fc89 	bl	80001d4 <__adddf3>
 80058c2:	4622      	mov	r2, r4
 80058c4:	4606      	mov	r6, r0
 80058c6:	460f      	mov	r7, r1
 80058c8:	462b      	mov	r3, r5
 80058ca:	4620      	mov	r0, r4
 80058cc:	4629      	mov	r1, r5
 80058ce:	f7fa fe37 	bl	8000540 <__aeabi_dmul>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4630      	mov	r0, r6
 80058d8:	4639      	mov	r1, r7
 80058da:	f7fa fe31 	bl	8000540 <__aeabi_dmul>
 80058de:	4642      	mov	r2, r8
 80058e0:	4604      	mov	r4, r0
 80058e2:	460d      	mov	r5, r1
 80058e4:	464b      	mov	r3, r9
 80058e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058ea:	f7fa fc73 	bl	80001d4 <__adddf3>
 80058ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058f2:	f7fa fe25 	bl	8000540 <__aeabi_dmul>
 80058f6:	4622      	mov	r2, r4
 80058f8:	462b      	mov	r3, r5
 80058fa:	f7fa fc6b 	bl	80001d4 <__adddf3>
 80058fe:	4642      	mov	r2, r8
 8005900:	4606      	mov	r6, r0
 8005902:	460f      	mov	r7, r1
 8005904:	464b      	mov	r3, r9
 8005906:	4640      	mov	r0, r8
 8005908:	4649      	mov	r1, r9
 800590a:	f7fa fe19 	bl	8000540 <__aeabi_dmul>
 800590e:	2200      	movs	r2, #0
 8005910:	4b68      	ldr	r3, [pc, #416]	; (8005ab4 <__ieee754_pow+0x734>)
 8005912:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005916:	f7fa fc5d 	bl	80001d4 <__adddf3>
 800591a:	4632      	mov	r2, r6
 800591c:	463b      	mov	r3, r7
 800591e:	f7fa fc59 	bl	80001d4 <__adddf3>
 8005922:	9802      	ldr	r0, [sp, #8]
 8005924:	460d      	mov	r5, r1
 8005926:	4604      	mov	r4, r0
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4640      	mov	r0, r8
 800592e:	4649      	mov	r1, r9
 8005930:	f7fa fe06 	bl	8000540 <__aeabi_dmul>
 8005934:	2200      	movs	r2, #0
 8005936:	4680      	mov	r8, r0
 8005938:	4689      	mov	r9, r1
 800593a:	4b5e      	ldr	r3, [pc, #376]	; (8005ab4 <__ieee754_pow+0x734>)
 800593c:	4620      	mov	r0, r4
 800593e:	4629      	mov	r1, r5
 8005940:	f7fa fc46 	bl	80001d0 <__aeabi_dsub>
 8005944:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005948:	f7fa fc42 	bl	80001d0 <__aeabi_dsub>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4630      	mov	r0, r6
 8005952:	4639      	mov	r1, r7
 8005954:	f7fa fc3c 	bl	80001d0 <__aeabi_dsub>
 8005958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800595c:	f7fa fdf0 	bl	8000540 <__aeabi_dmul>
 8005960:	4622      	mov	r2, r4
 8005962:	4606      	mov	r6, r0
 8005964:	460f      	mov	r7, r1
 8005966:	462b      	mov	r3, r5
 8005968:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800596c:	f7fa fde8 	bl	8000540 <__aeabi_dmul>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4630      	mov	r0, r6
 8005976:	4639      	mov	r1, r7
 8005978:	f7fa fc2c 	bl	80001d4 <__adddf3>
 800597c:	4606      	mov	r6, r0
 800597e:	460f      	mov	r7, r1
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4640      	mov	r0, r8
 8005986:	4649      	mov	r1, r9
 8005988:	f7fa fc24 	bl	80001d4 <__adddf3>
 800598c:	9802      	ldr	r0, [sp, #8]
 800598e:	a33c      	add	r3, pc, #240	; (adr r3, 8005a80 <__ieee754_pow+0x700>)
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	4604      	mov	r4, r0
 8005996:	460d      	mov	r5, r1
 8005998:	f7fa fdd2 	bl	8000540 <__aeabi_dmul>
 800599c:	4642      	mov	r2, r8
 800599e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059a2:	464b      	mov	r3, r9
 80059a4:	4620      	mov	r0, r4
 80059a6:	4629      	mov	r1, r5
 80059a8:	f7fa fc12 	bl	80001d0 <__aeabi_dsub>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f7fa fc0c 	bl	80001d0 <__aeabi_dsub>
 80059b8:	a333      	add	r3, pc, #204	; (adr r3, 8005a88 <__ieee754_pow+0x708>)
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f7fa fdbf 	bl	8000540 <__aeabi_dmul>
 80059c2:	a333      	add	r3, pc, #204	; (adr r3, 8005a90 <__ieee754_pow+0x710>)
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	4606      	mov	r6, r0
 80059ca:	460f      	mov	r7, r1
 80059cc:	4620      	mov	r0, r4
 80059ce:	4629      	mov	r1, r5
 80059d0:	f7fa fdb6 	bl	8000540 <__aeabi_dmul>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4630      	mov	r0, r6
 80059da:	4639      	mov	r1, r7
 80059dc:	f7fa fbfa 	bl	80001d4 <__adddf3>
 80059e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059e2:	4b35      	ldr	r3, [pc, #212]	; (8005ab8 <__ieee754_pow+0x738>)
 80059e4:	4413      	add	r3, r2
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	f7fa fbf3 	bl	80001d4 <__adddf3>
 80059ee:	4604      	mov	r4, r0
 80059f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059f2:	460d      	mov	r5, r1
 80059f4:	f7fa fd3a 	bl	800046c <__aeabi_i2d>
 80059f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059fa:	4b30      	ldr	r3, [pc, #192]	; (8005abc <__ieee754_pow+0x73c>)
 80059fc:	4413      	add	r3, r2
 80059fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a02:	4606      	mov	r6, r0
 8005a04:	460f      	mov	r7, r1
 8005a06:	4622      	mov	r2, r4
 8005a08:	462b      	mov	r3, r5
 8005a0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a0e:	f7fa fbe1 	bl	80001d4 <__adddf3>
 8005a12:	4642      	mov	r2, r8
 8005a14:	464b      	mov	r3, r9
 8005a16:	f7fa fbdd 	bl	80001d4 <__adddf3>
 8005a1a:	4632      	mov	r2, r6
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	f7fa fbd9 	bl	80001d4 <__adddf3>
 8005a22:	9802      	ldr	r0, [sp, #8]
 8005a24:	4632      	mov	r2, r6
 8005a26:	463b      	mov	r3, r7
 8005a28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a2c:	f7fa fbd0 	bl	80001d0 <__aeabi_dsub>
 8005a30:	4642      	mov	r2, r8
 8005a32:	464b      	mov	r3, r9
 8005a34:	f7fa fbcc 	bl	80001d0 <__aeabi_dsub>
 8005a38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a3c:	e607      	b.n	800564e <__ieee754_pow+0x2ce>
 8005a3e:	f04f 0a01 	mov.w	sl, #1
 8005a42:	e6a5      	b.n	8005790 <__ieee754_pow+0x410>
 8005a44:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005a98 <__ieee754_pow+0x718>
 8005a48:	e613      	b.n	8005672 <__ieee754_pow+0x2f2>
 8005a4a:	bf00      	nop
 8005a4c:	f3af 8000 	nop.w
 8005a50:	4a454eef 	.word	0x4a454eef
 8005a54:	3fca7e28 	.word	0x3fca7e28
 8005a58:	93c9db65 	.word	0x93c9db65
 8005a5c:	3fcd864a 	.word	0x3fcd864a
 8005a60:	a91d4101 	.word	0xa91d4101
 8005a64:	3fd17460 	.word	0x3fd17460
 8005a68:	518f264d 	.word	0x518f264d
 8005a6c:	3fd55555 	.word	0x3fd55555
 8005a70:	db6fabff 	.word	0xdb6fabff
 8005a74:	3fdb6db6 	.word	0x3fdb6db6
 8005a78:	33333303 	.word	0x33333303
 8005a7c:	3fe33333 	.word	0x3fe33333
 8005a80:	e0000000 	.word	0xe0000000
 8005a84:	3feec709 	.word	0x3feec709
 8005a88:	dc3a03fd 	.word	0xdc3a03fd
 8005a8c:	3feec709 	.word	0x3feec709
 8005a90:	145b01f5 	.word	0x145b01f5
 8005a94:	be3e2fe0 	.word	0xbe3e2fe0
 8005a98:	00000000 	.word	0x00000000
 8005a9c:	3ff00000 	.word	0x3ff00000
 8005aa0:	43400000 	.word	0x43400000
 8005aa4:	0003988e 	.word	0x0003988e
 8005aa8:	000bb679 	.word	0x000bb679
 8005aac:	08006188 	.word	0x08006188
 8005ab0:	3ff00000 	.word	0x3ff00000
 8005ab4:	40080000 	.word	0x40080000
 8005ab8:	080061a8 	.word	0x080061a8
 8005abc:	08006198 	.word	0x08006198
 8005ac0:	a3b4      	add	r3, pc, #720	; (adr r3, 8005d94 <__ieee754_pow+0xa14>)
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	4649      	mov	r1, r9
 8005aca:	f7fa fb83 	bl	80001d4 <__adddf3>
 8005ace:	4622      	mov	r2, r4
 8005ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	4639      	mov	r1, r7
 8005ada:	f7fa fb79 	bl	80001d0 <__aeabi_dsub>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ae6:	f7fa ffbb 	bl	8000a60 <__aeabi_dcmpgt>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	f47f adfe 	bne.w	80056ec <__ieee754_pow+0x36c>
 8005af0:	4aa3      	ldr	r2, [pc, #652]	; (8005d80 <__ieee754_pow+0xa00>)
 8005af2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005af6:	4293      	cmp	r3, r2
 8005af8:	f340 810a 	ble.w	8005d10 <__ieee754_pow+0x990>
 8005afc:	151b      	asrs	r3, r3, #20
 8005afe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005b02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005b06:	fa4a f303 	asr.w	r3, sl, r3
 8005b0a:	445b      	add	r3, fp
 8005b0c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005b10:	4e9c      	ldr	r6, [pc, #624]	; (8005d84 <__ieee754_pow+0xa04>)
 8005b12:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005b16:	4116      	asrs	r6, r2
 8005b18:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	ea23 0106 	bic.w	r1, r3, r6
 8005b22:	f1c2 0214 	rsb	r2, r2, #20
 8005b26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005b2a:	fa4a fa02 	asr.w	sl, sl, r2
 8005b2e:	f1bb 0f00 	cmp.w	fp, #0
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4620      	mov	r0, r4
 8005b38:	4629      	mov	r1, r5
 8005b3a:	bfb8      	it	lt
 8005b3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8005b40:	f7fa fb46 	bl	80001d0 <__aeabi_dsub>
 8005b44:	e9cd 0100 	strd	r0, r1, [sp]
 8005b48:	4642      	mov	r2, r8
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b50:	f7fa fb40 	bl	80001d4 <__adddf3>
 8005b54:	2000      	movs	r0, #0
 8005b56:	a378      	add	r3, pc, #480	; (adr r3, 8005d38 <__ieee754_pow+0x9b8>)
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	460d      	mov	r5, r1
 8005b60:	f7fa fcee 	bl	8000540 <__aeabi_dmul>
 8005b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b68:	4606      	mov	r6, r0
 8005b6a:	460f      	mov	r7, r1
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	4629      	mov	r1, r5
 8005b70:	f7fa fb2e 	bl	80001d0 <__aeabi_dsub>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4640      	mov	r0, r8
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	f7fa fb28 	bl	80001d0 <__aeabi_dsub>
 8005b80:	a36f      	add	r3, pc, #444	; (adr r3, 8005d40 <__ieee754_pow+0x9c0>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa fcdb 	bl	8000540 <__aeabi_dmul>
 8005b8a:	a36f      	add	r3, pc, #444	; (adr r3, 8005d48 <__ieee754_pow+0x9c8>)
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	4680      	mov	r8, r0
 8005b92:	4689      	mov	r9, r1
 8005b94:	4620      	mov	r0, r4
 8005b96:	4629      	mov	r1, r5
 8005b98:	f7fa fcd2 	bl	8000540 <__aeabi_dmul>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	f7fa fb16 	bl	80001d4 <__adddf3>
 8005ba8:	4604      	mov	r4, r0
 8005baa:	460d      	mov	r5, r1
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	f7fa fb0e 	bl	80001d4 <__adddf3>
 8005bb8:	4632      	mov	r2, r6
 8005bba:	463b      	mov	r3, r7
 8005bbc:	4680      	mov	r8, r0
 8005bbe:	4689      	mov	r9, r1
 8005bc0:	f7fa fb06 	bl	80001d0 <__aeabi_dsub>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4620      	mov	r0, r4
 8005bca:	4629      	mov	r1, r5
 8005bcc:	f7fa fb00 	bl	80001d0 <__aeabi_dsub>
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	4606      	mov	r6, r0
 8005bd4:	460f      	mov	r7, r1
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	4640      	mov	r0, r8
 8005bda:	4649      	mov	r1, r9
 8005bdc:	f7fa fcb0 	bl	8000540 <__aeabi_dmul>
 8005be0:	a35b      	add	r3, pc, #364	; (adr r3, 8005d50 <__ieee754_pow+0x9d0>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	4604      	mov	r4, r0
 8005be8:	460d      	mov	r5, r1
 8005bea:	f7fa fca9 	bl	8000540 <__aeabi_dmul>
 8005bee:	a35a      	add	r3, pc, #360	; (adr r3, 8005d58 <__ieee754_pow+0x9d8>)
 8005bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf4:	f7fa faec 	bl	80001d0 <__aeabi_dsub>
 8005bf8:	4622      	mov	r2, r4
 8005bfa:	462b      	mov	r3, r5
 8005bfc:	f7fa fca0 	bl	8000540 <__aeabi_dmul>
 8005c00:	a357      	add	r3, pc, #348	; (adr r3, 8005d60 <__ieee754_pow+0x9e0>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f7fa fae5 	bl	80001d4 <__adddf3>
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	462b      	mov	r3, r5
 8005c0e:	f7fa fc97 	bl	8000540 <__aeabi_dmul>
 8005c12:	a355      	add	r3, pc, #340	; (adr r3, 8005d68 <__ieee754_pow+0x9e8>)
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f7fa fada 	bl	80001d0 <__aeabi_dsub>
 8005c1c:	4622      	mov	r2, r4
 8005c1e:	462b      	mov	r3, r5
 8005c20:	f7fa fc8e 	bl	8000540 <__aeabi_dmul>
 8005c24:	a352      	add	r3, pc, #328	; (adr r3, 8005d70 <__ieee754_pow+0x9f0>)
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	f7fa fad3 	bl	80001d4 <__adddf3>
 8005c2e:	4622      	mov	r2, r4
 8005c30:	462b      	mov	r3, r5
 8005c32:	f7fa fc85 	bl	8000540 <__aeabi_dmul>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	f7fa fac7 	bl	80001d0 <__aeabi_dsub>
 8005c42:	4604      	mov	r4, r0
 8005c44:	460d      	mov	r5, r1
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	f7fa fc77 	bl	8000540 <__aeabi_dmul>
 8005c52:	2200      	movs	r2, #0
 8005c54:	e9cd 0100 	strd	r0, r1, [sp]
 8005c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	4629      	mov	r1, r5
 8005c60:	f7fa fab6 	bl	80001d0 <__aeabi_dsub>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c6c:	f7fa fd92 	bl	8000794 <__aeabi_ddiv>
 8005c70:	4632      	mov	r2, r6
 8005c72:	4604      	mov	r4, r0
 8005c74:	460d      	mov	r5, r1
 8005c76:	463b      	mov	r3, r7
 8005c78:	4640      	mov	r0, r8
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	f7fa fc60 	bl	8000540 <__aeabi_dmul>
 8005c80:	4632      	mov	r2, r6
 8005c82:	463b      	mov	r3, r7
 8005c84:	f7fa faa6 	bl	80001d4 <__adddf3>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4629      	mov	r1, r5
 8005c90:	f7fa fa9e 	bl	80001d0 <__aeabi_dsub>
 8005c94:	4642      	mov	r2, r8
 8005c96:	464b      	mov	r3, r9
 8005c98:	f7fa fa9a 	bl	80001d0 <__aeabi_dsub>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	4939      	ldr	r1, [pc, #228]	; (8005d88 <__ieee754_pow+0xa08>)
 8005ca4:	f7fa fa94 	bl	80001d0 <__aeabi_dsub>
 8005ca8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005cac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	da2f      	bge.n	8005d16 <__ieee754_pow+0x996>
 8005cb6:	4650      	mov	r0, sl
 8005cb8:	ec43 2b10 	vmov	d0, r2, r3
 8005cbc:	f000 f9c0 	bl	8006040 <scalbn>
 8005cc0:	ec51 0b10 	vmov	r0, r1, d0
 8005cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cc8:	f7ff bbf1 	b.w	80054ae <__ieee754_pow+0x12e>
 8005ccc:	4b2f      	ldr	r3, [pc, #188]	; (8005d8c <__ieee754_pow+0xa0c>)
 8005cce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005cd2:	429e      	cmp	r6, r3
 8005cd4:	f77f af0c 	ble.w	8005af0 <__ieee754_pow+0x770>
 8005cd8:	4b2d      	ldr	r3, [pc, #180]	; (8005d90 <__ieee754_pow+0xa10>)
 8005cda:	440b      	add	r3, r1
 8005cdc:	4303      	orrs	r3, r0
 8005cde:	d00b      	beq.n	8005cf8 <__ieee754_pow+0x978>
 8005ce0:	a325      	add	r3, pc, #148	; (adr r3, 8005d78 <__ieee754_pow+0x9f8>)
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cea:	f7fa fc29 	bl	8000540 <__aeabi_dmul>
 8005cee:	a322      	add	r3, pc, #136	; (adr r3, 8005d78 <__ieee754_pow+0x9f8>)
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f7ff bbdb 	b.w	80054ae <__ieee754_pow+0x12e>
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	462b      	mov	r3, r5
 8005cfc:	f7fa fa68 	bl	80001d0 <__aeabi_dsub>
 8005d00:	4642      	mov	r2, r8
 8005d02:	464b      	mov	r3, r9
 8005d04:	f7fa fea2 	bl	8000a4c <__aeabi_dcmpge>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	f43f aef1 	beq.w	8005af0 <__ieee754_pow+0x770>
 8005d0e:	e7e7      	b.n	8005ce0 <__ieee754_pow+0x960>
 8005d10:	f04f 0a00 	mov.w	sl, #0
 8005d14:	e718      	b.n	8005b48 <__ieee754_pow+0x7c8>
 8005d16:	4621      	mov	r1, r4
 8005d18:	e7d4      	b.n	8005cc4 <__ieee754_pow+0x944>
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	491a      	ldr	r1, [pc, #104]	; (8005d88 <__ieee754_pow+0xa08>)
 8005d1e:	f7ff bb8f 	b.w	8005440 <__ieee754_pow+0xc0>
 8005d22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d26:	f7ff bb8b 	b.w	8005440 <__ieee754_pow+0xc0>
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	4639      	mov	r1, r7
 8005d2e:	f7ff bb87 	b.w	8005440 <__ieee754_pow+0xc0>
 8005d32:	4693      	mov	fp, r2
 8005d34:	f7ff bb98 	b.w	8005468 <__ieee754_pow+0xe8>
 8005d38:	00000000 	.word	0x00000000
 8005d3c:	3fe62e43 	.word	0x3fe62e43
 8005d40:	fefa39ef 	.word	0xfefa39ef
 8005d44:	3fe62e42 	.word	0x3fe62e42
 8005d48:	0ca86c39 	.word	0x0ca86c39
 8005d4c:	be205c61 	.word	0xbe205c61
 8005d50:	72bea4d0 	.word	0x72bea4d0
 8005d54:	3e663769 	.word	0x3e663769
 8005d58:	c5d26bf1 	.word	0xc5d26bf1
 8005d5c:	3ebbbd41 	.word	0x3ebbbd41
 8005d60:	af25de2c 	.word	0xaf25de2c
 8005d64:	3f11566a 	.word	0x3f11566a
 8005d68:	16bebd93 	.word	0x16bebd93
 8005d6c:	3f66c16c 	.word	0x3f66c16c
 8005d70:	5555553e 	.word	0x5555553e
 8005d74:	3fc55555 	.word	0x3fc55555
 8005d78:	c2f8f359 	.word	0xc2f8f359
 8005d7c:	01a56e1f 	.word	0x01a56e1f
 8005d80:	3fe00000 	.word	0x3fe00000
 8005d84:	000fffff 	.word	0x000fffff
 8005d88:	3ff00000 	.word	0x3ff00000
 8005d8c:	4090cbff 	.word	0x4090cbff
 8005d90:	3f6f3400 	.word	0x3f6f3400
 8005d94:	652b82fe 	.word	0x652b82fe
 8005d98:	3c971547 	.word	0x3c971547

08005d9c <__ieee754_sqrt>:
 8005d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da0:	4955      	ldr	r1, [pc, #340]	; (8005ef8 <__ieee754_sqrt+0x15c>)
 8005da2:	ec55 4b10 	vmov	r4, r5, d0
 8005da6:	43a9      	bics	r1, r5
 8005da8:	462b      	mov	r3, r5
 8005daa:	462a      	mov	r2, r5
 8005dac:	d112      	bne.n	8005dd4 <__ieee754_sqrt+0x38>
 8005dae:	ee10 2a10 	vmov	r2, s0
 8005db2:	ee10 0a10 	vmov	r0, s0
 8005db6:	4629      	mov	r1, r5
 8005db8:	f7fa fbc2 	bl	8000540 <__aeabi_dmul>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	f7fa fa06 	bl	80001d4 <__adddf3>
 8005dc8:	4604      	mov	r4, r0
 8005dca:	460d      	mov	r5, r1
 8005dcc:	ec45 4b10 	vmov	d0, r4, r5
 8005dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd4:	2d00      	cmp	r5, #0
 8005dd6:	ee10 0a10 	vmov	r0, s0
 8005dda:	4621      	mov	r1, r4
 8005ddc:	dc0f      	bgt.n	8005dfe <__ieee754_sqrt+0x62>
 8005dde:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005de2:	4330      	orrs	r0, r6
 8005de4:	d0f2      	beq.n	8005dcc <__ieee754_sqrt+0x30>
 8005de6:	b155      	cbz	r5, 8005dfe <__ieee754_sqrt+0x62>
 8005de8:	ee10 2a10 	vmov	r2, s0
 8005dec:	4620      	mov	r0, r4
 8005dee:	4629      	mov	r1, r5
 8005df0:	f7fa f9ee 	bl	80001d0 <__aeabi_dsub>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	f7fa fccc 	bl	8000794 <__aeabi_ddiv>
 8005dfc:	e7e4      	b.n	8005dc8 <__ieee754_sqrt+0x2c>
 8005dfe:	151b      	asrs	r3, r3, #20
 8005e00:	d073      	beq.n	8005eea <__ieee754_sqrt+0x14e>
 8005e02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005e06:	07dd      	lsls	r5, r3, #31
 8005e08:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005e0c:	bf48      	it	mi
 8005e0e:	0fc8      	lsrmi	r0, r1, #31
 8005e10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e14:	bf44      	itt	mi
 8005e16:	0049      	lslmi	r1, r1, #1
 8005e18:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8005e1c:	2500      	movs	r5, #0
 8005e1e:	1058      	asrs	r0, r3, #1
 8005e20:	0fcb      	lsrs	r3, r1, #31
 8005e22:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005e26:	0049      	lsls	r1, r1, #1
 8005e28:	2316      	movs	r3, #22
 8005e2a:	462c      	mov	r4, r5
 8005e2c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005e30:	19a7      	adds	r7, r4, r6
 8005e32:	4297      	cmp	r7, r2
 8005e34:	bfde      	ittt	le
 8005e36:	19bc      	addle	r4, r7, r6
 8005e38:	1bd2      	suble	r2, r2, r7
 8005e3a:	19ad      	addle	r5, r5, r6
 8005e3c:	0fcf      	lsrs	r7, r1, #31
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005e44:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005e48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005e4c:	d1f0      	bne.n	8005e30 <__ieee754_sqrt+0x94>
 8005e4e:	f04f 0c20 	mov.w	ip, #32
 8005e52:	469e      	mov	lr, r3
 8005e54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005e58:	42a2      	cmp	r2, r4
 8005e5a:	eb06 070e 	add.w	r7, r6, lr
 8005e5e:	dc02      	bgt.n	8005e66 <__ieee754_sqrt+0xca>
 8005e60:	d112      	bne.n	8005e88 <__ieee754_sqrt+0xec>
 8005e62:	428f      	cmp	r7, r1
 8005e64:	d810      	bhi.n	8005e88 <__ieee754_sqrt+0xec>
 8005e66:	2f00      	cmp	r7, #0
 8005e68:	eb07 0e06 	add.w	lr, r7, r6
 8005e6c:	da42      	bge.n	8005ef4 <__ieee754_sqrt+0x158>
 8005e6e:	f1be 0f00 	cmp.w	lr, #0
 8005e72:	db3f      	blt.n	8005ef4 <__ieee754_sqrt+0x158>
 8005e74:	f104 0801 	add.w	r8, r4, #1
 8005e78:	1b12      	subs	r2, r2, r4
 8005e7a:	428f      	cmp	r7, r1
 8005e7c:	bf88      	it	hi
 8005e7e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8005e82:	1bc9      	subs	r1, r1, r7
 8005e84:	4433      	add	r3, r6
 8005e86:	4644      	mov	r4, r8
 8005e88:	0052      	lsls	r2, r2, #1
 8005e8a:	f1bc 0c01 	subs.w	ip, ip, #1
 8005e8e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005e92:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005e96:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005e9a:	d1dd      	bne.n	8005e58 <__ieee754_sqrt+0xbc>
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	d006      	beq.n	8005eae <__ieee754_sqrt+0x112>
 8005ea0:	1c5c      	adds	r4, r3, #1
 8005ea2:	bf13      	iteet	ne
 8005ea4:	3301      	addne	r3, #1
 8005ea6:	3501      	addeq	r5, #1
 8005ea8:	4663      	moveq	r3, ip
 8005eaa:	f023 0301 	bicne.w	r3, r3, #1
 8005eae:	106a      	asrs	r2, r5, #1
 8005eb0:	085b      	lsrs	r3, r3, #1
 8005eb2:	07e9      	lsls	r1, r5, #31
 8005eb4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005eb8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005ebc:	bf48      	it	mi
 8005ebe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005ec2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005ec6:	461c      	mov	r4, r3
 8005ec8:	e780      	b.n	8005dcc <__ieee754_sqrt+0x30>
 8005eca:	0aca      	lsrs	r2, r1, #11
 8005ecc:	3815      	subs	r0, #21
 8005ece:	0549      	lsls	r1, r1, #21
 8005ed0:	2a00      	cmp	r2, #0
 8005ed2:	d0fa      	beq.n	8005eca <__ieee754_sqrt+0x12e>
 8005ed4:	02d6      	lsls	r6, r2, #11
 8005ed6:	d50a      	bpl.n	8005eee <__ieee754_sqrt+0x152>
 8005ed8:	f1c3 0420 	rsb	r4, r3, #32
 8005edc:	fa21 f404 	lsr.w	r4, r1, r4
 8005ee0:	1e5d      	subs	r5, r3, #1
 8005ee2:	4099      	lsls	r1, r3
 8005ee4:	4322      	orrs	r2, r4
 8005ee6:	1b43      	subs	r3, r0, r5
 8005ee8:	e78b      	b.n	8005e02 <__ieee754_sqrt+0x66>
 8005eea:	4618      	mov	r0, r3
 8005eec:	e7f0      	b.n	8005ed0 <__ieee754_sqrt+0x134>
 8005eee:	0052      	lsls	r2, r2, #1
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	e7ef      	b.n	8005ed4 <__ieee754_sqrt+0x138>
 8005ef4:	46a0      	mov	r8, r4
 8005ef6:	e7bf      	b.n	8005e78 <__ieee754_sqrt+0xdc>
 8005ef8:	7ff00000 	.word	0x7ff00000

08005efc <fabs>:
 8005efc:	ec51 0b10 	vmov	r0, r1, d0
 8005f00:	ee10 2a10 	vmov	r2, s0
 8005f04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f08:	ec43 2b10 	vmov	d0, r2, r3
 8005f0c:	4770      	bx	lr

08005f0e <finite>:
 8005f0e:	ee10 3a90 	vmov	r3, s1
 8005f12:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8005f16:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005f1a:	0fc0      	lsrs	r0, r0, #31
 8005f1c:	4770      	bx	lr

08005f1e <matherr>:
 8005f1e:	2000      	movs	r0, #0
 8005f20:	4770      	bx	lr
 8005f22:	0000      	movs	r0, r0
 8005f24:	0000      	movs	r0, r0
	...

08005f28 <nan>:
 8005f28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005f30 <nan+0x8>
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	00000000 	.word	0x00000000
 8005f34:	7ff80000 	.word	0x7ff80000

08005f38 <rint>:
 8005f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f3a:	ec51 0b10 	vmov	r0, r1, d0
 8005f3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005f42:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005f46:	2e13      	cmp	r6, #19
 8005f48:	460b      	mov	r3, r1
 8005f4a:	ee10 4a10 	vmov	r4, s0
 8005f4e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005f52:	dc56      	bgt.n	8006002 <rint+0xca>
 8005f54:	2e00      	cmp	r6, #0
 8005f56:	da2b      	bge.n	8005fb0 <rint+0x78>
 8005f58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005f5c:	4302      	orrs	r2, r0
 8005f5e:	d023      	beq.n	8005fa8 <rint+0x70>
 8005f60:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005f64:	4302      	orrs	r2, r0
 8005f66:	4254      	negs	r4, r2
 8005f68:	4314      	orrs	r4, r2
 8005f6a:	0c4b      	lsrs	r3, r1, #17
 8005f6c:	0b24      	lsrs	r4, r4, #12
 8005f6e:	045b      	lsls	r3, r3, #17
 8005f70:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8005f74:	ea44 0103 	orr.w	r1, r4, r3
 8005f78:	460b      	mov	r3, r1
 8005f7a:	492f      	ldr	r1, [pc, #188]	; (8006038 <rint+0x100>)
 8005f7c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8005f80:	e9d1 6700 	ldrd	r6, r7, [r1]
 8005f84:	4602      	mov	r2, r0
 8005f86:	4639      	mov	r1, r7
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f7fa f923 	bl	80001d4 <__adddf3>
 8005f8e:	e9cd 0100 	strd	r0, r1, [sp]
 8005f92:	463b      	mov	r3, r7
 8005f94:	4632      	mov	r2, r6
 8005f96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f9a:	f7fa f919 	bl	80001d0 <__aeabi_dsub>
 8005f9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005fa2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	ec41 0b10 	vmov	d0, r0, r1
 8005fac:	b003      	add	sp, #12
 8005fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb0:	4a22      	ldr	r2, [pc, #136]	; (800603c <rint+0x104>)
 8005fb2:	4132      	asrs	r2, r6
 8005fb4:	ea01 0702 	and.w	r7, r1, r2
 8005fb8:	4307      	orrs	r7, r0
 8005fba:	d0f5      	beq.n	8005fa8 <rint+0x70>
 8005fbc:	0852      	lsrs	r2, r2, #1
 8005fbe:	4011      	ands	r1, r2
 8005fc0:	430c      	orrs	r4, r1
 8005fc2:	d00b      	beq.n	8005fdc <rint+0xa4>
 8005fc4:	ea23 0202 	bic.w	r2, r3, r2
 8005fc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005fcc:	2e13      	cmp	r6, #19
 8005fce:	fa43 f306 	asr.w	r3, r3, r6
 8005fd2:	bf0c      	ite	eq
 8005fd4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005fd8:	2400      	movne	r4, #0
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	4916      	ldr	r1, [pc, #88]	; (8006038 <rint+0x100>)
 8005fde:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005fe2:	4622      	mov	r2, r4
 8005fe4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005fe8:	4620      	mov	r0, r4
 8005fea:	4629      	mov	r1, r5
 8005fec:	f7fa f8f2 	bl	80001d4 <__adddf3>
 8005ff0:	e9cd 0100 	strd	r0, r1, [sp]
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	462b      	mov	r3, r5
 8005ff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ffc:	f7fa f8e8 	bl	80001d0 <__aeabi_dsub>
 8006000:	e7d2      	b.n	8005fa8 <rint+0x70>
 8006002:	2e33      	cmp	r6, #51	; 0x33
 8006004:	dd07      	ble.n	8006016 <rint+0xde>
 8006006:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800600a:	d1cd      	bne.n	8005fa8 <rint+0x70>
 800600c:	ee10 2a10 	vmov	r2, s0
 8006010:	f7fa f8e0 	bl	80001d4 <__adddf3>
 8006014:	e7c8      	b.n	8005fa8 <rint+0x70>
 8006016:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800601a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800601e:	40f2      	lsrs	r2, r6
 8006020:	4210      	tst	r0, r2
 8006022:	d0c1      	beq.n	8005fa8 <rint+0x70>
 8006024:	0852      	lsrs	r2, r2, #1
 8006026:	4210      	tst	r0, r2
 8006028:	bf1f      	itttt	ne
 800602a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800602e:	ea20 0202 	bicne.w	r2, r0, r2
 8006032:	4134      	asrne	r4, r6
 8006034:	4314      	orrne	r4, r2
 8006036:	e7d1      	b.n	8005fdc <rint+0xa4>
 8006038:	080061b8 	.word	0x080061b8
 800603c:	000fffff 	.word	0x000fffff

08006040 <scalbn>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	ec55 4b10 	vmov	r4, r5, d0
 8006046:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800604a:	4606      	mov	r6, r0
 800604c:	462b      	mov	r3, r5
 800604e:	b9aa      	cbnz	r2, 800607c <scalbn+0x3c>
 8006050:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006054:	4323      	orrs	r3, r4
 8006056:	d03b      	beq.n	80060d0 <scalbn+0x90>
 8006058:	4b31      	ldr	r3, [pc, #196]	; (8006120 <scalbn+0xe0>)
 800605a:	4629      	mov	r1, r5
 800605c:	2200      	movs	r2, #0
 800605e:	ee10 0a10 	vmov	r0, s0
 8006062:	f7fa fa6d 	bl	8000540 <__aeabi_dmul>
 8006066:	4b2f      	ldr	r3, [pc, #188]	; (8006124 <scalbn+0xe4>)
 8006068:	429e      	cmp	r6, r3
 800606a:	4604      	mov	r4, r0
 800606c:	460d      	mov	r5, r1
 800606e:	da12      	bge.n	8006096 <scalbn+0x56>
 8006070:	a327      	add	r3, pc, #156	; (adr r3, 8006110 <scalbn+0xd0>)
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f7fa fa63 	bl	8000540 <__aeabi_dmul>
 800607a:	e009      	b.n	8006090 <scalbn+0x50>
 800607c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006080:	428a      	cmp	r2, r1
 8006082:	d10c      	bne.n	800609e <scalbn+0x5e>
 8006084:	ee10 2a10 	vmov	r2, s0
 8006088:	4620      	mov	r0, r4
 800608a:	4629      	mov	r1, r5
 800608c:	f7fa f8a2 	bl	80001d4 <__adddf3>
 8006090:	4604      	mov	r4, r0
 8006092:	460d      	mov	r5, r1
 8006094:	e01c      	b.n	80060d0 <scalbn+0x90>
 8006096:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800609a:	460b      	mov	r3, r1
 800609c:	3a36      	subs	r2, #54	; 0x36
 800609e:	4432      	add	r2, r6
 80060a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80060a4:	428a      	cmp	r2, r1
 80060a6:	dd0b      	ble.n	80060c0 <scalbn+0x80>
 80060a8:	ec45 4b11 	vmov	d1, r4, r5
 80060ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006118 <scalbn+0xd8>
 80060b0:	f000 f83c 	bl	800612c <copysign>
 80060b4:	a318      	add	r3, pc, #96	; (adr r3, 8006118 <scalbn+0xd8>)
 80060b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ba:	ec51 0b10 	vmov	r0, r1, d0
 80060be:	e7da      	b.n	8006076 <scalbn+0x36>
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	dd08      	ble.n	80060d6 <scalbn+0x96>
 80060c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80060c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80060cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80060d0:	ec45 4b10 	vmov	d0, r4, r5
 80060d4:	bd70      	pop	{r4, r5, r6, pc}
 80060d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80060da:	da0d      	bge.n	80060f8 <scalbn+0xb8>
 80060dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80060e0:	429e      	cmp	r6, r3
 80060e2:	ec45 4b11 	vmov	d1, r4, r5
 80060e6:	dce1      	bgt.n	80060ac <scalbn+0x6c>
 80060e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006110 <scalbn+0xd0>
 80060ec:	f000 f81e 	bl	800612c <copysign>
 80060f0:	a307      	add	r3, pc, #28	; (adr r3, 8006110 <scalbn+0xd0>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	e7e0      	b.n	80060ba <scalbn+0x7a>
 80060f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80060fc:	3236      	adds	r2, #54	; 0x36
 80060fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006102:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006106:	4620      	mov	r0, r4
 8006108:	4629      	mov	r1, r5
 800610a:	2200      	movs	r2, #0
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <scalbn+0xe8>)
 800610e:	e7b2      	b.n	8006076 <scalbn+0x36>
 8006110:	c2f8f359 	.word	0xc2f8f359
 8006114:	01a56e1f 	.word	0x01a56e1f
 8006118:	8800759c 	.word	0x8800759c
 800611c:	7e37e43c 	.word	0x7e37e43c
 8006120:	43500000 	.word	0x43500000
 8006124:	ffff3cb0 	.word	0xffff3cb0
 8006128:	3c900000 	.word	0x3c900000

0800612c <copysign>:
 800612c:	ec51 0b10 	vmov	r0, r1, d0
 8006130:	ee11 0a90 	vmov	r0, s3
 8006134:	ee10 2a10 	vmov	r2, s0
 8006138:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800613c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006140:	ea41 0300 	orr.w	r3, r1, r0
 8006144:	ec43 2b10 	vmov	d0, r2, r3
 8006148:	4770      	bx	lr
	...

0800614c <_init>:
 800614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614e:	bf00      	nop
 8006150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006152:	bc08      	pop	{r3}
 8006154:	469e      	mov	lr, r3
 8006156:	4770      	bx	lr

08006158 <_fini>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	bf00      	nop
 800615c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615e:	bc08      	pop	{r3}
 8006160:	469e      	mov	lr, r3
 8006162:	4770      	bx	lr
